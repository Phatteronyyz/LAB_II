
LAB_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083dc  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080085b8  080085b8  000095b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008608  08008608  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08008608  08008608  00009608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008610  08008610  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008610  08008610  00009610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008614  08008614  00009614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008618  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  20000060  08008674  0000a060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08008674  0000a4d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183ae  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ceb  00000000  00000000  0002243a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  00025128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001096  00000000  00000000  00026638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd6  00000000  00000000  000276ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a56  00000000  00000000  000504a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114154  00000000  00000000  00068efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017d04e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f40  00000000  00000000  0017d094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00182fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800859c 	.word	0x0800859c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	0800859c 	.word	0x0800859c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96a 	b.w	8000e2c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	460c      	mov	r4, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14e      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	458c      	cmp	ip, r1
 8000b80:	4686      	mov	lr, r0
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	d962      	bls.n	8000c4e <__udivmoddi4+0xde>
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0320 	rsb	r3, r2, #32
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f f68c 	uxth.w	r6, ip
 8000ba6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000baa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bae:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bc6:	f080 8112 	bcs.w	8000dee <__udivmoddi4+0x27e>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 810f 	bls.w	8000dee <__udivmoddi4+0x27e>
 8000bd0:	3c02      	subs	r4, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a59      	subs	r1, r3, r1
 8000bd6:	fa1f f38e 	uxth.w	r3, lr
 8000bda:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bde:	fb07 1110 	mls	r1, r7, r0, r1
 8000be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be6:	fb00 f606 	mul.w	r6, r0, r6
 8000bea:	429e      	cmp	r6, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf6:	f080 80fc 	bcs.w	8000df2 <__udivmoddi4+0x282>
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	f240 80f9 	bls.w	8000df2 <__udivmoddi4+0x282>
 8000c00:	4463      	add	r3, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	1b9b      	subs	r3, r3, r6
 8000c06:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	b11d      	cbz	r5, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	2200      	movs	r2, #0
 8000c12:	e9c5 3200 	strd	r3, r2, [r5]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d905      	bls.n	8000c2a <__udivmoddi4+0xba>
 8000c1e:	b10d      	cbz	r5, 8000c24 <__udivmoddi4+0xb4>
 8000c20:	e9c5 0100 	strd	r0, r1, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4608      	mov	r0, r1
 8000c28:	e7f5      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c2a:	fab3 f183 	clz	r1, r3
 8000c2e:	2900      	cmp	r1, #0
 8000c30:	d146      	bne.n	8000cc0 <__udivmoddi4+0x150>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xcc>
 8000c36:	4290      	cmp	r0, r2
 8000c38:	f0c0 80f0 	bcc.w	8000e1c <__udivmoddi4+0x2ac>
 8000c3c:	1a86      	subs	r6, r0, r2
 8000c3e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d0e6      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c48:	e9c5 6300 	strd	r6, r3, [r5]
 8000c4c:	e7e3      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	f040 8090 	bne.w	8000d74 <__udivmoddi4+0x204>
 8000c54:	eba1 040c 	sub.w	r4, r1, ip
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	2101      	movs	r1, #1
 8000c62:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c72:	fb07 f006 	mul.w	r0, r7, r6
 8000c76:	4298      	cmp	r0, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x11c>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x11a>
 8000c84:	4298      	cmp	r0, r3
 8000c86:	f200 80cd 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	1a1c      	subs	r4, r3, r0
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c96:	fb08 4410 	mls	r4, r8, r0, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb00 f707 	mul.w	r7, r0, r7
 8000ca2:	429f      	cmp	r7, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x148>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x146>
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	f200 80b0 	bhi.w	8000e16 <__udivmoddi4+0x2a6>
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	1bdb      	subs	r3, r3, r7
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cc0:	f1c1 0620 	rsb	r6, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cca:	431f      	orrs	r7, r3
 8000ccc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd0:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd4:	ea43 030c 	orr.w	r3, r3, ip
 8000cd8:	40f4      	lsrs	r4, r6
 8000cda:	fa00 f801 	lsl.w	r8, r0, r1
 8000cde:	0c38      	lsrs	r0, r7, #16
 8000ce0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	fb00 441e 	mls	r4, r0, lr, r4
 8000cf0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf4:	fb0e f90c 	mul.w	r9, lr, ip
 8000cf8:	45a1      	cmp	r9, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	d90a      	bls.n	8000d16 <__udivmoddi4+0x1a6>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d06:	f080 8084 	bcs.w	8000e12 <__udivmoddi4+0x2a2>
 8000d0a:	45a1      	cmp	r9, r4
 8000d0c:	f240 8081 	bls.w	8000e12 <__udivmoddi4+0x2a2>
 8000d10:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d14:	443c      	add	r4, r7
 8000d16:	eba4 0409 	sub.w	r4, r4, r9
 8000d1a:	fa1f f983 	uxth.w	r9, r3
 8000d1e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d22:	fb00 4413 	mls	r4, r0, r3, r4
 8000d26:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d2e:	45a4      	cmp	ip, r4
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x1d2>
 8000d32:	193c      	adds	r4, r7, r4
 8000d34:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d38:	d267      	bcs.n	8000e0a <__udivmoddi4+0x29a>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0x29a>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d46:	fba0 9302 	umull	r9, r3, r0, r2
 8000d4a:	eba4 040c 	sub.w	r4, r4, ip
 8000d4e:	429c      	cmp	r4, r3
 8000d50:	46ce      	mov	lr, r9
 8000d52:	469c      	mov	ip, r3
 8000d54:	d351      	bcc.n	8000dfa <__udivmoddi4+0x28a>
 8000d56:	d04e      	beq.n	8000df6 <__udivmoddi4+0x286>
 8000d58:	b155      	cbz	r5, 8000d70 <__udivmoddi4+0x200>
 8000d5a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d5e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d62:	fa04 f606 	lsl.w	r6, r4, r6
 8000d66:	40cb      	lsrs	r3, r1
 8000d68:	431e      	orrs	r6, r3
 8000d6a:	40cc      	lsrs	r4, r1
 8000d6c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e750      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d74:	f1c2 0320 	rsb	r3, r2, #32
 8000d78:	fa20 f103 	lsr.w	r1, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa24 f303 	lsr.w	r3, r4, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	430c      	orrs	r4, r1
 8000d88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d8c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d90:	fa1f f78c 	uxth.w	r7, ip
 8000d94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d98:	fb08 3110 	mls	r1, r8, r0, r3
 8000d9c:	0c23      	lsrs	r3, r4, #16
 8000d9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da2:	fb00 f107 	mul.w	r1, r0, r7
 8000da6:	4299      	cmp	r1, r3
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x24c>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 36ff 	add.w	r6, r0, #4294967295
 8000db2:	d22c      	bcs.n	8000e0e <__udivmoddi4+0x29e>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	d92a      	bls.n	8000e0e <__udivmoddi4+0x29e>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb01 f307 	mul.w	r3, r1, r7
 8000dd0:	42a3      	cmp	r3, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x276>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ddc:	d213      	bcs.n	8000e06 <__udivmoddi4+0x296>
 8000dde:	42a3      	cmp	r3, r4
 8000de0:	d911      	bls.n	8000e06 <__udivmoddi4+0x296>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	1ae4      	subs	r4, r4, r3
 8000de8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dec:	e739      	b.n	8000c62 <__udivmoddi4+0xf2>
 8000dee:	4604      	mov	r4, r0
 8000df0:	e6f0      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000df2:	4608      	mov	r0, r1
 8000df4:	e706      	b.n	8000c04 <__udivmoddi4+0x94>
 8000df6:	45c8      	cmp	r8, r9
 8000df8:	d2ae      	bcs.n	8000d58 <__udivmoddi4+0x1e8>
 8000dfa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dfe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e02:	3801      	subs	r0, #1
 8000e04:	e7a8      	b.n	8000d58 <__udivmoddi4+0x1e8>
 8000e06:	4631      	mov	r1, r6
 8000e08:	e7ed      	b.n	8000de6 <__udivmoddi4+0x276>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	e799      	b.n	8000d42 <__udivmoddi4+0x1d2>
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e7d4      	b.n	8000dbc <__udivmoddi4+0x24c>
 8000e12:	46d6      	mov	lr, sl
 8000e14:	e77f      	b.n	8000d16 <__udivmoddi4+0x1a6>
 8000e16:	4463      	add	r3, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e74d      	b.n	8000cb8 <__udivmoddi4+0x148>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	4623      	mov	r3, r4
 8000e20:	4608      	mov	r0, r1
 8000e22:	e70f      	b.n	8000c44 <__udivmoddi4+0xd4>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	e730      	b.n	8000c8c <__udivmoddi4+0x11c>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e34:	f001 f979 	bl	800212a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e38:	f000 f882 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3c:	f000 fb60 	bl	8001500 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e40:	f000 fb34 	bl	80014ac <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000e44:	f000 f950 	bl	80010e8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000e48:	f000 f8c6 	bl	8000fd8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000e4c:	f000 fa3e 	bl	80012cc <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e50:	f000 f9ee 	bl	8001230 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000e54:	f000 f992 	bl	800117c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000e58:	f000 fab0 	bl	80013bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000e5c:	217f      	movs	r1, #127	@ 0x7f
 8000e5e:	4828      	ldr	r0, [pc, #160]	@ (8000f00 <main+0xd0>)
 8000e60:	f002 ff6e 	bl	8003d40 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 2);
 8000e64:	2202      	movs	r2, #2
 8000e66:	4927      	ldr	r1, [pc, #156]	@ (8000f04 <main+0xd4>)
 8000e68:	4825      	ldr	r0, [pc, #148]	@ (8000f00 <main+0xd0>)
 8000e6a:	f001 fdf1 	bl	8002a50 <HAL_ADC_Start_DMA>

  PID.Kp = 0.01;
 8000e6e:	4b26      	ldr	r3, [pc, #152]	@ (8000f08 <main+0xd8>)
 8000e70:	4a26      	ldr	r2, [pc, #152]	@ (8000f0c <main+0xdc>)
 8000e72:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.0000045;
 8000e74:	4b24      	ldr	r3, [pc, #144]	@ (8000f08 <main+0xd8>)
 8000e76:	4a26      	ldr	r2, [pc, #152]	@ (8000f10 <main+0xe0>)
 8000e78:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.000009;
 8000e7a:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <main+0xd8>)
 8000e7c:	4a25      	ldr	r2, [pc, #148]	@ (8000f14 <main+0xe4>)
 8000e7e:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000e80:	2100      	movs	r1, #0
 8000e82:	4821      	ldr	r0, [pc, #132]	@ (8000f08 <main+0xd8>)
 8000e84:	f007 f9ea 	bl	800825c <arm_pid_init_f32>

  PID2.Kp = 0.0047;
 8000e88:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <main+0xe8>)
 8000e8a:	4a24      	ldr	r2, [pc, #144]	@ (8000f1c <main+0xec>)
 8000e8c:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.000035;
 8000e8e:	4b22      	ldr	r3, [pc, #136]	@ (8000f18 <main+0xe8>)
 8000e90:	4a23      	ldr	r2, [pc, #140]	@ (8000f20 <main+0xf0>)
 8000e92:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0.00041;
 8000e94:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <main+0xe8>)
 8000e96:	4a23      	ldr	r2, [pc, #140]	@ (8000f24 <main+0xf4>)
 8000e98:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	481e      	ldr	r0, [pc, #120]	@ (8000f18 <main+0xe8>)
 8000e9e:	f007 f9dd 	bl	800825c <arm_pid_init_f32>

  HAL_TIM_Base_Start_IT(&htim2);
 8000ea2:	4821      	ldr	r0, [pc, #132]	@ (8000f28 <main+0xf8>)
 8000ea4:	f004 ff2e 	bl	8005d04 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim3);
 8000ea8:	4820      	ldr	r0, [pc, #128]	@ (8000f2c <main+0xfc>)
 8000eaa:	f004 febb 	bl	8005c24 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	481e      	ldr	r0, [pc, #120]	@ (8000f2c <main+0xfc>)
 8000eb2:	f005 f801 	bl	8005eb8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim4);
 8000eb6:	481e      	ldr	r0, [pc, #120]	@ (8000f30 <main+0x100>)
 8000eb8:	f004 feb4 	bl	8005c24 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	481c      	ldr	r0, [pc, #112]	@ (8000f30 <main+0x100>)
 8000ec0:	f004 fffa 	bl	8005eb8 <HAL_TIM_PWM_Start>



  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8000ec4:	213c      	movs	r1, #60	@ 0x3c
 8000ec6:	481b      	ldr	r0, [pc, #108]	@ (8000f34 <main+0x104>)
 8000ec8:	f005 f9ae 	bl	8006228 <HAL_TIM_Encoder_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_set);

	  if(Mode == 0){
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <main+0x108>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <main+0xaa>
		  Part_I_PID_ADC();
 8000ed4:	f000 fc54 	bl	8001780 <Part_I_PID_ADC>
 8000ed8:	e7f8      	b.n	8000ecc <main+0x9c>
	  }
	  else if(Mode == 1){
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <main+0x108>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d107      	bne.n	8000ef2 <main+0xc2>
		  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim1);
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <main+0x104>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee8:	4a14      	ldr	r2, [pc, #80]	@ (8000f3c <main+0x10c>)
 8000eea:	6013      	str	r3, [r2, #0]
		  Part_II_QEI();
 8000eec:	f000 fd58 	bl	80019a0 <Part_II_QEI>
 8000ef0:	e7ec      	b.n	8000ecc <main+0x9c>
	  }
	  else if(Mode == 2){
 8000ef2:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <main+0x108>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d1e8      	bne.n	8000ecc <main+0x9c>
		  Part_III_UART();
 8000efa:	f000 fe51 	bl	8001ba0 <Part_III_UART>
	  if(Mode == 0){
 8000efe:	e7e5      	b.n	8000ecc <main+0x9c>
 8000f00:	2000007c 	.word	0x2000007c
 8000f04:	2000033c 	.word	0x2000033c
 8000f08:	20000340 	.word	0x20000340
 8000f0c:	3c23d70a 	.word	0x3c23d70a
 8000f10:	3696feb5 	.word	0x3696feb5
 8000f14:	3716feb5 	.word	0x3716feb5
 8000f18:	20000364 	.word	0x20000364
 8000f1c:	3b9a0275 	.word	0x3b9a0275
 8000f20:	3812ccf7 	.word	0x3812ccf7
 8000f24:	39d6f545 	.word	0x39d6f545
 8000f28:	20000228 	.word	0x20000228
 8000f2c:	20000274 	.word	0x20000274
 8000f30:	200002c0 	.word	0x200002c0
 8000f34:	200001dc 	.word	0x200001dc
 8000f38:	2000030c 	.word	0x2000030c
 8000f3c:	20000388 	.word	0x20000388

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	@ 0x50
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0318 	add.w	r3, r7, #24
 8000f4a:	2238      	movs	r2, #56	@ 0x38
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f007 f9ba 	bl	80082c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f003 fdd6 	bl	8004b14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f72:	2340      	movs	r3, #64	@ 0x40
 8000f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f76:	2302      	movs	r3, #2
 8000f78:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f82:	2355      	movs	r3, #85	@ 0x55
 8000f84:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f86:	2302      	movs	r3, #2
 8000f88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f92:	f107 0318 	add.w	r3, r7, #24
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 fe70 	bl	8004c7c <HAL_RCC_OscConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fa2:	f000 fe39 	bl	8001c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000faa:	2303      	movs	r3, #3
 8000fac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f004 f96e 	bl	80052a0 <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000fca:	f000 fe25 	bl	8001c18 <Error_Handler>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3750      	adds	r7, #80	@ 0x50
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	@ 0x30
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2220      	movs	r2, #32
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f007 f969 	bl	80082c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ff6:	4b39      	ldr	r3, [pc, #228]	@ (80010dc <MX_ADC1_Init+0x104>)
 8000ff8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ffc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ffe:	4b37      	ldr	r3, [pc, #220]	@ (80010dc <MX_ADC1_Init+0x104>)
 8001000:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001004:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001006:	4b35      	ldr	r3, [pc, #212]	@ (80010dc <MX_ADC1_Init+0x104>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100c:	4b33      	ldr	r3, [pc, #204]	@ (80010dc <MX_ADC1_Init+0x104>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001012:	4b32      	ldr	r3, [pc, #200]	@ (80010dc <MX_ADC1_Init+0x104>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001018:	4b30      	ldr	r3, [pc, #192]	@ (80010dc <MX_ADC1_Init+0x104>)
 800101a:	2201      	movs	r2, #1
 800101c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101e:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <MX_ADC1_Init+0x104>)
 8001020:	2204      	movs	r2, #4
 8001022:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001024:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <MX_ADC1_Init+0x104>)
 8001026:	2200      	movs	r2, #0
 8001028:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800102a:	4b2c      	ldr	r3, [pc, #176]	@ (80010dc <MX_ADC1_Init+0x104>)
 800102c:	2201      	movs	r2, #1
 800102e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001030:	4b2a      	ldr	r3, [pc, #168]	@ (80010dc <MX_ADC1_Init+0x104>)
 8001032:	2202      	movs	r2, #2
 8001034:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001036:	4b29      	ldr	r3, [pc, #164]	@ (80010dc <MX_ADC1_Init+0x104>)
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800103e:	4b27      	ldr	r3, [pc, #156]	@ (80010dc <MX_ADC1_Init+0x104>)
 8001040:	2200      	movs	r2, #0
 8001042:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001044:	4b25      	ldr	r3, [pc, #148]	@ (80010dc <MX_ADC1_Init+0x104>)
 8001046:	2200      	movs	r2, #0
 8001048:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800104a:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <MX_ADC1_Init+0x104>)
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001052:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <MX_ADC1_Init+0x104>)
 8001054:	2200      	movs	r2, #0
 8001056:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001058:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <MX_ADC1_Init+0x104>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001060:	481e      	ldr	r0, [pc, #120]	@ (80010dc <MX_ADC1_Init+0x104>)
 8001062:	f001 fb39 	bl	80026d8 <HAL_ADC_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800106c:	f000 fdd4 	bl	8001c18 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001078:	4619      	mov	r1, r3
 800107a:	4818      	ldr	r0, [pc, #96]	@ (80010dc <MX_ADC1_Init+0x104>)
 800107c:	f002 fef4 	bl	8003e68 <HAL_ADCEx_MultiModeConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001086:	f000 fdc7 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <MX_ADC1_Init+0x108>)
 800108c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800108e:	2306      	movs	r3, #6
 8001090:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001092:	2307      	movs	r3, #7
 8001094:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001096:	237f      	movs	r3, #127	@ 0x7f
 8001098:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800109a:	2304      	movs	r3, #4
 800109c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4619      	mov	r1, r3
 80010a6:	480d      	ldr	r0, [pc, #52]	@ (80010dc <MX_ADC1_Init+0x104>)
 80010a8:	f002 f82e 	bl	8003108 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80010b2:	f000 fdb1 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <MX_ADC1_Init+0x10c>)
 80010b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010ba:	230c      	movs	r3, #12
 80010bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	@ (80010dc <MX_ADC1_Init+0x104>)
 80010c4:	f002 f820 	bl	8003108 <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80010ce:	f000 fda3 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	3730      	adds	r7, #48	@ 0x30
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000007c 	.word	0x2000007c
 80010e0:	04300002 	.word	0x04300002
 80010e4:	08600004 	.word	0x08600004

080010e8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80010ec:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <MX_LPUART1_UART_Init+0x8c>)
 80010ee:	4a22      	ldr	r2, [pc, #136]	@ (8001178 <MX_LPUART1_UART_Init+0x90>)
 80010f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80010f2:	4b20      	ldr	r3, [pc, #128]	@ (8001174 <MX_LPUART1_UART_Init+0x8c>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001174 <MX_LPUART1_UART_Init+0x8c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <MX_LPUART1_UART_Init+0x8c>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001106:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <MX_LPUART1_UART_Init+0x8c>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <MX_LPUART1_UART_Init+0x8c>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <MX_LPUART1_UART_Init+0x8c>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001118:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <MX_LPUART1_UART_Init+0x8c>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <MX_LPUART1_UART_Init+0x8c>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001124:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <MX_LPUART1_UART_Init+0x8c>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800112a:	4812      	ldr	r0, [pc, #72]	@ (8001174 <MX_LPUART1_UART_Init+0x8c>)
 800112c:	f006 fa28 	bl	8007580 <HAL_UART_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001136:	f000 fd6f 	bl	8001c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800113a:	2100      	movs	r1, #0
 800113c:	480d      	ldr	r0, [pc, #52]	@ (8001174 <MX_LPUART1_UART_Init+0x8c>)
 800113e:	f006 ffc3 	bl	80080c8 <HAL_UARTEx_SetTxFifoThreshold>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001148:	f000 fd66 	bl	8001c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114c:	2100      	movs	r1, #0
 800114e:	4809      	ldr	r0, [pc, #36]	@ (8001174 <MX_LPUART1_UART_Init+0x8c>)
 8001150:	f006 fff8 	bl	8008144 <HAL_UARTEx_SetRxFifoThreshold>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800115a:	f000 fd5d 	bl	8001c18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	@ (8001174 <MX_LPUART1_UART_Init+0x8c>)
 8001160:	f006 ff79 	bl	8008056 <HAL_UARTEx_DisableFifoMode>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800116a:	f000 fd55 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000148 	.word	0x20000148
 8001178:	40008000 	.word	0x40008000

0800117c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08c      	sub	sp, #48	@ 0x30
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2224      	movs	r2, #36	@ 0x24
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f007 f89c 	bl	80082c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800119a:	4b23      	ldr	r3, [pc, #140]	@ (8001228 <MX_TIM1_Init+0xac>)
 800119c:	4a23      	ldr	r2, [pc, #140]	@ (800122c <MX_TIM1_Init+0xb0>)
 800119e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011a0:	4b21      	ldr	r3, [pc, #132]	@ (8001228 <MX_TIM1_Init+0xac>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <MX_TIM1_Init+0xac>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3071;
 80011ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001228 <MX_TIM1_Init+0xac>)
 80011ae:	f640 32ff 	movw	r2, #3071	@ 0xbff
 80011b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <MX_TIM1_Init+0xac>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <MX_TIM1_Init+0xac>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <MX_TIM1_Init+0xac>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011c6:	2303      	movs	r3, #3
 80011c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011ce:	2301      	movs	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011de:	2301      	movs	r3, #1
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	4619      	mov	r1, r3
 80011f0:	480d      	ldr	r0, [pc, #52]	@ (8001228 <MX_TIM1_Init+0xac>)
 80011f2:	f004 ff73 	bl	80060dc <HAL_TIM_Encoder_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80011fc:	f000 fd0c 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <MX_TIM1_Init+0xac>)
 8001212:	f006 f8d9 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800121c:	f000 fcfc 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3730      	adds	r7, #48	@ 0x30
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200001dc 	.word	0x200001dc
 800122c:	40012c00 	.word	0x40012c00

08001230 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800124e:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <MX_TIM2_Init+0x98>)
 8001250:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001254:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001256:	4b1c      	ldr	r3, [pc, #112]	@ (80012c8 <MX_TIM2_Init+0x98>)
 8001258:	22a9      	movs	r2, #169	@ 0xa9
 800125a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125c:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <MX_TIM2_Init+0x98>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001262:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <MX_TIM2_Init+0x98>)
 8001264:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001268:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126a:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <MX_TIM2_Init+0x98>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <MX_TIM2_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001276:	4814      	ldr	r0, [pc, #80]	@ (80012c8 <MX_TIM2_Init+0x98>)
 8001278:	f004 fc7c 	bl	8005b74 <HAL_TIM_Base_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001282:	f000 fcc9 	bl	8001c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001286:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	480d      	ldr	r0, [pc, #52]	@ (80012c8 <MX_TIM2_Init+0x98>)
 8001294:	f005 faba 	bl	800680c <HAL_TIM_ConfigClockSource>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800129e:	f000 fcbb 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	@ (80012c8 <MX_TIM2_Init+0x98>)
 80012b0:	f006 f88a 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012ba:	f000 fcad 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	3720      	adds	r7, #32
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000228 	.word	0x20000228

080012cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	@ 0x38
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
 80012fa:	615a      	str	r2, [r3, #20]
 80012fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012fe:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <MX_TIM3_Init+0xe8>)
 8001300:	4a2d      	ldr	r2, [pc, #180]	@ (80013b8 <MX_TIM3_Init+0xec>)
 8001302:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001304:	4b2b      	ldr	r3, [pc, #172]	@ (80013b4 <MX_TIM3_Init+0xe8>)
 8001306:	22a9      	movs	r2, #169	@ 0xa9
 8001308:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130a:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <MX_TIM3_Init+0xe8>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8001310:	4b28      	ldr	r3, [pc, #160]	@ (80013b4 <MX_TIM3_Init+0xe8>)
 8001312:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001316:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001318:	4b26      	ldr	r3, [pc, #152]	@ (80013b4 <MX_TIM3_Init+0xe8>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131e:	4b25      	ldr	r3, [pc, #148]	@ (80013b4 <MX_TIM3_Init+0xe8>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001324:	4823      	ldr	r0, [pc, #140]	@ (80013b4 <MX_TIM3_Init+0xe8>)
 8001326:	f004 fc25 	bl	8005b74 <HAL_TIM_Base_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001330:	f000 fc72 	bl	8001c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001338:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800133a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133e:	4619      	mov	r1, r3
 8001340:	481c      	ldr	r0, [pc, #112]	@ (80013b4 <MX_TIM3_Init+0xe8>)
 8001342:	f005 fa63 	bl	800680c <HAL_TIM_ConfigClockSource>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800134c:	f000 fc64 	bl	8001c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001350:	4818      	ldr	r0, [pc, #96]	@ (80013b4 <MX_TIM3_Init+0xe8>)
 8001352:	f004 fd4f 	bl	8005df4 <HAL_TIM_PWM_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800135c:	f000 fc5c 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4811      	ldr	r0, [pc, #68]	@ (80013b4 <MX_TIM3_Init+0xe8>)
 8001370:	f006 f82a 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800137a:	f000 fc4d 	bl	8001c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137e:	2360      	movs	r3, #96	@ 0x60
 8001380:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	2200      	movs	r2, #0
 8001392:	4619      	mov	r1, r3
 8001394:	4807      	ldr	r0, [pc, #28]	@ (80013b4 <MX_TIM3_Init+0xe8>)
 8001396:	f005 f925 	bl	80065e4 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80013a0:	f000 fc3a 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013a4:	4803      	ldr	r0, [pc, #12]	@ (80013b4 <MX_TIM3_Init+0xe8>)
 80013a6:	f000 fdd3 	bl	8001f50 <HAL_TIM_MspPostInit>

}
 80013aa:	bf00      	nop
 80013ac:	3738      	adds	r7, #56	@ 0x38
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000274 	.word	0x20000274
 80013b8:	40000400 	.word	0x40000400

080013bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08e      	sub	sp, #56	@ 0x38
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013dc:	463b      	mov	r3, r7
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]
 80013ea:	615a      	str	r2, [r3, #20]
 80013ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013ee:	4b2d      	ldr	r3, [pc, #180]	@ (80014a4 <MX_TIM4_Init+0xe8>)
 80013f0:	4a2d      	ldr	r2, [pc, #180]	@ (80014a8 <MX_TIM4_Init+0xec>)
 80013f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 80013f4:	4b2b      	ldr	r3, [pc, #172]	@ (80014a4 <MX_TIM4_Init+0xe8>)
 80013f6:	22a9      	movs	r2, #169	@ 0xa9
 80013f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b2a      	ldr	r3, [pc, #168]	@ (80014a4 <MX_TIM4_Init+0xe8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 8001400:	4b28      	ldr	r3, [pc, #160]	@ (80014a4 <MX_TIM4_Init+0xe8>)
 8001402:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001406:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <MX_TIM4_Init+0xe8>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b25      	ldr	r3, [pc, #148]	@ (80014a4 <MX_TIM4_Init+0xe8>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001414:	4823      	ldr	r0, [pc, #140]	@ (80014a4 <MX_TIM4_Init+0xe8>)
 8001416:	f004 fbad 	bl	8005b74 <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001420:	f000 fbfa 	bl	8001c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800142a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800142e:	4619      	mov	r1, r3
 8001430:	481c      	ldr	r0, [pc, #112]	@ (80014a4 <MX_TIM4_Init+0xe8>)
 8001432:	f005 f9eb 	bl	800680c <HAL_TIM_ConfigClockSource>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800143c:	f000 fbec 	bl	8001c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001440:	4818      	ldr	r0, [pc, #96]	@ (80014a4 <MX_TIM4_Init+0xe8>)
 8001442:	f004 fcd7 	bl	8005df4 <HAL_TIM_PWM_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800144c:	f000 fbe4 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	4811      	ldr	r0, [pc, #68]	@ (80014a4 <MX_TIM4_Init+0xe8>)
 8001460:	f005 ffb2 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800146a:	f000 fbd5 	bl	8001c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146e:	2360      	movs	r3, #96	@ 0x60
 8001470:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147e:	463b      	mov	r3, r7
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4807      	ldr	r0, [pc, #28]	@ (80014a4 <MX_TIM4_Init+0xe8>)
 8001486:	f005 f8ad 	bl	80065e4 <HAL_TIM_PWM_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001490:	f000 fbc2 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001494:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <MX_TIM4_Init+0xe8>)
 8001496:	f000 fd5b 	bl	8001f50 <HAL_TIM_MspPostInit>

}
 800149a:	bf00      	nop
 800149c:	3738      	adds	r7, #56	@ 0x38
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200002c0 	.word	0x200002c0
 80014a8:	40000800 	.word	0x40000800

080014ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <MX_DMA_Init+0x50>)
 80014b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b6:	4a11      	ldr	r2, [pc, #68]	@ (80014fc <MX_DMA_Init+0x50>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <MX_DMA_Init+0x50>)
 80014c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ca:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <MX_DMA_Init+0x50>)
 80014cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ce:	4a0b      	ldr	r2, [pc, #44]	@ (80014fc <MX_DMA_Init+0x50>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MX_DMA_Init+0x50>)
 80014d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	200b      	movs	r0, #11
 80014e8:	f002 fea1 	bl	800422e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014ec:	200b      	movs	r0, #11
 80014ee:	f002 feb8 	bl	8004262 <HAL_NVIC_EnableIRQ>

}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	4b3a      	ldr	r3, [pc, #232]	@ (8001600 <MX_GPIO_Init+0x100>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	4a39      	ldr	r2, [pc, #228]	@ (8001600 <MX_GPIO_Init+0x100>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001522:	4b37      	ldr	r3, [pc, #220]	@ (8001600 <MX_GPIO_Init+0x100>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800152e:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <MX_GPIO_Init+0x100>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	4a33      	ldr	r2, [pc, #204]	@ (8001600 <MX_GPIO_Init+0x100>)
 8001534:	f043 0320 	orr.w	r3, r3, #32
 8001538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153a:	4b31      	ldr	r3, [pc, #196]	@ (8001600 <MX_GPIO_Init+0x100>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	f003 0320 	and.w	r3, r3, #32
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b2e      	ldr	r3, [pc, #184]	@ (8001600 <MX_GPIO_Init+0x100>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	4a2d      	ldr	r2, [pc, #180]	@ (8001600 <MX_GPIO_Init+0x100>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001552:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <MX_GPIO_Init+0x100>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <MX_GPIO_Init+0x100>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	4a27      	ldr	r2, [pc, #156]	@ (8001600 <MX_GPIO_Init+0x100>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156a:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <MX_GPIO_Init+0x100>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 800157c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001580:	f003 fa7e 	bl	8004a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2110      	movs	r1, #16
 8001588:	481e      	ldr	r0, [pc, #120]	@ (8001604 <MX_GPIO_Init+0x104>)
 800158a:	f003 fa79 	bl	8004a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800158e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001594:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4817      	ldr	r0, [pc, #92]	@ (8001604 <MX_GPIO_Init+0x104>)
 80015a6:	f003 f8e9 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_10;
 80015aa:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c6:	f003 f8d9 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015ca:	2310      	movs	r3, #16
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4808      	ldr	r0, [pc, #32]	@ (8001604 <MX_GPIO_Init+0x104>)
 80015e2:	f003 f8cb 	bl	800477c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2028      	movs	r0, #40	@ 0x28
 80015ec:	f002 fe1f 	bl	800422e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015f0:	2028      	movs	r0, #40	@ 0x28
 80015f2:	f002 fe36 	bl	8004262 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	@ 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	48000800 	.word	0x48000800

08001608 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001608:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4e      	ldr	r2, [pc, #312]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001616:	4293      	cmp	r3, r2
 8001618:	f040 8091 	bne.w	800173e <HAL_TIM_PeriodElapsedCallback+0x136>
	{
		if(Mode == 0){
 800161c:	4b4d      	ldr	r3, [pc, #308]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d122      	bne.n	800166a <HAL_TIM_PeriodElapsedCallback+0x62>
			angular_position = (ADC_RawRead[0] * 359) / 4095;
 8001624:	4b4c      	ldr	r3, [pc, #304]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	f240 1367 	movw	r3, #359	@ 0x167
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	4a4a      	ldr	r2, [pc, #296]	@ (800175c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001634:	fb82 1203 	smull	r1, r2, r2, r3
 8001638:	441a      	add	r2, r3
 800163a:	12d2      	asrs	r2, r2, #11
 800163c:	17db      	asrs	r3, r3, #31
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	b29a      	uxth	r2, r3
 8001642:	4b47      	ldr	r3, [pc, #284]	@ (8001760 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001644:	801a      	strh	r2, [r3, #0]
			set_point = (ADC_RawRead[1] * 359) / 4095;
 8001646:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001648:	885b      	ldrh	r3, [r3, #2]
 800164a:	461a      	mov	r2, r3
 800164c:	f240 1367 	movw	r3, #359	@ 0x167
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	4a41      	ldr	r2, [pc, #260]	@ (800175c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001656:	fb82 1203 	smull	r1, r2, r2, r3
 800165a:	441a      	add	r2, r3
 800165c:	12d2      	asrs	r2, r2, #11
 800165e:	17db      	asrs	r3, r3, #31
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b3f      	ldr	r3, [pc, #252]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001666:	801a      	strh	r2, [r3, #0]
 8001668:	e026      	b.n	80016b8 <HAL_TIM_PeriodElapsedCallback+0xb0>
		}
		else if(Mode == 1){
 800166a:	4b3a      	ldr	r3, [pc, #232]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d122      	bne.n	80016b8 <HAL_TIM_PeriodElapsedCallback+0xb0>
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim1);
 8001672:	4b3d      	ldr	r3, [pc, #244]	@ (8001768 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	4a3c      	ldr	r2, [pc, #240]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800167a:	6013      	str	r3, [r2, #0]
			angular_position = (QEIReadRaw*360)/3072;
 800167c:	4b3b      	ldr	r3, [pc, #236]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001684:	fb02 f303 	mul.w	r3, r2, r3
 8001688:	4a39      	ldr	r2, [pc, #228]	@ (8001770 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	0adb      	lsrs	r3, r3, #11
 8001690:	b29a      	uxth	r2, r3
 8001692:	4b33      	ldr	r3, [pc, #204]	@ (8001760 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001694:	801a      	strh	r2, [r3, #0]
			set_point = (ADC_RawRead[1] * 359) / 4095;
 8001696:	4b30      	ldr	r3, [pc, #192]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001698:	885b      	ldrh	r3, [r3, #2]
 800169a:	461a      	mov	r2, r3
 800169c:	f240 1367 	movw	r3, #359	@ 0x167
 80016a0:	fb02 f303 	mul.w	r3, r2, r3
 80016a4:	4a2d      	ldr	r2, [pc, #180]	@ (800175c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80016a6:	fb82 1203 	smull	r1, r2, r2, r3
 80016aa:	441a      	add	r2, r3
 80016ac:	12d2      	asrs	r2, r2, #11
 80016ae:	17db      	asrs	r3, r3, #31
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80016b6:	801a      	strh	r2, [r3, #0]
		}
		else if(Mode == 2){


		}
		clockwise = fmod(fabs(set_point - angular_position), 360);
 80016b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b28      	ldr	r3, [pc, #160]	@ (8001760 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe fef9 	bl	80004bc <__aeabi_i2d>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4690      	mov	r8, r2
 80016d0:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80016d4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8001748 <HAL_TIM_PeriodElapsedCallback+0x140>
 80016d8:	ec49 8b10 	vmov	d0, r8, r9
 80016dc:	f006 fe26 	bl	800832c <fmod>
 80016e0:	eeb0 7a40 	vmov.f32	s14, s0
 80016e4:	eef0 7a60 	vmov.f32	s15, s1
 80016e8:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80016ea:	ed83 7b00 	vstr	d7, [r3]
		counterclockwise = fmod(360 - fabs(set_point - angular_position), 360);
 80016ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fede 	bl	80004bc <__aeabi_i2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4614      	mov	r4, r2
 8001706:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800170a:	4622      	mov	r2, r4
 800170c:	462b      	mov	r3, r5
 800170e:	f04f 0000 	mov.w	r0, #0
 8001712:	4919      	ldr	r1, [pc, #100]	@ (8001778 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001714:	f7fe fd84 	bl	8000220 <__aeabi_dsub>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	ec43 2b17 	vmov	d7, r2, r3
 8001720:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 8001748 <HAL_TIM_PeriodElapsedCallback+0x140>
 8001724:	eeb0 0a47 	vmov.f32	s0, s14
 8001728:	eef0 0a67 	vmov.f32	s1, s15
 800172c:	f006 fdfe 	bl	800832c <fmod>
 8001730:	eeb0 7a40 	vmov.f32	s14, s0
 8001734:	eef0 7a60 	vmov.f32	s15, s1
 8001738:	4b10      	ldr	r3, [pc, #64]	@ (800177c <HAL_TIM_PeriodElapsedCallback+0x174>)
 800173a:	ed83 7b00 	vstr	d7, [r3]
	}
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001748:	00000000 	.word	0x00000000
 800174c:	40768000 	.word	0x40768000
 8001750:	20000228 	.word	0x20000228
 8001754:	2000030c 	.word	0x2000030c
 8001758:	2000033c 	.word	0x2000033c
 800175c:	80080081 	.word	0x80080081
 8001760:	20000338 	.word	0x20000338
 8001764:	2000033a 	.word	0x2000033a
 8001768:	200001dc 	.word	0x200001dc
 800176c:	20000388 	.word	0x20000388
 8001770:	aaaaaaab 	.word	0xaaaaaaab
 8001774:	20000328 	.word	0x20000328
 8001778:	40768000 	.word	0x40768000
 800177c:	20000330 	.word	0x20000330

08001780 <Part_I_PID_ADC>:

void Part_I_PID_ADC(){
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	2120      	movs	r1, #32
 800178a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800178e:	f003 f977 	bl	8004a80 <HAL_GPIO_WritePin>
	static uint32_t timestamp = 0;
	if(timestamp < HAL_GetTick())
 8001792:	f000 fd2f 	bl	80021f4 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	4b73      	ldr	r3, [pc, #460]	@ (8001968 <Part_I_PID_ADC+0x1e8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	f240 80d9 	bls.w	8001954 <Part_I_PID_ADC+0x1d4>
	{
		timestamp = HAL_GetTick() + 10;
 80017a2:	f000 fd27 	bl	80021f4 <HAL_GetTick>
 80017a6:	4603      	mov	r3, r0
 80017a8:	330a      	adds	r3, #10
 80017aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001968 <Part_I_PID_ADC+0x1e8>)
 80017ac:	6013      	str	r3, [r2, #0]

		err = set_point - angular_position;
 80017ae:	4b6f      	ldr	r3, [pc, #444]	@ (800196c <Part_I_PID_ADC+0x1ec>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b6e      	ldr	r3, [pc, #440]	@ (8001970 <Part_I_PID_ADC+0x1f0>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001974 <Part_I_PID_ADC+0x1f4>)
 80017bc:	6013      	str	r3, [r2, #0]
		Vfeedback = arm_pid_f32(&PID, err);
 80017be:	4b6d      	ldr	r3, [pc, #436]	@ (8001974 <Part_I_PID_ADC+0x1f4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001978 <Part_I_PID_ADC+0x1f8>)
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	edc7 7a01 	vstr	s15, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	ed93 7a00 	vldr	s14, [r3]
 80017d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017dc:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	edd3 6a01 	vldr	s13, [r3, #4]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80017ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80017f0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001804:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800180e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001812:	edc7 7a00 	vstr	s15, [r7]

    /* Update state */
    S->state[1] = S->state[0];
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	4a53      	ldr	r2, [pc, #332]	@ (800197c <Part_I_PID_ADC+0x1fc>)
 800182e:	6013      	str	r3, [r2, #0]
		absVfb = fabs(Vfeedback) *2.5;
 8001830:	4b52      	ldr	r3, [pc, #328]	@ (800197c <Part_I_PID_ADC+0x1fc>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	eef0 7ae7 	vabs.f32	s15, s15
 800183a:	ee17 0a90 	vmov	r0, s15
 800183e:	f7fe fe4f 	bl	80004e0 <__aeabi_f2d>
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b4e      	ldr	r3, [pc, #312]	@ (8001980 <Part_I_PID_ADC+0x200>)
 8001848:	f7fe fea2 	bl	8000590 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	494c      	ldr	r1, [pc, #304]	@ (8001984 <Part_I_PID_ADC+0x204>)
 8001852:	e9c1 2300 	strd	r2, r3, [r1]
		vfbtopwm = (absVfb * 5000)/12;
 8001856:	4b4b      	ldr	r3, [pc, #300]	@ (8001984 <Part_I_PID_ADC+0x204>)
 8001858:	e9d3 0100 	ldrd	r0, r1, [r3]
 800185c:	a340      	add	r3, pc, #256	@ (adr r3, 8001960 <Part_I_PID_ADC+0x1e0>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fe95 	bl	8000590 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	4b45      	ldr	r3, [pc, #276]	@ (8001988 <Part_I_PID_ADC+0x208>)
 8001874:	f7fe ffb6 	bl	80007e4 <__aeabi_ddiv>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff f936 	bl	8000af0 <__aeabi_d2iz>
 8001884:	4603      	mov	r3, r0
 8001886:	4a41      	ldr	r2, [pc, #260]	@ (800198c <Part_I_PID_ADC+0x20c>)
 8001888:	6013      	str	r3, [r2, #0]
		if(vfbtopwm < 1500 && vfbtopwm > 25) usepwm = 1500;
 800188a:	4b40      	ldr	r3, [pc, #256]	@ (800198c <Part_I_PID_ADC+0x20c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001892:	4293      	cmp	r3, r2
 8001894:	dc08      	bgt.n	80018a8 <Part_I_PID_ADC+0x128>
 8001896:	4b3d      	ldr	r3, [pc, #244]	@ (800198c <Part_I_PID_ADC+0x20c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b19      	cmp	r3, #25
 800189c:	dd04      	ble.n	80018a8 <Part_I_PID_ADC+0x128>
 800189e:	4b3c      	ldr	r3, [pc, #240]	@ (8001990 <Part_I_PID_ADC+0x210>)
 80018a0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e003      	b.n	80018b0 <Part_I_PID_ADC+0x130>
		else usepwm = vfbtopwm;
 80018a8:	4b38      	ldr	r3, [pc, #224]	@ (800198c <Part_I_PID_ADC+0x20c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a38      	ldr	r2, [pc, #224]	@ (8001990 <Part_I_PID_ADC+0x210>)
 80018ae:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, usepwm);
 80018b0:	4b37      	ldr	r3, [pc, #220]	@ (8001990 <Part_I_PID_ADC+0x210>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b37      	ldr	r3, [pc, #220]	@ (8001994 <Part_I_PID_ADC+0x214>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	635a      	str	r2, [r3, #52]	@ 0x34
		if(fabs(err) < 7) usepwm = 0;
 80018ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001974 <Part_I_PID_ADC+0x1f4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fdfc 	bl	80004bc <__aeabi_i2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4614      	mov	r4, r2
 80018ca:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4b31      	ldr	r3, [pc, #196]	@ (8001998 <Part_I_PID_ADC+0x218>)
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7ff f8cc 	bl	8000a74 <__aeabi_dcmplt>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <Part_I_PID_ADC+0x168>
 80018e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <Part_I_PID_ADC+0x210>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]

		int errr = set_point - angular_position;
 80018e8:	4b20      	ldr	r3, [pc, #128]	@ (800196c <Part_I_PID_ADC+0x1ec>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <Part_I_PID_ADC+0x1f0>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	60fb      	str	r3, [r7, #12]
		if(errr > 180) errr -= 360;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2bb4      	cmp	r3, #180	@ 0xb4
 80018fa:	dd04      	ble.n	8001906 <Part_I_PID_ADC+0x186>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	e007      	b.n	8001916 <Part_I_PID_ADC+0x196>
		else if(errr < -180) errr += 360;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f113 0fb4 	cmn.w	r3, #180	@ 0xb4
 800190c:	da03      	bge.n	8001916 <Part_I_PID_ADC+0x196>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001914:	60fb      	str	r3, [r7, #12]
//		}
//		else if(set_point - angular_position < 0 ){ //CCW
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
//		}
		if(errr > 0){
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	dd0c      	ble.n	8001936 <Part_I_PID_ADC+0x1b6>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001922:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001926:	f003 f8ab 	bl	8004a80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2110      	movs	r1, #16
 800192e:	481b      	ldr	r0, [pc, #108]	@ (800199c <Part_I_PID_ADC+0x21c>)
 8001930:	f003 f8a6 	bl	8004a80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
		}

	}

}
 8001934:	e00e      	b.n	8001954 <Part_I_PID_ADC+0x1d4>
		else if(errr < 0){
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	da0b      	bge.n	8001954 <Part_I_PID_ADC+0x1d4>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001946:	f003 f89b 	bl	8004a80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 800194a:	2201      	movs	r2, #1
 800194c:	2110      	movs	r1, #16
 800194e:	4813      	ldr	r0, [pc, #76]	@ (800199c <Part_I_PID_ADC+0x21c>)
 8001950:	f003 f896 	bl	8004a80 <HAL_GPIO_WritePin>
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bdb0      	pop	{r4, r5, r7, pc}
 800195c:	f3af 8000 	nop.w
 8001960:	00000000 	.word	0x00000000
 8001964:	40b38800 	.word	0x40b38800
 8001968:	2000038c 	.word	0x2000038c
 800196c:	2000033a 	.word	0x2000033a
 8001970:	20000338 	.word	0x20000338
 8001974:	20000324 	.word	0x20000324
 8001978:	20000340 	.word	0x20000340
 800197c:	20000314 	.word	0x20000314
 8001980:	40040000 	.word	0x40040000
 8001984:	20000318 	.word	0x20000318
 8001988:	40280000 	.word	0x40280000
 800198c:	20000310 	.word	0x20000310
 8001990:	20000320 	.word	0x20000320
 8001994:	20000274 	.word	0x20000274
 8001998:	401c0000 	.word	0x401c0000
 800199c:	48000800 	.word	0x48000800

080019a0 <Part_II_QEI>:

void Part_II_QEI(){
 80019a0:	b5b0      	push	{r4, r5, r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2120      	movs	r1, #32
 80019aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ae:	f003 f867 	bl	8004a80 <HAL_GPIO_WritePin>
	static uint32_t timestamp = 0;
	if(timestamp < HAL_GetTick())
 80019b2:	f000 fc1f 	bl	80021f4 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001b68 <Part_II_QEI+0x1c8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f240 80cb 	bls.w	8001b58 <Part_II_QEI+0x1b8>
	{
		timestamp = HAL_GetTick() + 10;
 80019c2:	f000 fc17 	bl	80021f4 <HAL_GetTick>
 80019c6:	4603      	mov	r3, r0
 80019c8:	330a      	adds	r3, #10
 80019ca:	4a67      	ldr	r2, [pc, #412]	@ (8001b68 <Part_II_QEI+0x1c8>)
 80019cc:	6013      	str	r3, [r2, #0]

		err = set_point - angular_position;
 80019ce:	4b67      	ldr	r3, [pc, #412]	@ (8001b6c <Part_II_QEI+0x1cc>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b66      	ldr	r3, [pc, #408]	@ (8001b70 <Part_II_QEI+0x1d0>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	4a66      	ldr	r2, [pc, #408]	@ (8001b74 <Part_II_QEI+0x1d4>)
 80019dc:	6013      	str	r3, [r2, #0]
		Vfeedback = arm_pid_f32(&PID2, err);
 80019de:	4b65      	ldr	r3, [pc, #404]	@ (8001b74 <Part_II_QEI+0x1d4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ea:	4b63      	ldr	r3, [pc, #396]	@ (8001b78 <Part_II_QEI+0x1d8>)
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	edc7 7a01 	vstr	s15, [r7, #4]
    out = (S->A0 * in) +
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	ed93 7a00 	vldr	s14, [r3]
 80019f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80019fc:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001a10:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a32:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	615a      	str	r2, [r3, #20]
    return (out);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	4a4b      	ldr	r2, [pc, #300]	@ (8001b7c <Part_II_QEI+0x1dc>)
 8001a4e:	6013      	str	r3, [r2, #0]

		absVfb = fabs(Vfeedback) * 2.5;
 8001a50:	4b4a      	ldr	r3, [pc, #296]	@ (8001b7c <Part_II_QEI+0x1dc>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	eef0 7ae7 	vabs.f32	s15, s15
 8001a5a:	ee17 0a90 	vmov	r0, s15
 8001a5e:	f7fe fd3f 	bl	80004e0 <__aeabi_f2d>
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	4b46      	ldr	r3, [pc, #280]	@ (8001b80 <Part_II_QEI+0x1e0>)
 8001a68:	f7fe fd92 	bl	8000590 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4944      	ldr	r1, [pc, #272]	@ (8001b84 <Part_II_QEI+0x1e4>)
 8001a72:	e9c1 2300 	strd	r2, r3, [r1]
		vfbtopwm = (absVfb * 5000) / 5.00;
 8001a76:	4b43      	ldr	r3, [pc, #268]	@ (8001b84 <Part_II_QEI+0x1e4>)
 8001a78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a7c:	a338      	add	r3, pc, #224	@ (adr r3, 8001b60 <Part_II_QEI+0x1c0>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe fd85 	bl	8000590 <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	4b3d      	ldr	r3, [pc, #244]	@ (8001b88 <Part_II_QEI+0x1e8>)
 8001a94:	f7fe fea6 	bl	80007e4 <__aeabi_ddiv>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7ff f826 	bl	8000af0 <__aeabi_d2iz>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4a39      	ldr	r2, [pc, #228]	@ (8001b8c <Part_II_QEI+0x1ec>)
 8001aa8:	6013      	str	r3, [r2, #0]


		if(vfbtopwm > 5000) usepwm = 5000;
 8001aaa:	4b38      	ldr	r3, [pc, #224]	@ (8001b8c <Part_II_QEI+0x1ec>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	dd04      	ble.n	8001ac0 <Part_II_QEI+0x120>
 8001ab6:	4b36      	ldr	r3, [pc, #216]	@ (8001b90 <Part_II_QEI+0x1f0>)
 8001ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e01b      	b.n	8001af8 <Part_II_QEI+0x158>
		else if (fabs(err) < 1) usepwm = 0;
 8001ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b74 <Part_II_QEI+0x1d4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fcf9 	bl	80004bc <__aeabi_i2d>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4614      	mov	r4, r2
 8001ad0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b94 <Part_II_QEI+0x1f4>)
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe ffc9 	bl	8000a74 <__aeabi_dcmplt>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <Part_II_QEI+0x150>
 8001ae8:	4b29      	ldr	r3, [pc, #164]	@ (8001b90 <Part_II_QEI+0x1f0>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e003      	b.n	8001af8 <Part_II_QEI+0x158>
		else usepwm = vfbtopwm;
 8001af0:	4b26      	ldr	r3, [pc, #152]	@ (8001b8c <Part_II_QEI+0x1ec>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a26      	ldr	r2, [pc, #152]	@ (8001b90 <Part_II_QEI+0x1f0>)
 8001af6:	6013      	str	r3, [r2, #0]
//		if(fabs(err) < 7) usepwm = 0;

		int errr = set_point - angular_position;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <Part_II_QEI+0x1cc>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <Part_II_QEI+0x1d0>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	60fb      	str	r3, [r7, #12]
		if(errr > 180) errr -= 360;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2bb4      	cmp	r3, #180	@ 0xb4
 8001b0a:	dd04      	ble.n	8001b16 <Part_II_QEI+0x176>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	e007      	b.n	8001b26 <Part_II_QEI+0x186>
		else if(errr < -180) errr += 360;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f113 0fb4 	cmn.w	r3, #180	@ 0xb4
 8001b1c:	da03      	bge.n	8001b26 <Part_II_QEI+0x186>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001b24:	60fb      	str	r3, [r7, #12]
//		}
//		else if(set_point - angular_position < 0 ){ //CCW
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
//			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, usepwm);
//		}
		if(errr > 0){
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	dd09      	ble.n	8001b40 <Part_II_QEI+0x1a0>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, usepwm);
 8001b2c:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <Part_II_QEI+0x1f0>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <Part_II_QEI+0x1f8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001b36:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <Part_II_QEI+0x1fc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, usepwm);
		}

	}

}
 8001b3e:	e00b      	b.n	8001b58 <Part_II_QEI+0x1b8>
		else if(errr < 0){
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	da08      	bge.n	8001b58 <Part_II_QEI+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001b46:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <Part_II_QEI+0x1f8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, usepwm);
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <Part_II_QEI+0x1f0>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <Part_II_QEI+0x1fc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b60:	00000000 	.word	0x00000000
 8001b64:	40b38800 	.word	0x40b38800
 8001b68:	20000390 	.word	0x20000390
 8001b6c:	2000033a 	.word	0x2000033a
 8001b70:	20000338 	.word	0x20000338
 8001b74:	20000324 	.word	0x20000324
 8001b78:	20000364 	.word	0x20000364
 8001b7c:	20000314 	.word	0x20000314
 8001b80:	40040000 	.word	0x40040000
 8001b84:	20000318 	.word	0x20000318
 8001b88:	40140000 	.word	0x40140000
 8001b8c:	20000310 	.word	0x20000310
 8001b90:	20000320 	.word	0x20000320
 8001b94:	3ff00000 	.word	0x3ff00000
 8001b98:	20000274 	.word	0x20000274
 8001b9c:	200002c0 	.word	0x200002c0

08001ba0 <Part_III_UART>:

void Part_III_UART(){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	if(timestamp < HAL_GetTick()){
 8001ba4:	f000 fb26 	bl	80021f4 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <Part_III_UART+0x30>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d90b      	bls.n	8001bca <Part_III_UART+0x2a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb8:	f002 ff7a 	bl	8004ab0 <HAL_GPIO_TogglePin>
		timestamp = HAL_GetTick() + 500;
 8001bbc:	f000 fb1a 	bl	80021f4 <HAL_GetTick>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001bc6:	4a02      	ldr	r2, [pc, #8]	@ (8001bd0 <Part_III_UART+0x30>)
 8001bc8:	6013      	str	r3, [r2, #0]
	}
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000394 	.word	0x20000394

08001bd4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001be4:	d10d      	bne.n	8001c02 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		Mode = (Mode + 1) % 3;
 8001be6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	1c59      	adds	r1, r3, #1
 8001bec:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <HAL_GPIO_EXTI_Callback+0x40>)
 8001bee:	fb83 3201 	smull	r3, r2, r3, r1
 8001bf2:	17cb      	asrs	r3, r1, #31
 8001bf4:	1ad2      	subs	r2, r2, r3
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	1aca      	subs	r2, r1, r3
 8001bfe:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001c00:	601a      	str	r2, [r3, #0]
	}
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	2000030c 	.word	0x2000030c
 8001c14:	55555556 	.word	0x55555556

08001c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c1c:	b672      	cpsid	i
}
 8001c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <Error_Handler+0x8>

08001c24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <HAL_MspInit+0x44>)
 8001c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c68 <HAL_MspInit+0x44>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c36:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <HAL_MspInit+0x44>)
 8001c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <HAL_MspInit+0x44>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c46:	4a08      	ldr	r2, [pc, #32]	@ (8001c68 <HAL_MspInit+0x44>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_MspInit+0x44>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c5a:	f002 ffff 	bl	8004c5c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b09e      	sub	sp, #120	@ 0x78
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	2254      	movs	r2, #84	@ 0x54
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f006 fb1b 	bl	80082c8 <memset>
  if(hadc->Instance==ADC1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c9a:	d167      	bne.n	8001d6c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ca0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001ca2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ca6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 fd13 	bl	80056d8 <HAL_RCCEx_PeriphCLKConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001cb8:	f7ff ffae 	bl	8001c18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d74 <HAL_ADC_MspInit+0x108>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8001d74 <HAL_ADC_MspInit+0x108>)
 8001cc2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d74 <HAL_ADC_MspInit+0x108>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	4b27      	ldr	r3, [pc, #156]	@ (8001d74 <HAL_ADC_MspInit+0x108>)
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd8:	4a26      	ldr	r2, [pc, #152]	@ (8001d74 <HAL_ADC_MspInit+0x108>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce0:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <HAL_ADC_MspInit+0x108>)
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cec:	2303      	movs	r3, #3
 8001cee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d02:	f002 fd3b 	bl	800477c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d06:	4b1c      	ldr	r3, [pc, #112]	@ (8001d78 <HAL_ADC_MspInit+0x10c>)
 8001d08:	4a1c      	ldr	r2, [pc, #112]	@ (8001d7c <HAL_ADC_MspInit+0x110>)
 8001d0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <HAL_ADC_MspInit+0x10c>)
 8001d0e:	2205      	movs	r2, #5
 8001d10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d12:	4b19      	ldr	r3, [pc, #100]	@ (8001d78 <HAL_ADC_MspInit+0x10c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d18:	4b17      	ldr	r3, [pc, #92]	@ (8001d78 <HAL_ADC_MspInit+0x10c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d1e:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <HAL_ADC_MspInit+0x10c>)
 8001d20:	2280      	movs	r2, #128	@ 0x80
 8001d22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <HAL_ADC_MspInit+0x10c>)
 8001d26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d2a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d2c:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <HAL_ADC_MspInit+0x10c>)
 8001d2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d32:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d34:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_ADC_MspInit+0x10c>)
 8001d36:	2220      	movs	r2, #32
 8001d38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <HAL_ADC_MspInit+0x10c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d40:	480d      	ldr	r0, [pc, #52]	@ (8001d78 <HAL_ADC_MspInit+0x10c>)
 8001d42:	f002 faa9 	bl	8004298 <HAL_DMA_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001d4c:	f7ff ff64 	bl	8001c18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a09      	ldr	r2, [pc, #36]	@ (8001d78 <HAL_ADC_MspInit+0x10c>)
 8001d54:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d56:	4a08      	ldr	r2, [pc, #32]	@ (8001d78 <HAL_ADC_MspInit+0x10c>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2012      	movs	r0, #18
 8001d62:	f002 fa64 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d66:	2012      	movs	r0, #18
 8001d68:	f002 fa7b 	bl	8004262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d6c:	bf00      	nop
 8001d6e:	3778      	adds	r7, #120	@ 0x78
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	200000e8 	.word	0x200000e8
 8001d7c:	40020008 	.word	0x40020008

08001d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b09e      	sub	sp, #120	@ 0x78
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d98:	f107 0310 	add.w	r3, r7, #16
 8001d9c:	2254      	movs	r2, #84	@ 0x54
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f006 fa91 	bl	80082c8 <memset>
  if(huart->Instance==LPUART1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a1f      	ldr	r2, [pc, #124]	@ (8001e28 <HAL_UART_MspInit+0xa8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d136      	bne.n	8001e1e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001db0:	2320      	movs	r3, #32
 8001db2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 fc8b 	bl	80056d8 <HAL_RCCEx_PeriphCLKConfig>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dc8:	f7ff ff26 	bl	8001c18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001dcc:	4b17      	ldr	r3, [pc, #92]	@ (8001e2c <HAL_UART_MspInit+0xac>)
 8001dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd0:	4a16      	ldr	r2, [pc, #88]	@ (8001e2c <HAL_UART_MspInit+0xac>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001dd8:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <HAL_UART_MspInit+0xac>)
 8001dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de4:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <HAL_UART_MspInit+0xac>)
 8001de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de8:	4a10      	ldr	r2, [pc, #64]	@ (8001e2c <HAL_UART_MspInit+0xac>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <HAL_UART_MspInit+0xac>)
 8001df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001dfc:	230c      	movs	r3, #12
 8001dfe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001e0c:	230c      	movs	r3, #12
 8001e0e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e14:	4619      	mov	r1, r3
 8001e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e1a:	f002 fcaf 	bl	800477c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001e1e:	bf00      	nop
 8001e20:	3778      	adds	r7, #120	@ 0x78
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40008000 	.word	0x40008000
 8001e2c:	40021000 	.word	0x40021000

08001e30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	@ 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a17      	ldr	r2, [pc, #92]	@ (8001eac <HAL_TIM_Encoder_MspInit+0x7c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d127      	bne.n	8001ea2 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e52:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e56:	4a16      	ldr	r2, [pc, #88]	@ (8001eb0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e5e:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6a:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6e:	4a10      	ldr	r2, [pc, #64]	@ (8001eb0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e76:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e82:	2303      	movs	r3, #3
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e92:	2302      	movs	r3, #2
 8001e94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001e9e:	f002 fc6d 	bl	800477c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3728      	adds	r7, #40	@ 0x28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40012c00 	.word	0x40012c00
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	48000800 	.word	0x48000800

08001eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec8:	d114      	bne.n	8001ef4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eca:	4b1e      	ldr	r3, [pc, #120]	@ (8001f44 <HAL_TIM_Base_MspInit+0x8c>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	4a1d      	ldr	r2, [pc, #116]	@ (8001f44 <HAL_TIM_Base_MspInit+0x8c>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <HAL_TIM_Base_MspInit+0x8c>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	201c      	movs	r0, #28
 8001ee8:	f002 f9a1 	bl	800422e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001eec:	201c      	movs	r0, #28
 8001eee:	f002 f9b8 	bl	8004262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ef2:	e022      	b.n	8001f3a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a13      	ldr	r2, [pc, #76]	@ (8001f48 <HAL_TIM_Base_MspInit+0x90>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d10c      	bne.n	8001f18 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001efe:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <HAL_TIM_Base_MspInit+0x8c>)
 8001f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f02:	4a10      	ldr	r2, [pc, #64]	@ (8001f44 <HAL_TIM_Base_MspInit+0x8c>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <HAL_TIM_Base_MspInit+0x8c>)
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]
}
 8001f16:	e010      	b.n	8001f3a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f4c <HAL_TIM_Base_MspInit+0x94>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10b      	bne.n	8001f3a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f22:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <HAL_TIM_Base_MspInit+0x8c>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f26:	4a07      	ldr	r2, [pc, #28]	@ (8001f44 <HAL_TIM_Base_MspInit+0x8c>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f2e:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <HAL_TIM_Base_MspInit+0x8c>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
}
 8001f3a:	bf00      	nop
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40000400 	.word	0x40000400
 8001f4c:	40000800 	.word	0x40000800

08001f50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	@ 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a23      	ldr	r2, [pc, #140]	@ (8001ffc <HAL_TIM_MspPostInit+0xac>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d11d      	bne.n	8001fae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	4b23      	ldr	r3, [pc, #140]	@ (8002000 <HAL_TIM_MspPostInit+0xb0>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f76:	4a22      	ldr	r2, [pc, #136]	@ (8002000 <HAL_TIM_MspPostInit+0xb0>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f7e:	4b20      	ldr	r3, [pc, #128]	@ (8002000 <HAL_TIM_MspPostInit+0xb0>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f8a:	2340      	movs	r3, #64	@ 0x40
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fa8:	f002 fbe8 	bl	800477c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001fac:	e022      	b.n	8001ff4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM4)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a14      	ldr	r2, [pc, #80]	@ (8002004 <HAL_TIM_MspPostInit+0xb4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d11d      	bne.n	8001ff4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <HAL_TIM_MspPostInit+0xb0>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbc:	4a10      	ldr	r2, [pc, #64]	@ (8002000 <HAL_TIM_MspPostInit+0xb0>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <HAL_TIM_MspPostInit+0xb0>)
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001fd0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001fe2:	230a      	movs	r3, #10
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4619      	mov	r1, r3
 8001fec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ff0:	f002 fbc4 	bl	800477c <HAL_GPIO_Init>
}
 8001ff4:	bf00      	nop
 8001ff6:	3728      	adds	r7, #40	@ 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40021000 	.word	0x40021000
 8002004:	40000800 	.word	0x40000800

08002008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <NMI_Handler+0x4>

08002010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <HardFault_Handler+0x4>

08002018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <MemManage_Handler+0x4>

08002020 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <BusFault_Handler+0x4>

08002028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <UsageFault_Handler+0x4>

08002030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205e:	f000 f8b7 	bl	80021d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800206c:	4802      	ldr	r0, [pc, #8]	@ (8002078 <DMA1_Channel1_IRQHandler+0x10>)
 800206e:	f002 fa36 	bl	80044de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200000e8 	.word	0x200000e8

0800207c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002080:	4802      	ldr	r0, [pc, #8]	@ (800208c <ADC1_2_IRQHandler+0x10>)
 8002082:	f000 fdb9 	bl	8002bf8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000007c 	.word	0x2000007c

08002090 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002094:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <TIM2_IRQHandler+0x10>)
 8002096:	f004 f955 	bl	8006344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000228 	.word	0x20000228

080020a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020ac:	f002 fd1a 	bl	8004ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <SystemInit+0x20>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020be:	4a05      	ldr	r2, [pc, #20]	@ (80020d4 <SystemInit+0x20>)
 80020c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020d8:	480d      	ldr	r0, [pc, #52]	@ (8002110 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020dc:	f7ff ffea 	bl	80020b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e0:	480c      	ldr	r0, [pc, #48]	@ (8002114 <LoopForever+0x6>)
  ldr r1, =_edata
 80020e2:	490d      	ldr	r1, [pc, #52]	@ (8002118 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020e4:	4a0d      	ldr	r2, [pc, #52]	@ (800211c <LoopForever+0xe>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020e8:	e002      	b.n	80020f0 <LoopCopyDataInit>

080020ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ee:	3304      	adds	r3, #4

080020f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f4:	d3f9      	bcc.n	80020ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002120 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002124 <LoopForever+0x16>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020fc:	e001      	b.n	8002102 <LoopFillZerobss>

080020fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002100:	3204      	adds	r2, #4

08002102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002104:	d3fb      	bcc.n	80020fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002106:	f006 f8ed 	bl	80082e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800210a:	f7fe fe91 	bl	8000e30 <main>

0800210e <LoopForever>:

LoopForever:
    b LoopForever
 800210e:	e7fe      	b.n	800210e <LoopForever>
  ldr   r0, =_estack
 8002110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002118:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800211c:	08008618 	.word	0x08008618
  ldr r2, =_sbss
 8002120:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002124:	200004d4 	.word	0x200004d4

08002128 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <ADC3_IRQHandler>

0800212a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002134:	2003      	movs	r0, #3
 8002136:	f002 f86f 	bl	8004218 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800213a:	2000      	movs	r0, #0
 800213c:	f000 f80e 	bl	800215c <HAL_InitTick>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	71fb      	strb	r3, [r7, #7]
 800214a:	e001      	b.n	8002150 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800214c:	f7ff fd6a 	bl	8001c24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002150:	79fb      	ldrb	r3, [r7, #7]

}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002168:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <HAL_InitTick+0x68>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d022      	beq.n	80021b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002170:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <HAL_InitTick+0x6c>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <HAL_InitTick+0x68>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800217c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	4618      	mov	r0, r3
 8002186:	f002 f87a 	bl	800427e <HAL_SYSTICK_Config>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10f      	bne.n	80021b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b0f      	cmp	r3, #15
 8002194:	d809      	bhi.n	80021aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002196:	2200      	movs	r2, #0
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	f04f 30ff 	mov.w	r0, #4294967295
 800219e:	f002 f846 	bl	800422e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021a2:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <HAL_InitTick+0x70>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e007      	b.n	80021ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
 80021ae:	e004      	b.n	80021ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	e001      	b.n	80021ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000008 	.word	0x20000008
 80021c8:	20000000 	.word	0x20000000
 80021cc:	20000004 	.word	0x20000004

080021d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d4:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <HAL_IncTick+0x1c>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <HAL_IncTick+0x20>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4413      	add	r3, r2
 80021de:	4a03      	ldr	r2, [pc, #12]	@ (80021ec <HAL_IncTick+0x1c>)
 80021e0:	6013      	str	r3, [r2, #0]
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	20000398 	.word	0x20000398
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return uwTick;
 80021f8:	4b03      	ldr	r3, [pc, #12]	@ (8002208 <HAL_GetTick+0x14>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000398 	.word	0x20000398

0800220c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	609a      	str	r2, [r3, #8]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3360      	adds	r3, #96	@ 0x60
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <LL_ADC_SetOffset+0x44>)
 8002296:	4013      	ands	r3, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022ac:	bf00      	nop
 80022ae:	371c      	adds	r7, #28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	03fff000 	.word	0x03fff000

080022bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3360      	adds	r3, #96	@ 0x60
 80022ca:	461a      	mov	r2, r3
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3360      	adds	r3, #96	@ 0x60
 80022f8:	461a      	mov	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	431a      	orrs	r2, r3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002312:	bf00      	nop
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800231e:	b480      	push	{r7}
 8002320:	b087      	sub	sp, #28
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3360      	adds	r3, #96	@ 0x60
 800232e:	461a      	mov	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	431a      	orrs	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002348:	bf00      	nop
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	3360      	adds	r3, #96	@ 0x60
 8002364:	461a      	mov	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	431a      	orrs	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800237e:	bf00      	nop
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	615a      	str	r2, [r3, #20]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b087      	sub	sp, #28
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	3330      	adds	r3, #48	@ 0x30
 80023e6:	461a      	mov	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	4413      	add	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	211f      	movs	r1, #31
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	401a      	ands	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	0e9b      	lsrs	r3, r3, #26
 800240e:	f003 011f 	and.w	r1, r3, #31
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	431a      	orrs	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002422:	bf00      	nop
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3314      	adds	r3, #20
 8002464:	461a      	mov	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	0e5b      	lsrs	r3, r3, #25
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	4413      	add	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	0d1b      	lsrs	r3, r3, #20
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	2107      	movs	r1, #7
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	401a      	ands	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	0d1b      	lsrs	r3, r3, #20
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	431a      	orrs	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800249e:	bf00      	nop
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c4:	43db      	mvns	r3, r3
 80024c6:	401a      	ands	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f003 0318 	and.w	r3, r3, #24
 80024ce:	4908      	ldr	r1, [pc, #32]	@ (80024f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024d0:	40d9      	lsrs	r1, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	400b      	ands	r3, r1
 80024d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024da:	431a      	orrs	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	0007ffff 	.word	0x0007ffff

080024f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 031f 	and.w	r3, r3, #31
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800253c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6093      	str	r3, [r2, #8]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002564:	d101      	bne.n	800256a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002588:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800258c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025b4:	d101      	bne.n	80025ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025dc:	f043 0201 	orr.w	r2, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002600:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002604:	f043 0202 	orr.w	r2, r3, #2
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <LL_ADC_IsEnabled+0x18>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <LL_ADC_IsEnabled+0x1a>
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b02      	cmp	r3, #2
 8002650:	d101      	bne.n	8002656 <LL_ADC_IsDisableOngoing+0x18>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <LL_ADC_IsDisableOngoing+0x1a>
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002674:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002678:	f043 0204 	orr.w	r2, r3, #4
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b04      	cmp	r3, #4
 800269e:	d101      	bne.n	80026a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d101      	bne.n	80026ca <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b089      	sub	sp, #36	@ 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e1a9      	b.n	8002a46 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff fab3 	bl	8001c6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff19 	bl	8002550 <LL_ADC_IsDeepPowerDownEnabled>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff feff 	bl	800252c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ff34 	bl	80025a0 <LL_ADC_IsInternalRegulatorEnabled>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d115      	bne.n	800276a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff18 	bl	8002578 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002748:	4b9c      	ldr	r3, [pc, #624]	@ (80029bc <HAL_ADC_Init+0x2e4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	099b      	lsrs	r3, r3, #6
 800274e:	4a9c      	ldr	r2, [pc, #624]	@ (80029c0 <HAL_ADC_Init+0x2e8>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	099b      	lsrs	r3, r3, #6
 8002756:	3301      	adds	r3, #1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800275c:	e002      	b.n	8002764 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3b01      	subs	r3, #1
 8002762:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f9      	bne.n	800275e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff ff16 	bl	80025a0 <LL_ADC_IsInternalRegulatorEnabled>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10d      	bne.n	8002796 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277e:	f043 0210 	orr.w	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff76 	bl	800268c <LL_ADC_REG_IsConversionOngoing>
 80027a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f040 8142 	bne.w	8002a34 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 813e 	bne.w	8002a34 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80027c0:	f043 0202 	orr.w	r2, r3, #2
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff23 	bl	8002618 <LL_ADC_IsEnabled>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d141      	bne.n	800285c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027e0:	d004      	beq.n	80027ec <HAL_ADC_Init+0x114>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a77      	ldr	r2, [pc, #476]	@ (80029c4 <HAL_ADC_Init+0x2ec>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d10f      	bne.n	800280c <HAL_ADC_Init+0x134>
 80027ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80027f0:	f7ff ff12 	bl	8002618 <LL_ADC_IsEnabled>
 80027f4:	4604      	mov	r4, r0
 80027f6:	4873      	ldr	r0, [pc, #460]	@ (80029c4 <HAL_ADC_Init+0x2ec>)
 80027f8:	f7ff ff0e 	bl	8002618 <LL_ADC_IsEnabled>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4323      	orrs	r3, r4
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e012      	b.n	8002832 <HAL_ADC_Init+0x15a>
 800280c:	486e      	ldr	r0, [pc, #440]	@ (80029c8 <HAL_ADC_Init+0x2f0>)
 800280e:	f7ff ff03 	bl	8002618 <LL_ADC_IsEnabled>
 8002812:	4604      	mov	r4, r0
 8002814:	486d      	ldr	r0, [pc, #436]	@ (80029cc <HAL_ADC_Init+0x2f4>)
 8002816:	f7ff feff 	bl	8002618 <LL_ADC_IsEnabled>
 800281a:	4603      	mov	r3, r0
 800281c:	431c      	orrs	r4, r3
 800281e:	486c      	ldr	r0, [pc, #432]	@ (80029d0 <HAL_ADC_Init+0x2f8>)
 8002820:	f7ff fefa 	bl	8002618 <LL_ADC_IsEnabled>
 8002824:	4603      	mov	r3, r0
 8002826:	4323      	orrs	r3, r4
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d012      	beq.n	800285c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800283e:	d004      	beq.n	800284a <HAL_ADC_Init+0x172>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a5f      	ldr	r2, [pc, #380]	@ (80029c4 <HAL_ADC_Init+0x2ec>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_ADC_Init+0x176>
 800284a:	4a62      	ldr	r2, [pc, #392]	@ (80029d4 <HAL_ADC_Init+0x2fc>)
 800284c:	e000      	b.n	8002850 <HAL_ADC_Init+0x178>
 800284e:	4a62      	ldr	r2, [pc, #392]	@ (80029d8 <HAL_ADC_Init+0x300>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4619      	mov	r1, r3
 8002856:	4610      	mov	r0, r2
 8002858:	f7ff fcd8 	bl	800220c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7f5b      	ldrb	r3, [r3, #29]
 8002860:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002866:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800286c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002872:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800287a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002886:	2b01      	cmp	r3, #1
 8002888:	d106      	bne.n	8002898 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288e:	3b01      	subs	r3, #1
 8002890:	045b      	lsls	r3, r3, #17
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ac:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	4b48      	ldr	r3, [pc, #288]	@ (80029dc <HAL_ADC_Init+0x304>)
 80028bc:	4013      	ands	r3, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	69b9      	ldr	r1, [r7, #24]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fee5 	bl	80026b2 <LL_ADC_INJ_IsConversionOngoing>
 80028e8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d17f      	bne.n	80029f0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d17c      	bne.n	80029f0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028fa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002902:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002912:	f023 0302 	bic.w	r3, r3, #2
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	69b9      	ldr	r1, [r7, #24]
 800291c:	430b      	orrs	r3, r1
 800291e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d017      	beq.n	8002958 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002936:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002940:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002944:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6911      	ldr	r1, [r2, #16]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	430b      	orrs	r3, r1
 8002952:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002956:	e013      	b.n	8002980 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002966:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002978:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800297c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002986:	2b01      	cmp	r3, #1
 8002988:	d12a      	bne.n	80029e0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029a0:	4311      	orrs	r1, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80029a6:	4311      	orrs	r1, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029ac:	430a      	orrs	r2, r1
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	611a      	str	r2, [r3, #16]
 80029ba:	e019      	b.n	80029f0 <HAL_ADC_Init+0x318>
 80029bc:	20000000 	.word	0x20000000
 80029c0:	053e2d63 	.word	0x053e2d63
 80029c4:	50000100 	.word	0x50000100
 80029c8:	50000400 	.word	0x50000400
 80029cc:	50000500 	.word	0x50000500
 80029d0:	50000600 	.word	0x50000600
 80029d4:	50000300 	.word	0x50000300
 80029d8:	50000700 	.word	0x50000700
 80029dc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d10c      	bne.n	8002a12 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	f023 010f 	bic.w	r1, r3, #15
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	1e5a      	subs	r2, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a10:	e007      	b.n	8002a22 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 020f 	bic.w	r2, r2, #15
 8002a20:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a26:	f023 0303 	bic.w	r3, r3, #3
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a32:	e007      	b.n	8002a44 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a38:	f043 0210 	orr.w	r2, r3, #16
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a44:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3724      	adds	r7, #36	@ 0x24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd90      	pop	{r4, r7, pc}
 8002a4e:	bf00      	nop

08002a50 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a64:	d004      	beq.n	8002a70 <HAL_ADC_Start_DMA+0x20>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a5a      	ldr	r2, [pc, #360]	@ (8002bd4 <HAL_ADC_Start_DMA+0x184>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADC_Start_DMA+0x24>
 8002a70:	4b59      	ldr	r3, [pc, #356]	@ (8002bd8 <HAL_ADC_Start_DMA+0x188>)
 8002a72:	e000      	b.n	8002a76 <HAL_ADC_Start_DMA+0x26>
 8002a74:	4b59      	ldr	r3, [pc, #356]	@ (8002bdc <HAL_ADC_Start_DMA+0x18c>)
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fd3c 	bl	80024f4 <LL_ADC_GetMultimode>
 8002a7c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fe02 	bl	800268c <LL_ADC_REG_IsConversionOngoing>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f040 809b 	bne.w	8002bc6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_Start_DMA+0x4e>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e096      	b.n	8002bcc <HAL_ADC_Start_DMA+0x17c>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a4d      	ldr	r2, [pc, #308]	@ (8002be0 <HAL_ADC_Start_DMA+0x190>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d008      	beq.n	8002ac2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d002      	beq.n	8002ac2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b09      	cmp	r3, #9
 8002ac0:	d17a      	bne.n	8002bb8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 ff60 	bl	8003988 <ADC_Enable>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d16d      	bne.n	8002bae <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a3a      	ldr	r2, [pc, #232]	@ (8002bd4 <HAL_ADC_Start_DMA+0x184>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d009      	beq.n	8002b04 <HAL_ADC_Start_DMA+0xb4>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a3b      	ldr	r2, [pc, #236]	@ (8002be4 <HAL_ADC_Start_DMA+0x194>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d002      	beq.n	8002b00 <HAL_ADC_Start_DMA+0xb0>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	e003      	b.n	8002b08 <HAL_ADC_Start_DMA+0xb8>
 8002b00:	4b39      	ldr	r3, [pc, #228]	@ (8002be8 <HAL_ADC_Start_DMA+0x198>)
 8002b02:	e001      	b.n	8002b08 <HAL_ADC_Start_DMA+0xb8>
 8002b04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d002      	beq.n	8002b16 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d105      	bne.n	8002b22 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d006      	beq.n	8002b3c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b32:	f023 0206 	bic.w	r2, r3, #6
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	661a      	str	r2, [r3, #96]	@ 0x60
 8002b3a:	e002      	b.n	8002b42 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b46:	4a29      	ldr	r2, [pc, #164]	@ (8002bec <HAL_ADC_Start_DMA+0x19c>)
 8002b48:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b4e:	4a28      	ldr	r2, [pc, #160]	@ (8002bf0 <HAL_ADC_Start_DMA+0x1a0>)
 8002b50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b56:	4a27      	ldr	r2, [pc, #156]	@ (8002bf4 <HAL_ADC_Start_DMA+0x1a4>)
 8002b58:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	221c      	movs	r2, #28
 8002b60:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0210 	orr.w	r2, r2, #16
 8002b78:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0201 	orr.w	r2, r2, #1
 8002b88:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	3340      	adds	r3, #64	@ 0x40
 8002b94:	4619      	mov	r1, r3
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f001 fc25 	bl	80043e8 <HAL_DMA_Start_IT>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fd5c 	bl	8002664 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002bac:	e00d      	b.n	8002bca <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002bb6:	e008      	b.n	8002bca <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002bc4:	e001      	b.n	8002bca <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	50000100 	.word	0x50000100
 8002bd8:	50000300 	.word	0x50000300
 8002bdc:	50000700 	.word	0x50000700
 8002be0:	50000600 	.word	0x50000600
 8002be4:	50000500 	.word	0x50000500
 8002be8:	50000400 	.word	0x50000400
 8002bec:	08003b73 	.word	0x08003b73
 8002bf0:	08003c4b 	.word	0x08003c4b
 8002bf4:	08003c67 	.word	0x08003c67

08002bf8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	@ 0x28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c00:	2300      	movs	r3, #0
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c1c:	d004      	beq.n	8002c28 <HAL_ADC_IRQHandler+0x30>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a8e      	ldr	r2, [pc, #568]	@ (8002e5c <HAL_ADC_IRQHandler+0x264>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x34>
 8002c28:	4b8d      	ldr	r3, [pc, #564]	@ (8002e60 <HAL_ADC_IRQHandler+0x268>)
 8002c2a:	e000      	b.n	8002c2e <HAL_ADC_IRQHandler+0x36>
 8002c2c:	4b8d      	ldr	r3, [pc, #564]	@ (8002e64 <HAL_ADC_IRQHandler+0x26c>)
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fc60 	bl	80024f4 <LL_ADC_GetMultimode>
 8002c34:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d017      	beq.n	8002c70 <HAL_ADC_IRQHandler+0x78>
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d012      	beq.n	8002c70 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d105      	bne.n	8002c62 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f001 f8f6 	bl	8003e54 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_ADC_IRQHandler+0x8c>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10b      	bne.n	8002c9c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8094 	beq.w	8002db8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 808e 	beq.w	8002db8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d105      	bne.n	8002cb4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fb79 	bl	80023b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d072      	beq.n	8002daa <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a64      	ldr	r2, [pc, #400]	@ (8002e5c <HAL_ADC_IRQHandler+0x264>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d009      	beq.n	8002ce2 <HAL_ADC_IRQHandler+0xea>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a65      	ldr	r2, [pc, #404]	@ (8002e68 <HAL_ADC_IRQHandler+0x270>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d002      	beq.n	8002cde <HAL_ADC_IRQHandler+0xe6>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	e003      	b.n	8002ce6 <HAL_ADC_IRQHandler+0xee>
 8002cde:	4b63      	ldr	r3, [pc, #396]	@ (8002e6c <HAL_ADC_IRQHandler+0x274>)
 8002ce0:	e001      	b.n	8002ce6 <HAL_ADC_IRQHandler+0xee>
 8002ce2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d008      	beq.n	8002d00 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b05      	cmp	r3, #5
 8002cf8:	d002      	beq.n	8002d00 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b09      	cmp	r3, #9
 8002cfe:	d104      	bne.n	8002d0a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	623b      	str	r3, [r7, #32]
 8002d08:	e014      	b.n	8002d34 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a53      	ldr	r2, [pc, #332]	@ (8002e5c <HAL_ADC_IRQHandler+0x264>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d009      	beq.n	8002d28 <HAL_ADC_IRQHandler+0x130>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a53      	ldr	r2, [pc, #332]	@ (8002e68 <HAL_ADC_IRQHandler+0x270>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d002      	beq.n	8002d24 <HAL_ADC_IRQHandler+0x12c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	e003      	b.n	8002d2c <HAL_ADC_IRQHandler+0x134>
 8002d24:	4b51      	ldr	r3, [pc, #324]	@ (8002e6c <HAL_ADC_IRQHandler+0x274>)
 8002d26:	e001      	b.n	8002d2c <HAL_ADC_IRQHandler+0x134>
 8002d28:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d2c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d135      	bne.n	8002daa <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d12e      	bne.n	8002daa <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fc9b 	bl	800268c <LL_ADC_REG_IsConversionOngoing>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d11a      	bne.n	8002d92 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 020c 	bic.w	r2, r2, #12
 8002d6a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d112      	bne.n	8002daa <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d90:	e00b      	b.n	8002daa <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d96:	f043 0210 	orr.w	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da2:	f043 0201 	orr.w	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f984 	bl	80030b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	220c      	movs	r2, #12
 8002db6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d004      	beq.n	8002dcc <HAL_ADC_IRQHandler+0x1d4>
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10b      	bne.n	8002de4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80b3 	beq.w	8002f3e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80ad 	beq.w	8002f3e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fb14 	bl	800242e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002e06:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff facf 	bl	80023b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e12:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a10      	ldr	r2, [pc, #64]	@ (8002e5c <HAL_ADC_IRQHandler+0x264>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d009      	beq.n	8002e32 <HAL_ADC_IRQHandler+0x23a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a11      	ldr	r2, [pc, #68]	@ (8002e68 <HAL_ADC_IRQHandler+0x270>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d002      	beq.n	8002e2e <HAL_ADC_IRQHandler+0x236>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	e003      	b.n	8002e36 <HAL_ADC_IRQHandler+0x23e>
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e6c <HAL_ADC_IRQHandler+0x274>)
 8002e30:	e001      	b.n	8002e36 <HAL_ADC_IRQHandler+0x23e>
 8002e32:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d008      	beq.n	8002e50 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d002      	beq.n	8002e50 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b07      	cmp	r3, #7
 8002e4e:	d10f      	bne.n	8002e70 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	623b      	str	r3, [r7, #32]
 8002e58:	e01f      	b.n	8002e9a <HAL_ADC_IRQHandler+0x2a2>
 8002e5a:	bf00      	nop
 8002e5c:	50000100 	.word	0x50000100
 8002e60:	50000300 	.word	0x50000300
 8002e64:	50000700 	.word	0x50000700
 8002e68:	50000500 	.word	0x50000500
 8002e6c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a8b      	ldr	r2, [pc, #556]	@ (80030a4 <HAL_ADC_IRQHandler+0x4ac>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d009      	beq.n	8002e8e <HAL_ADC_IRQHandler+0x296>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a8a      	ldr	r2, [pc, #552]	@ (80030a8 <HAL_ADC_IRQHandler+0x4b0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d002      	beq.n	8002e8a <HAL_ADC_IRQHandler+0x292>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	e003      	b.n	8002e92 <HAL_ADC_IRQHandler+0x29a>
 8002e8a:	4b88      	ldr	r3, [pc, #544]	@ (80030ac <HAL_ADC_IRQHandler+0x4b4>)
 8002e8c:	e001      	b.n	8002e92 <HAL_ADC_IRQHandler+0x29a>
 8002e8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e92:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d047      	beq.n	8002f30 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <HAL_ADC_IRQHandler+0x2c2>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d03f      	beq.n	8002f30 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d13a      	bne.n	8002f30 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec4:	2b40      	cmp	r3, #64	@ 0x40
 8002ec6:	d133      	bne.n	8002f30 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d12e      	bne.n	8002f30 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fbeb 	bl	80026b2 <LL_ADC_INJ_IsConversionOngoing>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11a      	bne.n	8002f18 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ef0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d112      	bne.n	8002f30 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0e:	f043 0201 	orr.w	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f16:	e00b      	b.n	8002f30 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	f043 0210 	orr.w	r2, r3, #16
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f28:	f043 0201 	orr.w	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 ff67 	bl	8003e04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2260      	movs	r2, #96	@ 0x60
 8002f3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d011      	beq.n	8002f6c <HAL_ADC_IRQHandler+0x374>
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00c      	beq.n	8002f6c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f56:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f8be 	bl	80030e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2280      	movs	r2, #128	@ 0x80
 8002f6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d012      	beq.n	8002f9c <HAL_ADC_IRQHandler+0x3a4>
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00d      	beq.n	8002f9c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f84:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 ff4d 	bl	8003e2c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d012      	beq.n	8002fcc <HAL_ADC_IRQHandler+0x3d4>
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00d      	beq.n	8002fcc <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 ff3f 	bl	8003e40 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d043      	beq.n	800305e <HAL_ADC_IRQHandler+0x466>
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d03e      	beq.n	800305e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d102      	bne.n	8002fee <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fec:	e021      	b.n	8003032 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d015      	beq.n	8003020 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ffc:	d004      	beq.n	8003008 <HAL_ADC_IRQHandler+0x410>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a28      	ldr	r2, [pc, #160]	@ (80030a4 <HAL_ADC_IRQHandler+0x4ac>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d101      	bne.n	800300c <HAL_ADC_IRQHandler+0x414>
 8003008:	4b29      	ldr	r3, [pc, #164]	@ (80030b0 <HAL_ADC_IRQHandler+0x4b8>)
 800300a:	e000      	b.n	800300e <HAL_ADC_IRQHandler+0x416>
 800300c:	4b29      	ldr	r3, [pc, #164]	@ (80030b4 <HAL_ADC_IRQHandler+0x4bc>)
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fa7e 	bl	8002510 <LL_ADC_GetMultiDMATransfer>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800301a:	2301      	movs	r3, #1
 800301c:	627b      	str	r3, [r7, #36]	@ 0x24
 800301e:	e008      	b.n	8003032 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800302e:	2301      	movs	r3, #1
 8003030:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	2b01      	cmp	r3, #1
 8003036:	d10e      	bne.n	8003056 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003048:	f043 0202 	orr.w	r2, r3, #2
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f84f 	bl	80030f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2210      	movs	r2, #16
 800305c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003064:	2b00      	cmp	r3, #0
 8003066:	d018      	beq.n	800309a <HAL_ADC_IRQHandler+0x4a2>
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306e:	2b00      	cmp	r3, #0
 8003070:	d013      	beq.n	800309a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003076:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003082:	f043 0208 	orr.w	r2, r3, #8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003092:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 febf 	bl	8003e18 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800309a:	bf00      	nop
 800309c:	3728      	adds	r7, #40	@ 0x28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	50000100 	.word	0x50000100
 80030a8:	50000500 	.word	0x50000500
 80030ac:	50000400 	.word	0x50000400
 80030b0:	50000300 	.word	0x50000300
 80030b4:	50000700 	.word	0x50000700

080030b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b0b6      	sub	sp, #216	@ 0xd8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003122:	2b01      	cmp	r3, #1
 8003124:	d102      	bne.n	800312c <HAL_ADC_ConfigChannel+0x24>
 8003126:	2302      	movs	r3, #2
 8003128:	f000 bc13 	b.w	8003952 <HAL_ADC_ConfigChannel+0x84a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff faa7 	bl	800268c <LL_ADC_REG_IsConversionOngoing>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	f040 83f3 	bne.w	800392c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	f7ff f93f 	bl	80023d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fa95 	bl	800268c <LL_ADC_REG_IsConversionOngoing>
 8003162:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff faa1 	bl	80026b2 <LL_ADC_INJ_IsConversionOngoing>
 8003170:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003174:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003178:	2b00      	cmp	r3, #0
 800317a:	f040 81d9 	bne.w	8003530 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800317e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003182:	2b00      	cmp	r3, #0
 8003184:	f040 81d4 	bne.w	8003530 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003190:	d10f      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2200      	movs	r2, #0
 800319c:	4619      	mov	r1, r3
 800319e:	f7ff f959 	bl	8002454 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff f8ed 	bl	800238a <LL_ADC_SetSamplingTimeCommonConfig>
 80031b0:	e00e      	b.n	80031d0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	461a      	mov	r2, r3
 80031c0:	f7ff f948 	bl	8002454 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff f8dd 	bl	800238a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	08db      	lsrs	r3, r3, #3
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d022      	beq.n	8003238 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6919      	ldr	r1, [r3, #16]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003202:	f7ff f837 	bl	8002274 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6919      	ldr	r1, [r3, #16]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	461a      	mov	r2, r3
 8003214:	f7ff f883 	bl	800231e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003224:	2b01      	cmp	r3, #1
 8003226:	d102      	bne.n	800322e <HAL_ADC_ConfigChannel+0x126>
 8003228:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800322c:	e000      	b.n	8003230 <HAL_ADC_ConfigChannel+0x128>
 800322e:	2300      	movs	r3, #0
 8003230:	461a      	mov	r2, r3
 8003232:	f7ff f88f 	bl	8002354 <LL_ADC_SetOffsetSaturation>
 8003236:	e17b      	b.n	8003530 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff f83c 	bl	80022bc <LL_ADC_GetOffsetChannel>
 8003244:	4603      	mov	r3, r0
 8003246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10a      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x15c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff f831 	bl	80022bc <LL_ADC_GetOffsetChannel>
 800325a:	4603      	mov	r3, r0
 800325c:	0e9b      	lsrs	r3, r3, #26
 800325e:	f003 021f 	and.w	r2, r3, #31
 8003262:	e01e      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x19a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff f826 	bl	80022bc <LL_ADC_GetOffsetChannel>
 8003270:	4603      	mov	r3, r0
 8003272:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003286:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800328a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003292:	2320      	movs	r3, #32
 8003294:	e004      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003296:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d105      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x1b2>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0e9b      	lsrs	r3, r3, #26
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	e018      	b.n	80032ec <HAL_ADC_ConfigChannel+0x1e4>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80032ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80032d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80032de:	2320      	movs	r3, #32
 80032e0:	e004      	b.n	80032ec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80032e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d106      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2200      	movs	r2, #0
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe fff5 	bl	80022e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2101      	movs	r1, #1
 8003304:	4618      	mov	r0, r3
 8003306:	f7fe ffd9 	bl	80022bc <LL_ADC_GetOffsetChannel>
 800330a:	4603      	mov	r3, r0
 800330c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <HAL_ADC_ConfigChannel+0x222>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2101      	movs	r1, #1
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe ffce 	bl	80022bc <LL_ADC_GetOffsetChannel>
 8003320:	4603      	mov	r3, r0
 8003322:	0e9b      	lsrs	r3, r3, #26
 8003324:	f003 021f 	and.w	r2, r3, #31
 8003328:	e01e      	b.n	8003368 <HAL_ADC_ConfigChannel+0x260>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2101      	movs	r1, #1
 8003330:	4618      	mov	r0, r3
 8003332:	f7fe ffc3 	bl	80022bc <LL_ADC_GetOffsetChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003348:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800334c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003350:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003358:	2320      	movs	r3, #32
 800335a:	e004      	b.n	8003366 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800335c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x278>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	0e9b      	lsrs	r3, r3, #26
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	e018      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x2aa>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003394:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003398:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800339c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80033a4:	2320      	movs	r3, #32
 80033a6:	e004      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80033a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d106      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	2101      	movs	r1, #1
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe ff92 	bl	80022e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2102      	movs	r1, #2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe ff76 	bl	80022bc <LL_ADC_GetOffsetChannel>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10a      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x2e8>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2102      	movs	r1, #2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fe ff6b 	bl	80022bc <LL_ADC_GetOffsetChannel>
 80033e6:	4603      	mov	r3, r0
 80033e8:	0e9b      	lsrs	r3, r3, #26
 80033ea:	f003 021f 	and.w	r2, r3, #31
 80033ee:	e01e      	b.n	800342e <HAL_ADC_ConfigChannel+0x326>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2102      	movs	r1, #2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe ff60 	bl	80022bc <LL_ADC_GetOffsetChannel>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800340e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003412:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003416:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800341e:	2320      	movs	r3, #32
 8003420:	e004      	b.n	800342c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003422:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003436:	2b00      	cmp	r3, #0
 8003438:	d105      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x33e>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	0e9b      	lsrs	r3, r3, #26
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	e016      	b.n	8003474 <HAL_ADC_ConfigChannel+0x36c>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003458:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800345a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800345e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003466:	2320      	movs	r3, #32
 8003468:	e004      	b.n	8003474 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800346a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800346e:	fab3 f383 	clz	r3, r3
 8003472:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003474:	429a      	cmp	r2, r3
 8003476:	d106      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2200      	movs	r2, #0
 800347e:	2102      	movs	r1, #2
 8003480:	4618      	mov	r0, r3
 8003482:	f7fe ff31 	bl	80022e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2103      	movs	r1, #3
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe ff15 	bl	80022bc <LL_ADC_GetOffsetChannel>
 8003492:	4603      	mov	r3, r0
 8003494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x3aa>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2103      	movs	r1, #3
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe ff0a 	bl	80022bc <LL_ADC_GetOffsetChannel>
 80034a8:	4603      	mov	r3, r0
 80034aa:	0e9b      	lsrs	r3, r3, #26
 80034ac:	f003 021f 	and.w	r2, r3, #31
 80034b0:	e017      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x3da>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2103      	movs	r1, #3
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fe feff 	bl	80022bc <LL_ADC_GetOffsetChannel>
 80034be:	4603      	mov	r3, r0
 80034c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034c4:	fa93 f3a3 	rbit	r3, r3
 80034c8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80034ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034cc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80034ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80034d4:	2320      	movs	r3, #32
 80034d6:	e003      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80034d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d105      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x3f2>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	0e9b      	lsrs	r3, r3, #26
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	e011      	b.n	800351e <HAL_ADC_ConfigChannel+0x416>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003508:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800350a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800350c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003512:	2320      	movs	r3, #32
 8003514:	e003      	b.n	800351e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003516:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800351e:	429a      	cmp	r2, r3
 8003520:	d106      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2200      	movs	r2, #0
 8003528:	2103      	movs	r1, #3
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe fedc 	bl	80022e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff f86f 	bl	8002618 <LL_ADC_IsEnabled>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 813d 	bne.w	80037bc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6819      	ldr	r1, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	461a      	mov	r2, r3
 8003550:	f7fe ffac 	bl	80024ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4aa2      	ldr	r2, [pc, #648]	@ (80037e4 <HAL_ADC_ConfigChannel+0x6dc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	f040 812e 	bne.w	80037bc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10b      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x480>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	0e9b      	lsrs	r3, r3, #26
 8003576:	3301      	adds	r3, #1
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2b09      	cmp	r3, #9
 800357e:	bf94      	ite	ls
 8003580:	2301      	movls	r3, #1
 8003582:	2300      	movhi	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e019      	b.n	80035bc <HAL_ADC_ConfigChannel+0x4b4>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003590:	fa93 f3a3 	rbit	r3, r3
 8003594:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003596:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003598:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800359a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80035a0:	2320      	movs	r3, #32
 80035a2:	e003      	b.n	80035ac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80035a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035a6:	fab3 f383 	clz	r3, r3
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	3301      	adds	r3, #1
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	2b09      	cmp	r3, #9
 80035b4:	bf94      	ite	ls
 80035b6:	2301      	movls	r3, #1
 80035b8:	2300      	movhi	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d079      	beq.n	80036b4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d107      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x4d4>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	0e9b      	lsrs	r3, r3, #26
 80035d2:	3301      	adds	r3, #1
 80035d4:	069b      	lsls	r3, r3, #26
 80035d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035da:	e015      	b.n	8003608 <HAL_ADC_ConfigChannel+0x500>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80035ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80035ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80035f4:	2320      	movs	r3, #32
 80035f6:	e003      	b.n	8003600 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80035f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	3301      	adds	r3, #1
 8003602:	069b      	lsls	r3, r3, #26
 8003604:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x520>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	0e9b      	lsrs	r3, r3, #26
 800361a:	3301      	adds	r3, #1
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2101      	movs	r1, #1
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	e017      	b.n	8003658 <HAL_ADC_ConfigChannel+0x550>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003638:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800363a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003640:	2320      	movs	r3, #32
 8003642:	e003      	b.n	800364c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	3301      	adds	r3, #1
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	2101      	movs	r1, #1
 8003654:	fa01 f303 	lsl.w	r3, r1, r3
 8003658:	ea42 0103 	orr.w	r1, r2, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <HAL_ADC_ConfigChannel+0x576>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	0e9b      	lsrs	r3, r3, #26
 800366e:	3301      	adds	r3, #1
 8003670:	f003 021f 	and.w	r2, r3, #31
 8003674:	4613      	mov	r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4413      	add	r3, r2
 800367a:	051b      	lsls	r3, r3, #20
 800367c:	e018      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x5a8>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800368c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003696:	2320      	movs	r3, #32
 8003698:	e003      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800369a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	3301      	adds	r3, #1
 80036a4:	f003 021f 	and.w	r2, r3, #31
 80036a8:	4613      	mov	r3, r2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	4413      	add	r3, r2
 80036ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b0:	430b      	orrs	r3, r1
 80036b2:	e07e      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d107      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x5c8>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0e9b      	lsrs	r3, r3, #26
 80036c6:	3301      	adds	r3, #1
 80036c8:	069b      	lsls	r3, r3, #26
 80036ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036ce:	e015      	b.n	80036fc <HAL_ADC_ConfigChannel+0x5f4>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80036de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80036e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80036e8:	2320      	movs	r3, #32
 80036ea:	e003      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80036ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	069b      	lsls	r3, r3, #26
 80036f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003704:	2b00      	cmp	r3, #0
 8003706:	d109      	bne.n	800371c <HAL_ADC_ConfigChannel+0x614>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	0e9b      	lsrs	r3, r3, #26
 800370e:	3301      	adds	r3, #1
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	2101      	movs	r1, #1
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	e017      	b.n	800374c <HAL_ADC_ConfigChannel+0x644>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	61fb      	str	r3, [r7, #28]
  return result;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003734:	2320      	movs	r3, #32
 8003736:	e003      	b.n	8003740 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	3301      	adds	r3, #1
 8003742:	f003 031f 	and.w	r3, r3, #31
 8003746:	2101      	movs	r1, #1
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	ea42 0103 	orr.w	r1, r2, r3
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10d      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x670>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	0e9b      	lsrs	r3, r3, #26
 8003762:	3301      	adds	r3, #1
 8003764:	f003 021f 	and.w	r2, r3, #31
 8003768:	4613      	mov	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	3b1e      	subs	r3, #30
 8003770:	051b      	lsls	r3, r3, #20
 8003772:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003776:	e01b      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x6a8>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	fa93 f3a3 	rbit	r3, r3
 8003784:	613b      	str	r3, [r7, #16]
  return result;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003790:	2320      	movs	r3, #32
 8003792:	e003      	b.n	800379c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	3301      	adds	r3, #1
 800379e:	f003 021f 	and.w	r2, r3, #31
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	3b1e      	subs	r3, #30
 80037aa:	051b      	lsls	r3, r3, #20
 80037ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037b6:	4619      	mov	r1, r3
 80037b8:	f7fe fe4c 	bl	8002454 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b09      	ldr	r3, [pc, #36]	@ (80037e8 <HAL_ADC_ConfigChannel+0x6e0>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80be 	beq.w	8003946 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037d2:	d004      	beq.n	80037de <HAL_ADC_ConfigChannel+0x6d6>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a04      	ldr	r2, [pc, #16]	@ (80037ec <HAL_ADC_ConfigChannel+0x6e4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d10a      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x6ec>
 80037de:	4b04      	ldr	r3, [pc, #16]	@ (80037f0 <HAL_ADC_ConfigChannel+0x6e8>)
 80037e0:	e009      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x6ee>
 80037e2:	bf00      	nop
 80037e4:	407f0000 	.word	0x407f0000
 80037e8:	80080000 	.word	0x80080000
 80037ec:	50000100 	.word	0x50000100
 80037f0:	50000300 	.word	0x50000300
 80037f4:	4b59      	ldr	r3, [pc, #356]	@ (800395c <HAL_ADC_ConfigChannel+0x854>)
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fd2e 	bl	8002258 <LL_ADC_GetCommonPathInternalCh>
 80037fc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a56      	ldr	r2, [pc, #344]	@ (8003960 <HAL_ADC_ConfigChannel+0x858>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_ADC_ConfigChannel+0x70c>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a55      	ldr	r2, [pc, #340]	@ (8003964 <HAL_ADC_ConfigChannel+0x85c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d13a      	bne.n	800388a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003814:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003818:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d134      	bne.n	800388a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003828:	d005      	beq.n	8003836 <HAL_ADC_ConfigChannel+0x72e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a4e      	ldr	r2, [pc, #312]	@ (8003968 <HAL_ADC_ConfigChannel+0x860>)
 8003830:	4293      	cmp	r3, r2
 8003832:	f040 8085 	bne.w	8003940 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800383e:	d004      	beq.n	800384a <HAL_ADC_ConfigChannel+0x742>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a49      	ldr	r2, [pc, #292]	@ (800396c <HAL_ADC_ConfigChannel+0x864>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_ADC_ConfigChannel+0x746>
 800384a:	4a49      	ldr	r2, [pc, #292]	@ (8003970 <HAL_ADC_ConfigChannel+0x868>)
 800384c:	e000      	b.n	8003850 <HAL_ADC_ConfigChannel+0x748>
 800384e:	4a43      	ldr	r2, [pc, #268]	@ (800395c <HAL_ADC_ConfigChannel+0x854>)
 8003850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003854:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f7fe fce9 	bl	8002232 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003860:	4b44      	ldr	r3, [pc, #272]	@ (8003974 <HAL_ADC_ConfigChannel+0x86c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	4a44      	ldr	r2, [pc, #272]	@ (8003978 <HAL_ADC_ConfigChannel+0x870>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	099b      	lsrs	r3, r3, #6
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800387a:	e002      	b.n	8003882 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3b01      	subs	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f9      	bne.n	800387c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003888:	e05a      	b.n	8003940 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a3b      	ldr	r2, [pc, #236]	@ (800397c <HAL_ADC_ConfigChannel+0x874>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d125      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003894:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003898:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11f      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a31      	ldr	r2, [pc, #196]	@ (800396c <HAL_ADC_ConfigChannel+0x864>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d104      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x7ac>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a34      	ldr	r2, [pc, #208]	@ (8003980 <HAL_ADC_ConfigChannel+0x878>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d047      	beq.n	8003944 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038bc:	d004      	beq.n	80038c8 <HAL_ADC_ConfigChannel+0x7c0>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a2a      	ldr	r2, [pc, #168]	@ (800396c <HAL_ADC_ConfigChannel+0x864>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d101      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x7c4>
 80038c8:	4a29      	ldr	r2, [pc, #164]	@ (8003970 <HAL_ADC_ConfigChannel+0x868>)
 80038ca:	e000      	b.n	80038ce <HAL_ADC_ConfigChannel+0x7c6>
 80038cc:	4a23      	ldr	r2, [pc, #140]	@ (800395c <HAL_ADC_ConfigChannel+0x854>)
 80038ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f7fe fcaa 	bl	8002232 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038de:	e031      	b.n	8003944 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a27      	ldr	r2, [pc, #156]	@ (8003984 <HAL_ADC_ConfigChannel+0x87c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d12d      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d127      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1c      	ldr	r2, [pc, #112]	@ (800396c <HAL_ADC_ConfigChannel+0x864>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d022      	beq.n	8003946 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003908:	d004      	beq.n	8003914 <HAL_ADC_ConfigChannel+0x80c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a17      	ldr	r2, [pc, #92]	@ (800396c <HAL_ADC_ConfigChannel+0x864>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x810>
 8003914:	4a16      	ldr	r2, [pc, #88]	@ (8003970 <HAL_ADC_ConfigChannel+0x868>)
 8003916:	e000      	b.n	800391a <HAL_ADC_ConfigChannel+0x812>
 8003918:	4a10      	ldr	r2, [pc, #64]	@ (800395c <HAL_ADC_ConfigChannel+0x854>)
 800391a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800391e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f7fe fc84 	bl	8002232 <LL_ADC_SetCommonPathInternalCh>
 800392a:	e00c      	b.n	8003946 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003930:	f043 0220 	orr.w	r2, r3, #32
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800393e:	e002      	b.n	8003946 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003940:	bf00      	nop
 8003942:	e000      	b.n	8003946 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003944:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800394e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003952:	4618      	mov	r0, r3
 8003954:	37d8      	adds	r7, #216	@ 0xd8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	50000700 	.word	0x50000700
 8003960:	c3210000 	.word	0xc3210000
 8003964:	90c00010 	.word	0x90c00010
 8003968:	50000600 	.word	0x50000600
 800396c:	50000100 	.word	0x50000100
 8003970:	50000300 	.word	0x50000300
 8003974:	20000000 	.word	0x20000000
 8003978:	053e2d63 	.word	0x053e2d63
 800397c:	c7520000 	.word	0xc7520000
 8003980:	50000500 	.word	0x50000500
 8003984:	cb840000 	.word	0xcb840000

08003988 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fe3d 	bl	8002618 <LL_ADC_IsEnabled>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d176      	bne.n	8003a92 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	4b3c      	ldr	r3, [pc, #240]	@ (8003a9c <ADC_Enable+0x114>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00d      	beq.n	80039ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b6:	f043 0210 	orr.w	r2, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c2:	f043 0201 	orr.w	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e062      	b.n	8003a94 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe fdf8 	bl	80025c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039e0:	d004      	beq.n	80039ec <ADC_Enable+0x64>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2e      	ldr	r2, [pc, #184]	@ (8003aa0 <ADC_Enable+0x118>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d101      	bne.n	80039f0 <ADC_Enable+0x68>
 80039ec:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa4 <ADC_Enable+0x11c>)
 80039ee:	e000      	b.n	80039f2 <ADC_Enable+0x6a>
 80039f0:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa8 <ADC_Enable+0x120>)
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fc30 	bl	8002258 <LL_ADC_GetCommonPathInternalCh>
 80039f8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80039fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d013      	beq.n	8003a2a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a02:	4b2a      	ldr	r3, [pc, #168]	@ (8003aac <ADC_Enable+0x124>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	099b      	lsrs	r3, r3, #6
 8003a08:	4a29      	ldr	r2, [pc, #164]	@ (8003ab0 <ADC_Enable+0x128>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	4613      	mov	r3, r2
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a1c:	e002      	b.n	8003a24 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f9      	bne.n	8003a1e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a2a:	f7fe fbe3 	bl	80021f4 <HAL_GetTick>
 8003a2e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a30:	e028      	b.n	8003a84 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fdee 	bl	8002618 <LL_ADC_IsEnabled>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d104      	bne.n	8003a4c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe fdbe 	bl	80025c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a4c:	f7fe fbd2 	bl	80021f4 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d914      	bls.n	8003a84 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d00d      	beq.n	8003a84 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6c:	f043 0210 	orr.w	r2, r3, #16
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a78:	f043 0201 	orr.w	r2, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e007      	b.n	8003a94 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d1cf      	bne.n	8003a32 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	8000003f 	.word	0x8000003f
 8003aa0:	50000100 	.word	0x50000100
 8003aa4:	50000300 	.word	0x50000300
 8003aa8:	50000700 	.word	0x50000700
 8003aac:	20000000 	.word	0x20000000
 8003ab0:	053e2d63 	.word	0x053e2d63

08003ab4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe fdbc 	bl	800263e <LL_ADC_IsDisableOngoing>
 8003ac6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe fda3 	bl	8002618 <LL_ADC_IsEnabled>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d047      	beq.n	8003b68 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d144      	bne.n	8003b68 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 030d 	and.w	r3, r3, #13
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d10c      	bne.n	8003b06 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe fd7d 	bl	80025f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2203      	movs	r2, #3
 8003afc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003afe:	f7fe fb79 	bl	80021f4 <HAL_GetTick>
 8003b02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b04:	e029      	b.n	8003b5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0a:	f043 0210 	orr.w	r2, r3, #16
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b16:	f043 0201 	orr.w	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e023      	b.n	8003b6a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b22:	f7fe fb67 	bl	80021f4 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d914      	bls.n	8003b5a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00d      	beq.n	8003b5a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b42:	f043 0210 	orr.w	r2, r3, #16
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4e:	f043 0201 	orr.w	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e007      	b.n	8003b6a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1dc      	bne.n	8003b22 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d14b      	bne.n	8003c24 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d021      	beq.n	8003bea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fe fc00 	bl	80023b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d032      	beq.n	8003c1c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d12b      	bne.n	8003c1c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d11f      	bne.n	8003c1c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003be8:	e018      	b.n	8003c1c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d111      	bne.n	8003c1c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d105      	bne.n	8003c1c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c14:	f043 0201 	orr.w	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff fa4b 	bl	80030b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c22:	e00e      	b.n	8003c42 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f7ff fa5f 	bl	80030f4 <HAL_ADC_ErrorCallback>
}
 8003c36:	e004      	b.n	8003c42 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	4798      	blx	r3
}
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f7ff fa37 	bl	80030cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c84:	f043 0204 	orr.w	r2, r3, #4
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7ff fa31 	bl	80030f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c92:	bf00      	nop
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <LL_ADC_IsEnabled>:
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <LL_ADC_IsEnabled+0x18>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <LL_ADC_IsEnabled+0x1a>
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_ADC_StartCalibration>:
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003cd2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	609a      	str	r2, [r3, #8]
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_ADC_IsCalibrationOnGoing>:
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d06:	d101      	bne.n	8003d0c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <LL_ADC_REG_IsConversionOngoing>:
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d101      	bne.n	8003d32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_ADCEx_Calibration_Start+0x1c>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e04d      	b.n	8003df8 <HAL_ADCEx_Calibration_Start+0xb8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff fea5 	bl	8003ab4 <ADC_Disable>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d136      	bne.n	8003de2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d78:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d7c:	f023 0302 	bic.w	r3, r3, #2
 8003d80:	f043 0202 	orr.w	r2, r3, #2
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6839      	ldr	r1, [r7, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ff96 	bl	8003cc0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d94:	e014      	b.n	8003dc0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4a18      	ldr	r2, [pc, #96]	@ (8003e00 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d90d      	bls.n	8003dc0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da8:	f023 0312 	bic.w	r3, r3, #18
 8003dac:	f043 0210 	orr.w	r2, r3, #16
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e01b      	b.n	8003df8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff94 	bl	8003cf2 <LL_ADC_IsCalibrationOnGoing>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e2      	bne.n	8003d96 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd4:	f023 0303 	bic.w	r3, r3, #3
 8003dd8:	f043 0201 	orr.w	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003de0:	e005      	b.n	8003dee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de6:	f043 0210 	orr.w	r2, r3, #16
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	0004de01 	.word	0x0004de01

08003e04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b0a1      	sub	sp, #132	@ 0x84
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e0e7      	b.n	8004056 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003e92:	2300      	movs	r3, #0
 8003e94:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e9e:	d102      	bne.n	8003ea6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	e009      	b.n	8003eba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a6e      	ldr	r2, [pc, #440]	@ (8004064 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d102      	bne.n	8003eb6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003eb0:	4b6d      	ldr	r3, [pc, #436]	@ (8004068 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	e001      	b.n	8003eba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10b      	bne.n	8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0be      	b.n	8004056 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff ff1d 	bl	8003d1a <LL_ADC_REG_IsConversionOngoing>
 8003ee0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ff17 	bl	8003d1a <LL_ADC_REG_IsConversionOngoing>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f040 80a0 	bne.w	8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f040 809c 	bne.w	8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f04:	d004      	beq.n	8003f10 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a55      	ldr	r2, [pc, #340]	@ (8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d101      	bne.n	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003f10:	4b56      	ldr	r3, [pc, #344]	@ (800406c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003f12:	e000      	b.n	8003f16 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003f14:	4b56      	ldr	r3, [pc, #344]	@ (8004070 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003f16:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d04b      	beq.n	8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003f20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	6859      	ldr	r1, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f32:	035b      	lsls	r3, r3, #13
 8003f34:	430b      	orrs	r3, r1
 8003f36:	431a      	orrs	r2, r3
 8003f38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f44:	d004      	beq.n	8003f50 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a45      	ldr	r2, [pc, #276]	@ (8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d10f      	bne.n	8003f70 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003f50:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003f54:	f7ff fea1 	bl	8003c9a <LL_ADC_IsEnabled>
 8003f58:	4604      	mov	r4, r0
 8003f5a:	4841      	ldr	r0, [pc, #260]	@ (8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f5c:	f7ff fe9d 	bl	8003c9a <LL_ADC_IsEnabled>
 8003f60:	4603      	mov	r3, r0
 8003f62:	4323      	orrs	r3, r4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	e012      	b.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003f70:	483c      	ldr	r0, [pc, #240]	@ (8004064 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f72:	f7ff fe92 	bl	8003c9a <LL_ADC_IsEnabled>
 8003f76:	4604      	mov	r4, r0
 8003f78:	483b      	ldr	r0, [pc, #236]	@ (8004068 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f7a:	f7ff fe8e 	bl	8003c9a <LL_ADC_IsEnabled>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	431c      	orrs	r4, r3
 8003f82:	483c      	ldr	r0, [pc, #240]	@ (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f84:	f7ff fe89 	bl	8003c9a <LL_ADC_IsEnabled>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	4323      	orrs	r3, r4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d056      	beq.n	8004048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003fa2:	f023 030f 	bic.w	r3, r3, #15
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	6811      	ldr	r1, [r2, #0]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	6892      	ldr	r2, [r2, #8]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fb4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003fb6:	e047      	b.n	8004048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003fb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fc2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fcc:	d004      	beq.n	8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a23      	ldr	r2, [pc, #140]	@ (8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d10f      	bne.n	8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003fd8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003fdc:	f7ff fe5d 	bl	8003c9a <LL_ADC_IsEnabled>
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	481f      	ldr	r0, [pc, #124]	@ (8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fe4:	f7ff fe59 	bl	8003c9a <LL_ADC_IsEnabled>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	4323      	orrs	r3, r4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	e012      	b.n	800401e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003ff8:	481a      	ldr	r0, [pc, #104]	@ (8004064 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ffa:	f7ff fe4e 	bl	8003c9a <LL_ADC_IsEnabled>
 8003ffe:	4604      	mov	r4, r0
 8004000:	4819      	ldr	r0, [pc, #100]	@ (8004068 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004002:	f7ff fe4a 	bl	8003c9a <LL_ADC_IsEnabled>
 8004006:	4603      	mov	r3, r0
 8004008:	431c      	orrs	r4, r3
 800400a:	481a      	ldr	r0, [pc, #104]	@ (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800400c:	f7ff fe45 	bl	8003c9a <LL_ADC_IsEnabled>
 8004010:	4603      	mov	r3, r0
 8004012:	4323      	orrs	r3, r4
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d012      	beq.n	8004048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004022:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800402a:	f023 030f 	bic.w	r3, r3, #15
 800402e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004030:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004032:	e009      	b.n	8004048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004038:	f043 0220 	orr.w	r2, r3, #32
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004046:	e000      	b.n	800404a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004048:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004052:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004056:	4618      	mov	r0, r3
 8004058:	3784      	adds	r7, #132	@ 0x84
 800405a:	46bd      	mov	sp, r7
 800405c:	bd90      	pop	{r4, r7, pc}
 800405e:	bf00      	nop
 8004060:	50000100 	.word	0x50000100
 8004064:	50000400 	.word	0x50000400
 8004068:	50000500 	.word	0x50000500
 800406c:	50000300 	.word	0x50000300
 8004070:	50000700 	.word	0x50000700
 8004074:	50000600 	.word	0x50000600

08004078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004088:	4b0c      	ldr	r3, [pc, #48]	@ (80040bc <__NVIC_SetPriorityGrouping+0x44>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004094:	4013      	ands	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040aa:	4a04      	ldr	r2, [pc, #16]	@ (80040bc <__NVIC_SetPriorityGrouping+0x44>)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	60d3      	str	r3, [r2, #12]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040c4:	4b04      	ldr	r3, [pc, #16]	@ (80040d8 <__NVIC_GetPriorityGrouping+0x18>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	0a1b      	lsrs	r3, r3, #8
 80040ca:	f003 0307 	and.w	r3, r3, #7
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	e000ed00 	.word	0xe000ed00

080040dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	db0b      	blt.n	8004106 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	f003 021f 	and.w	r2, r3, #31
 80040f4:	4907      	ldr	r1, [pc, #28]	@ (8004114 <__NVIC_EnableIRQ+0x38>)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	2001      	movs	r0, #1
 80040fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e000e100 	.word	0xe000e100

08004118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	6039      	str	r1, [r7, #0]
 8004122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004128:	2b00      	cmp	r3, #0
 800412a:	db0a      	blt.n	8004142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	b2da      	uxtb	r2, r3
 8004130:	490c      	ldr	r1, [pc, #48]	@ (8004164 <__NVIC_SetPriority+0x4c>)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	0112      	lsls	r2, r2, #4
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	440b      	add	r3, r1
 800413c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004140:	e00a      	b.n	8004158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	4908      	ldr	r1, [pc, #32]	@ (8004168 <__NVIC_SetPriority+0x50>)
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	3b04      	subs	r3, #4
 8004150:	0112      	lsls	r2, r2, #4
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	440b      	add	r3, r1
 8004156:	761a      	strb	r2, [r3, #24]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	e000e100 	.word	0xe000e100
 8004168:	e000ed00 	.word	0xe000ed00

0800416c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800416c:	b480      	push	{r7}
 800416e:	b089      	sub	sp, #36	@ 0x24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f1c3 0307 	rsb	r3, r3, #7
 8004186:	2b04      	cmp	r3, #4
 8004188:	bf28      	it	cs
 800418a:	2304      	movcs	r3, #4
 800418c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	3304      	adds	r3, #4
 8004192:	2b06      	cmp	r3, #6
 8004194:	d902      	bls.n	800419c <NVIC_EncodePriority+0x30>
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	3b03      	subs	r3, #3
 800419a:	e000      	b.n	800419e <NVIC_EncodePriority+0x32>
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a0:	f04f 32ff 	mov.w	r2, #4294967295
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43da      	mvns	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	401a      	ands	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041b4:	f04f 31ff 	mov.w	r1, #4294967295
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	fa01 f303 	lsl.w	r3, r1, r3
 80041be:	43d9      	mvns	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041c4:	4313      	orrs	r3, r2
         );
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3724      	adds	r7, #36	@ 0x24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3b01      	subs	r3, #1
 80041e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041e4:	d301      	bcc.n	80041ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041e6:	2301      	movs	r3, #1
 80041e8:	e00f      	b.n	800420a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004214 <SysTick_Config+0x40>)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041f2:	210f      	movs	r1, #15
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	f7ff ff8e 	bl	8004118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041fc:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <SysTick_Config+0x40>)
 80041fe:	2200      	movs	r2, #0
 8004200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004202:	4b04      	ldr	r3, [pc, #16]	@ (8004214 <SysTick_Config+0x40>)
 8004204:	2207      	movs	r2, #7
 8004206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	e000e010 	.word	0xe000e010

08004218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff ff29 	bl	8004078 <__NVIC_SetPriorityGrouping>
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b086      	sub	sp, #24
 8004232:	af00      	add	r7, sp, #0
 8004234:	4603      	mov	r3, r0
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
 800423a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800423c:	f7ff ff40 	bl	80040c0 <__NVIC_GetPriorityGrouping>
 8004240:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	6978      	ldr	r0, [r7, #20]
 8004248:	f7ff ff90 	bl	800416c <NVIC_EncodePriority>
 800424c:	4602      	mov	r2, r0
 800424e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004252:	4611      	mov	r1, r2
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff ff5f 	bl	8004118 <__NVIC_SetPriority>
}
 800425a:	bf00      	nop
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	4603      	mov	r3, r0
 800426a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800426c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff ff33 	bl	80040dc <__NVIC_EnableIRQ>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff ffa4 	bl	80041d4 <SysTick_Config>
 800428c:	4603      	mov	r3, r0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e08d      	b.n	80043c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	4b47      	ldr	r3, [pc, #284]	@ (80043d0 <HAL_DMA_Init+0x138>)
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d80f      	bhi.n	80042d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	4b45      	ldr	r3, [pc, #276]	@ (80043d4 <HAL_DMA_Init+0x13c>)
 80042be:	4413      	add	r3, r2
 80042c0:	4a45      	ldr	r2, [pc, #276]	@ (80043d8 <HAL_DMA_Init+0x140>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	091b      	lsrs	r3, r3, #4
 80042c8:	009a      	lsls	r2, r3, #2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a42      	ldr	r2, [pc, #264]	@ (80043dc <HAL_DMA_Init+0x144>)
 80042d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80042d4:	e00e      	b.n	80042f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	4b40      	ldr	r3, [pc, #256]	@ (80043e0 <HAL_DMA_Init+0x148>)
 80042de:	4413      	add	r3, r2
 80042e0:	4a3d      	ldr	r2, [pc, #244]	@ (80043d8 <HAL_DMA_Init+0x140>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	009a      	lsls	r2, r3, #2
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a3c      	ldr	r2, [pc, #240]	@ (80043e4 <HAL_DMA_Init+0x14c>)
 80042f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800430a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800430e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f9b6 	bl	80046b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004354:	d102      	bne.n	800435c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004370:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d010      	beq.n	800439c <HAL_DMA_Init+0x104>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b04      	cmp	r3, #4
 8004380:	d80c      	bhi.n	800439c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f9d6 	bl	8004734 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004398:	605a      	str	r2, [r3, #4]
 800439a:	e008      	b.n	80043ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40020407 	.word	0x40020407
 80043d4:	bffdfff8 	.word	0xbffdfff8
 80043d8:	cccccccd 	.word	0xcccccccd
 80043dc:	40020000 	.word	0x40020000
 80043e0:	bffdfbf8 	.word	0xbffdfbf8
 80043e4:	40020400 	.word	0x40020400

080043e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_DMA_Start_IT+0x20>
 8004404:	2302      	movs	r3, #2
 8004406:	e066      	b.n	80044d6 <HAL_DMA_Start_IT+0xee>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d155      	bne.n	80044c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f8fb 	bl	800463c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 020e 	orr.w	r2, r2, #14
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e00f      	b.n	8004480 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0204 	bic.w	r2, r2, #4
 800446e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 020a 	orr.w	r2, r2, #10
 800447e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004498:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800449c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	e005      	b.n	80044d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80044d0:	2302      	movs	r3, #2
 80044d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2204      	movs	r2, #4
 8004500:	409a      	lsls	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4013      	ands	r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d026      	beq.n	8004558 <HAL_DMA_IRQHandler+0x7a>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d021      	beq.n	8004558 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d107      	bne.n	8004532 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0204 	bic.w	r2, r2, #4
 8004530:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004536:	f003 021f 	and.w	r2, r3, #31
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	2104      	movs	r1, #4
 8004540:	fa01 f202 	lsl.w	r2, r1, r2
 8004544:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	2b00      	cmp	r3, #0
 800454c:	d071      	beq.n	8004632 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004556:	e06c      	b.n	8004632 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	2202      	movs	r2, #2
 8004562:	409a      	lsls	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4013      	ands	r3, r2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d02e      	beq.n	80045ca <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d029      	beq.n	80045ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 020a 	bic.w	r2, r2, #10
 8004592:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a0:	f003 021f 	and.w	r2, r3, #31
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	2102      	movs	r1, #2
 80045aa:	fa01 f202 	lsl.w	r2, r1, r2
 80045ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d038      	beq.n	8004632 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80045c8:	e033      	b.n	8004632 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2208      	movs	r2, #8
 80045d4:	409a      	lsls	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4013      	ands	r3, r2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d02a      	beq.n	8004634 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d025      	beq.n	8004634 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 020e 	bic.w	r2, r2, #14
 80045f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fc:	f003 021f 	and.w	r2, r3, #31
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004604:	2101      	movs	r1, #1
 8004606:	fa01 f202 	lsl.w	r2, r1, r2
 800460a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004626:	2b00      	cmp	r3, #0
 8004628:	d004      	beq.n	8004634 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004632:	bf00      	nop
 8004634:	bf00      	nop
}
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004652:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004658:	2b00      	cmp	r3, #0
 800465a:	d004      	beq.n	8004666 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004664:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466a:	f003 021f 	and.w	r2, r3, #31
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004672:	2101      	movs	r1, #1
 8004674:	fa01 f202 	lsl.w	r2, r1, r2
 8004678:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b10      	cmp	r3, #16
 8004688:	d108      	bne.n	800469c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800469a:	e007      	b.n	80046ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	60da      	str	r2, [r3, #12]
}
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	4b16      	ldr	r3, [pc, #88]	@ (8004720 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d802      	bhi.n	80046d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80046cc:	4b15      	ldr	r3, [pc, #84]	@ (8004724 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	e001      	b.n	80046d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80046d2:	4b15      	ldr	r3, [pc, #84]	@ (8004728 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80046d4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	3b08      	subs	r3, #8
 80046e2:	4a12      	ldr	r2, [pc, #72]	@ (800472c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80046e4:	fba2 2303 	umull	r2, r3, r2, r3
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f0:	089b      	lsrs	r3, r3, #2
 80046f2:	009a      	lsls	r2, r3, #2
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4413      	add	r3, r2
 80046f8:	461a      	mov	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a0b      	ldr	r2, [pc, #44]	@ (8004730 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004702:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f003 031f 	and.w	r3, r3, #31
 800470a:	2201      	movs	r2, #1
 800470c:	409a      	lsls	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40020407 	.word	0x40020407
 8004724:	40020800 	.word	0x40020800
 8004728:	40020820 	.word	0x40020820
 800472c:	cccccccd 	.word	0xcccccccd
 8004730:	40020880 	.word	0x40020880

08004734 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	461a      	mov	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a08      	ldr	r2, [pc, #32]	@ (8004778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004756:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3b01      	subs	r3, #1
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	2201      	movs	r2, #1
 8004762:	409a      	lsls	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	1000823f 	.word	0x1000823f
 8004778:	40020940 	.word	0x40020940

0800477c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800478a:	e15a      	b.n	8004a42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	2101      	movs	r1, #1
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	fa01 f303 	lsl.w	r3, r1, r3
 8004798:	4013      	ands	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 814c 	beq.w	8004a3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d005      	beq.n	80047bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d130      	bne.n	800481e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	2203      	movs	r2, #3
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4013      	ands	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047f2:	2201      	movs	r2, #1
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4013      	ands	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f003 0201 	and.w	r2, r3, #1
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b03      	cmp	r3, #3
 8004828:	d017      	beq.n	800485a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	2203      	movs	r2, #3
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4013      	ands	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d123      	bne.n	80048ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	08da      	lsrs	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3208      	adds	r2, #8
 800486e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004872:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	220f      	movs	r2, #15
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	43db      	mvns	r3, r3
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4013      	ands	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	08da      	lsrs	r2, r3, #3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3208      	adds	r2, #8
 80048a8:	6939      	ldr	r1, [r7, #16]
 80048aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	2203      	movs	r2, #3
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43db      	mvns	r3, r3
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4013      	ands	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f003 0203 	and.w	r2, r3, #3
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80a6 	beq.w	8004a3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048f0:	4b5b      	ldr	r3, [pc, #364]	@ (8004a60 <HAL_GPIO_Init+0x2e4>)
 80048f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f4:	4a5a      	ldr	r2, [pc, #360]	@ (8004a60 <HAL_GPIO_Init+0x2e4>)
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80048fc:	4b58      	ldr	r3, [pc, #352]	@ (8004a60 <HAL_GPIO_Init+0x2e4>)
 80048fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004908:	4a56      	ldr	r2, [pc, #344]	@ (8004a64 <HAL_GPIO_Init+0x2e8>)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	089b      	lsrs	r3, r3, #2
 800490e:	3302      	adds	r3, #2
 8004910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004914:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	220f      	movs	r2, #15
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4013      	ands	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004932:	d01f      	beq.n	8004974 <HAL_GPIO_Init+0x1f8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a4c      	ldr	r2, [pc, #304]	@ (8004a68 <HAL_GPIO_Init+0x2ec>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d019      	beq.n	8004970 <HAL_GPIO_Init+0x1f4>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a4b      	ldr	r2, [pc, #300]	@ (8004a6c <HAL_GPIO_Init+0x2f0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d013      	beq.n	800496c <HAL_GPIO_Init+0x1f0>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a4a      	ldr	r2, [pc, #296]	@ (8004a70 <HAL_GPIO_Init+0x2f4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00d      	beq.n	8004968 <HAL_GPIO_Init+0x1ec>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a49      	ldr	r2, [pc, #292]	@ (8004a74 <HAL_GPIO_Init+0x2f8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d007      	beq.n	8004964 <HAL_GPIO_Init+0x1e8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a48      	ldr	r2, [pc, #288]	@ (8004a78 <HAL_GPIO_Init+0x2fc>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d101      	bne.n	8004960 <HAL_GPIO_Init+0x1e4>
 800495c:	2305      	movs	r3, #5
 800495e:	e00a      	b.n	8004976 <HAL_GPIO_Init+0x1fa>
 8004960:	2306      	movs	r3, #6
 8004962:	e008      	b.n	8004976 <HAL_GPIO_Init+0x1fa>
 8004964:	2304      	movs	r3, #4
 8004966:	e006      	b.n	8004976 <HAL_GPIO_Init+0x1fa>
 8004968:	2303      	movs	r3, #3
 800496a:	e004      	b.n	8004976 <HAL_GPIO_Init+0x1fa>
 800496c:	2302      	movs	r3, #2
 800496e:	e002      	b.n	8004976 <HAL_GPIO_Init+0x1fa>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <HAL_GPIO_Init+0x1fa>
 8004974:	2300      	movs	r3, #0
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	f002 0203 	and.w	r2, r2, #3
 800497c:	0092      	lsls	r2, r2, #2
 800497e:	4093      	lsls	r3, r2
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004986:	4937      	ldr	r1, [pc, #220]	@ (8004a64 <HAL_GPIO_Init+0x2e8>)
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	089b      	lsrs	r3, r3, #2
 800498c:	3302      	adds	r3, #2
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004994:	4b39      	ldr	r3, [pc, #228]	@ (8004a7c <HAL_GPIO_Init+0x300>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	43db      	mvns	r3, r3
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4013      	ands	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049b8:	4a30      	ldr	r2, [pc, #192]	@ (8004a7c <HAL_GPIO_Init+0x300>)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049be:	4b2f      	ldr	r3, [pc, #188]	@ (8004a7c <HAL_GPIO_Init+0x300>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	43db      	mvns	r3, r3
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4013      	ands	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049e2:	4a26      	ldr	r2, [pc, #152]	@ (8004a7c <HAL_GPIO_Init+0x300>)
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80049e8:	4b24      	ldr	r3, [pc, #144]	@ (8004a7c <HAL_GPIO_Init+0x300>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4013      	ands	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8004a7c <HAL_GPIO_Init+0x300>)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a12:	4b1a      	ldr	r3, [pc, #104]	@ (8004a7c <HAL_GPIO_Init+0x300>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a36:	4a11      	ldr	r2, [pc, #68]	@ (8004a7c <HAL_GPIO_Init+0x300>)
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f47f ae9d 	bne.w	800478c <HAL_GPIO_Init+0x10>
  }
}
 8004a52:	bf00      	nop
 8004a54:	bf00      	nop
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40021000 	.word	0x40021000
 8004a64:	40010000 	.word	0x40010000
 8004a68:	48000400 	.word	0x48000400
 8004a6c:	48000800 	.word	0x48000800
 8004a70:	48000c00 	.word	0x48000c00
 8004a74:	48001000 	.word	0x48001000
 8004a78:	48001400 	.word	0x48001400
 8004a7c:	40010400 	.word	0x40010400

08004a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	807b      	strh	r3, [r7, #2]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a90:	787b      	ldrb	r3, [r7, #1]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a96:	887a      	ldrh	r2, [r7, #2]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a9c:	e002      	b.n	8004aa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a9e:	887a      	ldrh	r2, [r7, #2]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ac2:	887a      	ldrh	r2, [r7, #2]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	041a      	lsls	r2, r3, #16
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	43d9      	mvns	r1, r3
 8004ace:	887b      	ldrh	r3, [r7, #2]
 8004ad0:	400b      	ands	r3, r1
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	619a      	str	r2, [r3, #24]
}
 8004ad8:	bf00      	nop
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004aee:	4b08      	ldr	r3, [pc, #32]	@ (8004b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d006      	beq.n	8004b08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004afa:	4a05      	ldr	r2, [pc, #20]	@ (8004b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004afc:	88fb      	ldrh	r3, [r7, #6]
 8004afe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b00:	88fb      	ldrh	r3, [r7, #6]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fd f866 	bl	8001bd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40010400 	.word	0x40010400

08004b14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d141      	bne.n	8004ba6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b22:	4b4b      	ldr	r3, [pc, #300]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b2e:	d131      	bne.n	8004b94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b30:	4b47      	ldr	r3, [pc, #284]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b36:	4a46      	ldr	r2, [pc, #280]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b40:	4b43      	ldr	r3, [pc, #268]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b48:	4a41      	ldr	r2, [pc, #260]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b50:	4b40      	ldr	r3, [pc, #256]	@ (8004c54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2232      	movs	r2, #50	@ 0x32
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8004c58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b60:	0c9b      	lsrs	r3, r3, #18
 8004b62:	3301      	adds	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b66:	e002      	b.n	8004b6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b6e:	4b38      	ldr	r3, [pc, #224]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b7a:	d102      	bne.n	8004b82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f2      	bne.n	8004b68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b82:	4b33      	ldr	r3, [pc, #204]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b8e:	d158      	bne.n	8004c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e057      	b.n	8004c44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b94:	4b2e      	ldr	r3, [pc, #184]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ba0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ba4:	e04d      	b.n	8004c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bac:	d141      	bne.n	8004c32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bae:	4b28      	ldr	r3, [pc, #160]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bba:	d131      	bne.n	8004c20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bbc:	4b24      	ldr	r3, [pc, #144]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bc2:	4a23      	ldr	r2, [pc, #140]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bcc:	4b20      	ldr	r3, [pc, #128]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8004c54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2232      	movs	r2, #50	@ 0x32
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
 8004be6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	0c9b      	lsrs	r3, r3, #18
 8004bee:	3301      	adds	r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bf2:	e002      	b.n	8004bfa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bfa:	4b15      	ldr	r3, [pc, #84]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c06:	d102      	bne.n	8004c0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f2      	bne.n	8004bf4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c0e:	4b10      	ldr	r3, [pc, #64]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c1a:	d112      	bne.n	8004c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e011      	b.n	8004c44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c20:	4b0b      	ldr	r3, [pc, #44]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c26:	4a0a      	ldr	r2, [pc, #40]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c30:	e007      	b.n	8004c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c32:	4b07      	ldr	r3, [pc, #28]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c3a:	4a05      	ldr	r2, [pc, #20]	@ (8004c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	40007000 	.word	0x40007000
 8004c54:	20000000 	.word	0x20000000
 8004c58:	431bde83 	.word	0x431bde83

08004c5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c60:	4b05      	ldr	r3, [pc, #20]	@ (8004c78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4a04      	ldr	r2, [pc, #16]	@ (8004c78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c6a:	6093      	str	r3, [r2, #8]
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40007000 	.word	0x40007000

08004c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e2fe      	b.n	800528c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d075      	beq.n	8004d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c9a:	4b97      	ldr	r3, [pc, #604]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ca4:	4b94      	ldr	r3, [pc, #592]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b0c      	cmp	r3, #12
 8004cb2:	d102      	bne.n	8004cba <HAL_RCC_OscConfig+0x3e>
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d002      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x44>
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d10b      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc0:	4b8d      	ldr	r3, [pc, #564]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d05b      	beq.n	8004d84 <HAL_RCC_OscConfig+0x108>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d157      	bne.n	8004d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e2d9      	b.n	800528c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce0:	d106      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x74>
 8004ce2:	4b85      	ldr	r3, [pc, #532]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a84      	ldr	r2, [pc, #528]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e01d      	b.n	8004d2c <HAL_RCC_OscConfig+0xb0>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cf8:	d10c      	bne.n	8004d14 <HAL_RCC_OscConfig+0x98>
 8004cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a7e      	ldr	r2, [pc, #504]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	4b7c      	ldr	r3, [pc, #496]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a7b      	ldr	r2, [pc, #492]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	e00b      	b.n	8004d2c <HAL_RCC_OscConfig+0xb0>
 8004d14:	4b78      	ldr	r3, [pc, #480]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a77      	ldr	r2, [pc, #476]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	4b75      	ldr	r3, [pc, #468]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a74      	ldr	r2, [pc, #464]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d013      	beq.n	8004d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fd fa5e 	bl	80021f4 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d3c:	f7fd fa5a 	bl	80021f4 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	@ 0x64
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e29e      	b.n	800528c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0xc0>
 8004d5a:	e014      	b.n	8004d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5c:	f7fd fa4a 	bl	80021f4 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d64:	f7fd fa46 	bl	80021f4 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	@ 0x64
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e28a      	b.n	800528c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d76:	4b60      	ldr	r3, [pc, #384]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f0      	bne.n	8004d64 <HAL_RCC_OscConfig+0xe8>
 8004d82:	e000      	b.n	8004d86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d075      	beq.n	8004e7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d92:	4b59      	ldr	r3, [pc, #356]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 030c 	and.w	r3, r3, #12
 8004d9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d9c:	4b56      	ldr	r3, [pc, #344]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d102      	bne.n	8004db2 <HAL_RCC_OscConfig+0x136>
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d002      	beq.n	8004db8 <HAL_RCC_OscConfig+0x13c>
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d11f      	bne.n	8004df8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004db8:	4b4f      	ldr	r3, [pc, #316]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x154>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e25d      	b.n	800528c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd0:	4b49      	ldr	r3, [pc, #292]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	061b      	lsls	r3, r3, #24
 8004dde:	4946      	ldr	r1, [pc, #280]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004de4:	4b45      	ldr	r3, [pc, #276]	@ (8004efc <HAL_RCC_OscConfig+0x280>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fd f9b7 	bl	800215c <HAL_InitTick>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d043      	beq.n	8004e7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e249      	b.n	800528c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d023      	beq.n	8004e48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e00:	4b3d      	ldr	r3, [pc, #244]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a3c      	ldr	r2, [pc, #240]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0c:	f7fd f9f2 	bl	80021f4 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e14:	f7fd f9ee 	bl	80021f4 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e232      	b.n	800528c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e26:	4b34      	ldr	r3, [pc, #208]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e32:	4b31      	ldr	r3, [pc, #196]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	061b      	lsls	r3, r3, #24
 8004e40:	492d      	ldr	r1, [pc, #180]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	604b      	str	r3, [r1, #4]
 8004e46:	e01a      	b.n	8004e7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e48:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004e4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e54:	f7fd f9ce 	bl	80021f4 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e5c:	f7fd f9ca 	bl	80021f4 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e20e      	b.n	800528c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e6e:	4b22      	ldr	r3, [pc, #136]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x1e0>
 8004e7a:	e000      	b.n	8004e7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d041      	beq.n	8004f0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01c      	beq.n	8004ecc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e92:	4b19      	ldr	r3, [pc, #100]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e98:	4a17      	ldr	r2, [pc, #92]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004e9a:	f043 0301 	orr.w	r3, r3, #1
 8004e9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea2:	f7fd f9a7 	bl	80021f4 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eaa:	f7fd f9a3 	bl	80021f4 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e1e7      	b.n	800528c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0ef      	beq.n	8004eaa <HAL_RCC_OscConfig+0x22e>
 8004eca:	e020      	b.n	8004f0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ed2:	4a09      	ldr	r2, [pc, #36]	@ (8004ef8 <HAL_RCC_OscConfig+0x27c>)
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004edc:	f7fd f98a 	bl	80021f4 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ee2:	e00d      	b.n	8004f00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee4:	f7fd f986 	bl	80021f4 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d906      	bls.n	8004f00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e1ca      	b.n	800528c <HAL_RCC_OscConfig+0x610>
 8004ef6:	bf00      	nop
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f00:	4b8c      	ldr	r3, [pc, #560]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8004f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1ea      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80a6 	beq.w	8005068 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f20:	4b84      	ldr	r3, [pc, #528]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8004f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_RCC_OscConfig+0x2b4>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <HAL_RCC_OscConfig+0x2b6>
 8004f30:	2300      	movs	r3, #0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00d      	beq.n	8004f52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f36:	4b7f      	ldr	r3, [pc, #508]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8004f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8004f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f42:	4b7c      	ldr	r3, [pc, #496]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f52:	4b79      	ldr	r3, [pc, #484]	@ (8005138 <HAL_RCC_OscConfig+0x4bc>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d118      	bne.n	8004f90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f5e:	4b76      	ldr	r3, [pc, #472]	@ (8005138 <HAL_RCC_OscConfig+0x4bc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a75      	ldr	r2, [pc, #468]	@ (8005138 <HAL_RCC_OscConfig+0x4bc>)
 8004f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6a:	f7fd f943 	bl	80021f4 <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f72:	f7fd f93f 	bl	80021f4 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e183      	b.n	800528c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f84:	4b6c      	ldr	r3, [pc, #432]	@ (8005138 <HAL_RCC_OscConfig+0x4bc>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d108      	bne.n	8004faa <HAL_RCC_OscConfig+0x32e>
 8004f98:	4b66      	ldr	r3, [pc, #408]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f9e:	4a65      	ldr	r2, [pc, #404]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fa8:	e024      	b.n	8004ff4 <HAL_RCC_OscConfig+0x378>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b05      	cmp	r3, #5
 8004fb0:	d110      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x358>
 8004fb2:	4b60      	ldr	r3, [pc, #384]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fb8:	4a5e      	ldr	r2, [pc, #376]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8004fba:	f043 0304 	orr.w	r3, r3, #4
 8004fbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fc2:	4b5c      	ldr	r3, [pc, #368]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc8:	4a5a      	ldr	r2, [pc, #360]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fd2:	e00f      	b.n	8004ff4 <HAL_RCC_OscConfig+0x378>
 8004fd4:	4b57      	ldr	r3, [pc, #348]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fda:	4a56      	ldr	r2, [pc, #344]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fe4:	4b53      	ldr	r3, [pc, #332]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8004fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fea:	4a52      	ldr	r2, [pc, #328]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8004fec:	f023 0304 	bic.w	r3, r3, #4
 8004ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d016      	beq.n	800502a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffc:	f7fd f8fa 	bl	80021f4 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005002:	e00a      	b.n	800501a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005004:	f7fd f8f6 	bl	80021f4 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005012:	4293      	cmp	r3, r2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e138      	b.n	800528c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800501a:	4b46      	ldr	r3, [pc, #280]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 800501c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0ed      	beq.n	8005004 <HAL_RCC_OscConfig+0x388>
 8005028:	e015      	b.n	8005056 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502a:	f7fd f8e3 	bl	80021f4 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005030:	e00a      	b.n	8005048 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005032:	f7fd f8df 	bl	80021f4 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005040:	4293      	cmp	r3, r2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e121      	b.n	800528c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005048:	4b3a      	ldr	r3, [pc, #232]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1ed      	bne.n	8005032 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005056:	7ffb      	ldrb	r3, [r7, #31]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d105      	bne.n	8005068 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800505c:	4b35      	ldr	r3, [pc, #212]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 800505e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005060:	4a34      	ldr	r2, [pc, #208]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8005062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005066:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d03c      	beq.n	80050ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01c      	beq.n	80050b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800507c:	4b2d      	ldr	r3, [pc, #180]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 800507e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005082:	4a2c      	ldr	r2, [pc, #176]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508c:	f7fd f8b2 	bl	80021f4 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005094:	f7fd f8ae 	bl	80021f4 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e0f2      	b.n	800528c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050a6:	4b23      	ldr	r3, [pc, #140]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 80050a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0ef      	beq.n	8005094 <HAL_RCC_OscConfig+0x418>
 80050b4:	e01b      	b.n	80050ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 80050b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 80050be:	f023 0301 	bic.w	r3, r3, #1
 80050c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c6:	f7fd f895 	bl	80021f4 <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050ce:	f7fd f891 	bl	80021f4 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e0d5      	b.n	800528c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050e0:	4b14      	ldr	r3, [pc, #80]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 80050e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1ef      	bne.n	80050ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 80c9 	beq.w	800528a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 030c 	and.w	r3, r3, #12
 8005100:	2b0c      	cmp	r3, #12
 8005102:	f000 8083 	beq.w	800520c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d15e      	bne.n	80051cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	4b09      	ldr	r3, [pc, #36]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a08      	ldr	r2, [pc, #32]	@ (8005134 <HAL_RCC_OscConfig+0x4b8>)
 8005114:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511a:	f7fd f86b 	bl	80021f4 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005120:	e00c      	b.n	800513c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005122:	f7fd f867 	bl	80021f4 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d905      	bls.n	800513c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e0ab      	b.n	800528c <HAL_RCC_OscConfig+0x610>
 8005134:	40021000 	.word	0x40021000
 8005138:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800513c:	4b55      	ldr	r3, [pc, #340]	@ (8005294 <HAL_RCC_OscConfig+0x618>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1ec      	bne.n	8005122 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005148:	4b52      	ldr	r3, [pc, #328]	@ (8005294 <HAL_RCC_OscConfig+0x618>)
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	4b52      	ldr	r3, [pc, #328]	@ (8005298 <HAL_RCC_OscConfig+0x61c>)
 800514e:	4013      	ands	r3, r2
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6a11      	ldr	r1, [r2, #32]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005158:	3a01      	subs	r2, #1
 800515a:	0112      	lsls	r2, r2, #4
 800515c:	4311      	orrs	r1, r2
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005162:	0212      	lsls	r2, r2, #8
 8005164:	4311      	orrs	r1, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800516a:	0852      	lsrs	r2, r2, #1
 800516c:	3a01      	subs	r2, #1
 800516e:	0552      	lsls	r2, r2, #21
 8005170:	4311      	orrs	r1, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005176:	0852      	lsrs	r2, r2, #1
 8005178:	3a01      	subs	r2, #1
 800517a:	0652      	lsls	r2, r2, #25
 800517c:	4311      	orrs	r1, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005182:	06d2      	lsls	r2, r2, #27
 8005184:	430a      	orrs	r2, r1
 8005186:	4943      	ldr	r1, [pc, #268]	@ (8005294 <HAL_RCC_OscConfig+0x618>)
 8005188:	4313      	orrs	r3, r2
 800518a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800518c:	4b41      	ldr	r3, [pc, #260]	@ (8005294 <HAL_RCC_OscConfig+0x618>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a40      	ldr	r2, [pc, #256]	@ (8005294 <HAL_RCC_OscConfig+0x618>)
 8005192:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005196:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005198:	4b3e      	ldr	r3, [pc, #248]	@ (8005294 <HAL_RCC_OscConfig+0x618>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4a3d      	ldr	r2, [pc, #244]	@ (8005294 <HAL_RCC_OscConfig+0x618>)
 800519e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fd f826 	bl	80021f4 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ac:	f7fd f822 	bl	80021f4 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e066      	b.n	800528c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051be:	4b35      	ldr	r3, [pc, #212]	@ (8005294 <HAL_RCC_OscConfig+0x618>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0x530>
 80051ca:	e05e      	b.n	800528a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051cc:	4b31      	ldr	r3, [pc, #196]	@ (8005294 <HAL_RCC_OscConfig+0x618>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a30      	ldr	r2, [pc, #192]	@ (8005294 <HAL_RCC_OscConfig+0x618>)
 80051d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d8:	f7fd f80c 	bl	80021f4 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e0:	f7fd f808 	bl	80021f4 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e04c      	b.n	800528c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f2:	4b28      	ldr	r3, [pc, #160]	@ (8005294 <HAL_RCC_OscConfig+0x618>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80051fe:	4b25      	ldr	r3, [pc, #148]	@ (8005294 <HAL_RCC_OscConfig+0x618>)
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	4924      	ldr	r1, [pc, #144]	@ (8005294 <HAL_RCC_OscConfig+0x618>)
 8005204:	4b25      	ldr	r3, [pc, #148]	@ (800529c <HAL_RCC_OscConfig+0x620>)
 8005206:	4013      	ands	r3, r2
 8005208:	60cb      	str	r3, [r1, #12]
 800520a:	e03e      	b.n	800528a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e039      	b.n	800528c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005218:	4b1e      	ldr	r3, [pc, #120]	@ (8005294 <HAL_RCC_OscConfig+0x618>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f003 0203 	and.w	r2, r3, #3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	429a      	cmp	r2, r3
 800522a:	d12c      	bne.n	8005286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005236:	3b01      	subs	r3, #1
 8005238:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d123      	bne.n	8005286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005248:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800524a:	429a      	cmp	r2, r3
 800524c:	d11b      	bne.n	8005286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005258:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800525a:	429a      	cmp	r2, r3
 800525c:	d113      	bne.n	8005286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005268:	085b      	lsrs	r3, r3, #1
 800526a:	3b01      	subs	r3, #1
 800526c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800526e:	429a      	cmp	r2, r3
 8005270:	d109      	bne.n	8005286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	3b01      	subs	r3, #1
 8005280:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005282:	429a      	cmp	r2, r3
 8005284:	d001      	beq.n	800528a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40021000 	.word	0x40021000
 8005298:	019f800c 	.word	0x019f800c
 800529c:	feeefffc 	.word	0xfeeefffc

080052a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e11e      	b.n	80054f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052b8:	4b91      	ldr	r3, [pc, #580]	@ (8005500 <HAL_RCC_ClockConfig+0x260>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d910      	bls.n	80052e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c6:	4b8e      	ldr	r3, [pc, #568]	@ (8005500 <HAL_RCC_ClockConfig+0x260>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f023 020f 	bic.w	r2, r3, #15
 80052ce:	498c      	ldr	r1, [pc, #560]	@ (8005500 <HAL_RCC_ClockConfig+0x260>)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d6:	4b8a      	ldr	r3, [pc, #552]	@ (8005500 <HAL_RCC_ClockConfig+0x260>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d001      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e106      	b.n	80054f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d073      	beq.n	80053dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d129      	bne.n	8005350 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052fc:	4b81      	ldr	r3, [pc, #516]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0f4      	b.n	80054f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800530c:	f000 f99e 	bl	800564c <RCC_GetSysClockFreqFromPLLSource>
 8005310:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4a7c      	ldr	r2, [pc, #496]	@ (8005508 <HAL_RCC_ClockConfig+0x268>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d93f      	bls.n	800539a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800531a:	4b7a      	ldr	r3, [pc, #488]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800532e:	2b00      	cmp	r3, #0
 8005330:	d033      	beq.n	800539a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005336:	2b00      	cmp	r3, #0
 8005338:	d12f      	bne.n	800539a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800533a:	4b72      	ldr	r3, [pc, #456]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005342:	4a70      	ldr	r2, [pc, #448]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 8005344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005348:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800534a:	2380      	movs	r3, #128	@ 0x80
 800534c:	617b      	str	r3, [r7, #20]
 800534e:	e024      	b.n	800539a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d107      	bne.n	8005368 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005358:	4b6a      	ldr	r3, [pc, #424]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d109      	bne.n	8005378 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0c6      	b.n	80054f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005368:	4b66      	ldr	r3, [pc, #408]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0be      	b.n	80054f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005378:	f000 f8ce 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 800537c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4a61      	ldr	r2, [pc, #388]	@ (8005508 <HAL_RCC_ClockConfig+0x268>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d909      	bls.n	800539a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005386:	4b5f      	ldr	r3, [pc, #380]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800538e:	4a5d      	ldr	r2, [pc, #372]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 8005390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005394:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005396:	2380      	movs	r3, #128	@ 0x80
 8005398:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800539a:	4b5a      	ldr	r3, [pc, #360]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f023 0203 	bic.w	r2, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	4957      	ldr	r1, [pc, #348]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ac:	f7fc ff22 	bl	80021f4 <HAL_GetTick>
 80053b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b4:	f7fc ff1e 	bl	80021f4 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e095      	b.n	80054f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ca:	4b4e      	ldr	r3, [pc, #312]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 020c 	and.w	r2, r3, #12
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	429a      	cmp	r2, r3
 80053da:	d1eb      	bne.n	80053b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d023      	beq.n	8005430 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053f4:	4b43      	ldr	r3, [pc, #268]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	4a42      	ldr	r2, [pc, #264]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 80053fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80053fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	d007      	beq.n	800541c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800540c:	4b3d      	ldr	r3, [pc, #244]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005414:	4a3b      	ldr	r2, [pc, #236]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 8005416:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800541a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800541c:	4b39      	ldr	r3, [pc, #228]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	4936      	ldr	r1, [pc, #216]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 800542a:	4313      	orrs	r3, r2
 800542c:	608b      	str	r3, [r1, #8]
 800542e:	e008      	b.n	8005442 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b80      	cmp	r3, #128	@ 0x80
 8005434:	d105      	bne.n	8005442 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005436:	4b33      	ldr	r3, [pc, #204]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	4a32      	ldr	r2, [pc, #200]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 800543c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005440:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005442:	4b2f      	ldr	r3, [pc, #188]	@ (8005500 <HAL_RCC_ClockConfig+0x260>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d21d      	bcs.n	800548c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005450:	4b2b      	ldr	r3, [pc, #172]	@ (8005500 <HAL_RCC_ClockConfig+0x260>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f023 020f 	bic.w	r2, r3, #15
 8005458:	4929      	ldr	r1, [pc, #164]	@ (8005500 <HAL_RCC_ClockConfig+0x260>)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005460:	f7fc fec8 	bl	80021f4 <HAL_GetTick>
 8005464:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005466:	e00a      	b.n	800547e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005468:	f7fc fec4 	bl	80021f4 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005476:	4293      	cmp	r3, r2
 8005478:	d901      	bls.n	800547e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e03b      	b.n	80054f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547e:	4b20      	ldr	r3, [pc, #128]	@ (8005500 <HAL_RCC_ClockConfig+0x260>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d1ed      	bne.n	8005468 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b00      	cmp	r3, #0
 8005496:	d008      	beq.n	80054aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005498:	4b1a      	ldr	r3, [pc, #104]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	4917      	ldr	r1, [pc, #92]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d009      	beq.n	80054ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054b6:	4b13      	ldr	r3, [pc, #76]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	490f      	ldr	r1, [pc, #60]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054ca:	f000 f825 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 80054ce:	4602      	mov	r2, r0
 80054d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005504 <HAL_RCC_ClockConfig+0x264>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	091b      	lsrs	r3, r3, #4
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	490c      	ldr	r1, [pc, #48]	@ (800550c <HAL_RCC_ClockConfig+0x26c>)
 80054dc:	5ccb      	ldrb	r3, [r1, r3]
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	fa22 f303 	lsr.w	r3, r2, r3
 80054e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005510 <HAL_RCC_ClockConfig+0x270>)
 80054e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80054ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005514 <HAL_RCC_ClockConfig+0x274>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fc fe34 	bl	800215c <HAL_InitTick>
 80054f4:	4603      	mov	r3, r0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40022000 	.word	0x40022000
 8005504:	40021000 	.word	0x40021000
 8005508:	04c4b400 	.word	0x04c4b400
 800550c:	080085b8 	.word	0x080085b8
 8005510:	20000000 	.word	0x20000000
 8005514:	20000004 	.word	0x20000004

08005518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800551e:	4b2c      	ldr	r3, [pc, #176]	@ (80055d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 030c 	and.w	r3, r3, #12
 8005526:	2b04      	cmp	r3, #4
 8005528:	d102      	bne.n	8005530 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800552a:	4b2a      	ldr	r3, [pc, #168]	@ (80055d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	e047      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005530:	4b27      	ldr	r3, [pc, #156]	@ (80055d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 030c 	and.w	r3, r3, #12
 8005538:	2b08      	cmp	r3, #8
 800553a:	d102      	bne.n	8005542 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800553c:	4b26      	ldr	r3, [pc, #152]	@ (80055d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	e03e      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005542:	4b23      	ldr	r3, [pc, #140]	@ (80055d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 030c 	and.w	r3, r3, #12
 800554a:	2b0c      	cmp	r3, #12
 800554c:	d136      	bne.n	80055bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800554e:	4b20      	ldr	r3, [pc, #128]	@ (80055d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005558:	4b1d      	ldr	r3, [pc, #116]	@ (80055d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	091b      	lsrs	r3, r3, #4
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	3301      	adds	r3, #1
 8005564:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d10c      	bne.n	8005586 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800556c:	4a1a      	ldr	r2, [pc, #104]	@ (80055d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	fbb2 f3f3 	udiv	r3, r2, r3
 8005574:	4a16      	ldr	r2, [pc, #88]	@ (80055d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005576:	68d2      	ldr	r2, [r2, #12]
 8005578:	0a12      	lsrs	r2, r2, #8
 800557a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800557e:	fb02 f303 	mul.w	r3, r2, r3
 8005582:	617b      	str	r3, [r7, #20]
      break;
 8005584:	e00c      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005586:	4a13      	ldr	r2, [pc, #76]	@ (80055d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	4a10      	ldr	r2, [pc, #64]	@ (80055d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005590:	68d2      	ldr	r2, [r2, #12]
 8005592:	0a12      	lsrs	r2, r2, #8
 8005594:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005598:	fb02 f303 	mul.w	r3, r2, r3
 800559c:	617b      	str	r3, [r7, #20]
      break;
 800559e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055a0:	4b0b      	ldr	r3, [pc, #44]	@ (80055d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	0e5b      	lsrs	r3, r3, #25
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	3301      	adds	r3, #1
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	e001      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80055c0:	693b      	ldr	r3, [r7, #16]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40021000 	.word	0x40021000
 80055d4:	00f42400 	.word	0x00f42400
 80055d8:	016e3600 	.word	0x016e3600

080055dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055e0:	4b03      	ldr	r3, [pc, #12]	@ (80055f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055e2:	681b      	ldr	r3, [r3, #0]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	20000000 	.word	0x20000000

080055f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055f8:	f7ff fff0 	bl	80055dc <HAL_RCC_GetHCLKFreq>
 80055fc:	4602      	mov	r2, r0
 80055fe:	4b06      	ldr	r3, [pc, #24]	@ (8005618 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	0a1b      	lsrs	r3, r3, #8
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	4904      	ldr	r1, [pc, #16]	@ (800561c <HAL_RCC_GetPCLK1Freq+0x28>)
 800560a:	5ccb      	ldrb	r3, [r1, r3]
 800560c:	f003 031f 	and.w	r3, r3, #31
 8005610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005614:	4618      	mov	r0, r3
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40021000 	.word	0x40021000
 800561c:	080085c8 	.word	0x080085c8

08005620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005624:	f7ff ffda 	bl	80055dc <HAL_RCC_GetHCLKFreq>
 8005628:	4602      	mov	r2, r0
 800562a:	4b06      	ldr	r3, [pc, #24]	@ (8005644 <HAL_RCC_GetPCLK2Freq+0x24>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	0adb      	lsrs	r3, r3, #11
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	4904      	ldr	r1, [pc, #16]	@ (8005648 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005636:	5ccb      	ldrb	r3, [r1, r3]
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005640:	4618      	mov	r0, r3
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40021000 	.word	0x40021000
 8005648:	080085c8 	.word	0x080085c8

0800564c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005652:	4b1e      	ldr	r3, [pc, #120]	@ (80056cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800565c:	4b1b      	ldr	r3, [pc, #108]	@ (80056cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	3301      	adds	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b03      	cmp	r3, #3
 800566e:	d10c      	bne.n	800568a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005670:	4a17      	ldr	r2, [pc, #92]	@ (80056d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	fbb2 f3f3 	udiv	r3, r2, r3
 8005678:	4a14      	ldr	r2, [pc, #80]	@ (80056cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800567a:	68d2      	ldr	r2, [r2, #12]
 800567c:	0a12      	lsrs	r2, r2, #8
 800567e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005682:	fb02 f303 	mul.w	r3, r2, r3
 8005686:	617b      	str	r3, [r7, #20]
    break;
 8005688:	e00c      	b.n	80056a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800568a:	4a12      	ldr	r2, [pc, #72]	@ (80056d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005692:	4a0e      	ldr	r2, [pc, #56]	@ (80056cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005694:	68d2      	ldr	r2, [r2, #12]
 8005696:	0a12      	lsrs	r2, r2, #8
 8005698:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800569c:	fb02 f303 	mul.w	r3, r2, r3
 80056a0:	617b      	str	r3, [r7, #20]
    break;
 80056a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056a4:	4b09      	ldr	r3, [pc, #36]	@ (80056cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	0e5b      	lsrs	r3, r3, #25
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	3301      	adds	r3, #1
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80056be:	687b      	ldr	r3, [r7, #4]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	40021000 	.word	0x40021000
 80056d0:	016e3600 	.word	0x016e3600
 80056d4:	00f42400 	.word	0x00f42400

080056d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056e0:	2300      	movs	r3, #0
 80056e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056e4:	2300      	movs	r3, #0
 80056e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 8098 	beq.w	8005826 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f6:	2300      	movs	r3, #0
 80056f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056fa:	4b43      	ldr	r3, [pc, #268]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10d      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005706:	4b40      	ldr	r3, [pc, #256]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570a:	4a3f      	ldr	r2, [pc, #252]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005710:	6593      	str	r3, [r2, #88]	@ 0x58
 8005712:	4b3d      	ldr	r3, [pc, #244]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800571e:	2301      	movs	r3, #1
 8005720:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005722:	4b3a      	ldr	r3, [pc, #232]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a39      	ldr	r2, [pc, #228]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800572c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800572e:	f7fc fd61 	bl	80021f4 <HAL_GetTick>
 8005732:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005734:	e009      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005736:	f7fc fd5d 	bl	80021f4 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d902      	bls.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	74fb      	strb	r3, [r7, #19]
        break;
 8005748:	e005      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800574a:	4b30      	ldr	r3, [pc, #192]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0ef      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005756:	7cfb      	ldrb	r3, [r7, #19]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d159      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800575c:	4b2a      	ldr	r3, [pc, #168]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005766:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01e      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	429a      	cmp	r2, r3
 8005776:	d019      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005778:	4b23      	ldr	r3, [pc, #140]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005782:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005784:	4b20      	ldr	r3, [pc, #128]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800578a:	4a1f      	ldr	r2, [pc, #124]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800578c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005794:	4b1c      	ldr	r3, [pc, #112]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579a:	4a1b      	ldr	r2, [pc, #108]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800579c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057a4:	4a18      	ldr	r2, [pc, #96]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d016      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b6:	f7fc fd1d 	bl	80021f4 <HAL_GetTick>
 80057ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057bc:	e00b      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057be:	f7fc fd19 	bl	80021f4 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d902      	bls.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	74fb      	strb	r3, [r7, #19]
            break;
 80057d4:	e006      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0ec      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80057e4:	7cfb      	ldrb	r3, [r7, #19]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10b      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057ea:	4b07      	ldr	r3, [pc, #28]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f8:	4903      	ldr	r1, [pc, #12]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005800:	e008      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005802:	7cfb      	ldrb	r3, [r7, #19]
 8005804:	74bb      	strb	r3, [r7, #18]
 8005806:	e005      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005808:	40021000 	.word	0x40021000
 800580c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005810:	7cfb      	ldrb	r3, [r7, #19]
 8005812:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005814:	7c7b      	ldrb	r3, [r7, #17]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d105      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800581a:	4ba7      	ldr	r3, [pc, #668]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581e:	4aa6      	ldr	r2, [pc, #664]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005824:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005832:	4ba1      	ldr	r3, [pc, #644]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005838:	f023 0203 	bic.w	r2, r3, #3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	499d      	ldr	r1, [pc, #628]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005854:	4b98      	ldr	r3, [pc, #608]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585a:	f023 020c 	bic.w	r2, r3, #12
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	4995      	ldr	r1, [pc, #596]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005876:	4b90      	ldr	r3, [pc, #576]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	498c      	ldr	r1, [pc, #560]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005898:	4b87      	ldr	r3, [pc, #540]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	4984      	ldr	r1, [pc, #528]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0310 	and.w	r3, r3, #16
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058ba:	4b7f      	ldr	r3, [pc, #508]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	497b      	ldr	r1, [pc, #492]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0320 	and.w	r3, r3, #32
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058dc:	4b76      	ldr	r3, [pc, #472]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	4973      	ldr	r1, [pc, #460]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058fe:	4b6e      	ldr	r3, [pc, #440]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005904:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	496a      	ldr	r1, [pc, #424]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005920:	4b65      	ldr	r3, [pc, #404]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005926:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	4962      	ldr	r1, [pc, #392]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005930:	4313      	orrs	r3, r2
 8005932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005942:	4b5d      	ldr	r3, [pc, #372]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005948:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005950:	4959      	ldr	r1, [pc, #356]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005964:	4b54      	ldr	r3, [pc, #336]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005966:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800596a:	f023 0203 	bic.w	r2, r3, #3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005972:	4951      	ldr	r1, [pc, #324]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005974:	4313      	orrs	r3, r2
 8005976:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005986:	4b4c      	ldr	r3, [pc, #304]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005994:	4948      	ldr	r1, [pc, #288]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d015      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059a8:	4b43      	ldr	r3, [pc, #268]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b6:	4940      	ldr	r1, [pc, #256]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059c6:	d105      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059c8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4a3a      	ldr	r2, [pc, #232]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d015      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059e0:	4b35      	ldr	r3, [pc, #212]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ee:	4932      	ldr	r1, [pc, #200]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059fe:	d105      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a00:	4b2d      	ldr	r3, [pc, #180]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d015      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a18:	4b27      	ldr	r3, [pc, #156]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	4924      	ldr	r1, [pc, #144]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a36:	d105      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a38:	4b1f      	ldr	r3, [pc, #124]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d015      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a50:	4b19      	ldr	r3, [pc, #100]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5e:	4916      	ldr	r1, [pc, #88]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a6e:	d105      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a70:	4b11      	ldr	r3, [pc, #68]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	4a10      	ldr	r2, [pc, #64]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d019      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a88:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	4908      	ldr	r1, [pc, #32]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aa6:	d109      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aa8:	4b03      	ldr	r3, [pc, #12]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a02      	ldr	r2, [pc, #8]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ab2:	60d3      	str	r3, [r2, #12]
 8005ab4:	e002      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005ab6:	bf00      	nop
 8005ab8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d015      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ac8:	4b29      	ldr	r3, [pc, #164]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ace:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad6:	4926      	ldr	r1, [pc, #152]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ae6:	d105      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ae8:	4b21      	ldr	r3, [pc, #132]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4a20      	ldr	r2, [pc, #128]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005af2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d015      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005b00:	4b1b      	ldr	r3, [pc, #108]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b06:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b0e:	4918      	ldr	r1, [pc, #96]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b1e:	d105      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b20:	4b13      	ldr	r3, [pc, #76]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4a12      	ldr	r2, [pc, #72]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b2a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d015      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b38:	4b0d      	ldr	r3, [pc, #52]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b46:	490a      	ldr	r1, [pc, #40]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b56:	d105      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b58:	4b05      	ldr	r3, [pc, #20]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	4a04      	ldr	r2, [pc, #16]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b64:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40021000 	.word	0x40021000

08005b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e049      	b.n	8005c1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fc f98c 	bl	8001eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f000 ff68 	bl	8006a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d001      	beq.n	8005c3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e04c      	b.n	8005cd6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a26      	ldr	r2, [pc, #152]	@ (8005ce4 <HAL_TIM_Base_Start+0xc0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d022      	beq.n	8005c94 <HAL_TIM_Base_Start+0x70>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c56:	d01d      	beq.n	8005c94 <HAL_TIM_Base_Start+0x70>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a22      	ldr	r2, [pc, #136]	@ (8005ce8 <HAL_TIM_Base_Start+0xc4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d018      	beq.n	8005c94 <HAL_TIM_Base_Start+0x70>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a21      	ldr	r2, [pc, #132]	@ (8005cec <HAL_TIM_Base_Start+0xc8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d013      	beq.n	8005c94 <HAL_TIM_Base_Start+0x70>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a1f      	ldr	r2, [pc, #124]	@ (8005cf0 <HAL_TIM_Base_Start+0xcc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00e      	beq.n	8005c94 <HAL_TIM_Base_Start+0x70>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf4 <HAL_TIM_Base_Start+0xd0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d009      	beq.n	8005c94 <HAL_TIM_Base_Start+0x70>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf8 <HAL_TIM_Base_Start+0xd4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d004      	beq.n	8005c94 <HAL_TIM_Base_Start+0x70>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cfc <HAL_TIM_Base_Start+0xd8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d115      	bne.n	8005cc0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	4b19      	ldr	r3, [pc, #100]	@ (8005d00 <HAL_TIM_Base_Start+0xdc>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b06      	cmp	r3, #6
 8005ca4:	d015      	beq.n	8005cd2 <HAL_TIM_Base_Start+0xae>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cac:	d011      	beq.n	8005cd2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0201 	orr.w	r2, r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cbe:	e008      	b.n	8005cd2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0201 	orr.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	e000      	b.n	8005cd4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40012c00 	.word	0x40012c00
 8005ce8:	40000400 	.word	0x40000400
 8005cec:	40000800 	.word	0x40000800
 8005cf0:	40000c00 	.word	0x40000c00
 8005cf4:	40013400 	.word	0x40013400
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40015000 	.word	0x40015000
 8005d00:	00010007 	.word	0x00010007

08005d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d001      	beq.n	8005d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e054      	b.n	8005dc6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a26      	ldr	r2, [pc, #152]	@ (8005dd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d022      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x80>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d46:	d01d      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x80>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a22      	ldr	r2, [pc, #136]	@ (8005dd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d018      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x80>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a21      	ldr	r2, [pc, #132]	@ (8005ddc <HAL_TIM_Base_Start_IT+0xd8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d013      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x80>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1f      	ldr	r2, [pc, #124]	@ (8005de0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00e      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x80>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8005de4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d009      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x80>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1c      	ldr	r2, [pc, #112]	@ (8005de8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d004      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x80>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8005dec <HAL_TIM_Base_Start_IT+0xe8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d115      	bne.n	8005db0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	4b19      	ldr	r3, [pc, #100]	@ (8005df0 <HAL_TIM_Base_Start_IT+0xec>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b06      	cmp	r3, #6
 8005d94:	d015      	beq.n	8005dc2 <HAL_TIM_Base_Start_IT+0xbe>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d9c:	d011      	beq.n	8005dc2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0201 	orr.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dae:	e008      	b.n	8005dc2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	e000      	b.n	8005dc4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40013400 	.word	0x40013400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40015000 	.word	0x40015000
 8005df0:	00010007 	.word	0x00010007

08005df4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e049      	b.n	8005e9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d106      	bne.n	8005e20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f841 	bl	8005ea2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	4619      	mov	r1, r3
 8005e32:	4610      	mov	r0, r2
 8005e34:	f000 fe28 	bl	8006a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d109      	bne.n	8005edc <HAL_TIM_PWM_Start+0x24>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	bf14      	ite	ne
 8005ed4:	2301      	movne	r3, #1
 8005ed6:	2300      	moveq	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	e03c      	b.n	8005f56 <HAL_TIM_PWM_Start+0x9e>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d109      	bne.n	8005ef6 <HAL_TIM_PWM_Start+0x3e>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	bf14      	ite	ne
 8005eee:	2301      	movne	r3, #1
 8005ef0:	2300      	moveq	r3, #0
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	e02f      	b.n	8005f56 <HAL_TIM_PWM_Start+0x9e>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d109      	bne.n	8005f10 <HAL_TIM_PWM_Start+0x58>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	bf14      	ite	ne
 8005f08:	2301      	movne	r3, #1
 8005f0a:	2300      	moveq	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	e022      	b.n	8005f56 <HAL_TIM_PWM_Start+0x9e>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b0c      	cmp	r3, #12
 8005f14:	d109      	bne.n	8005f2a <HAL_TIM_PWM_Start+0x72>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	bf14      	ite	ne
 8005f22:	2301      	movne	r3, #1
 8005f24:	2300      	moveq	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	e015      	b.n	8005f56 <HAL_TIM_PWM_Start+0x9e>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b10      	cmp	r3, #16
 8005f2e:	d109      	bne.n	8005f44 <HAL_TIM_PWM_Start+0x8c>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	bf14      	ite	ne
 8005f3c:	2301      	movne	r3, #1
 8005f3e:	2300      	moveq	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	e008      	b.n	8005f56 <HAL_TIM_PWM_Start+0x9e>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	bf14      	ite	ne
 8005f50:	2301      	movne	r3, #1
 8005f52:	2300      	moveq	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e0a6      	b.n	80060ac <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d104      	bne.n	8005f6e <HAL_TIM_PWM_Start+0xb6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f6c:	e023      	b.n	8005fb6 <HAL_TIM_PWM_Start+0xfe>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d104      	bne.n	8005f7e <HAL_TIM_PWM_Start+0xc6>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f7c:	e01b      	b.n	8005fb6 <HAL_TIM_PWM_Start+0xfe>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d104      	bne.n	8005f8e <HAL_TIM_PWM_Start+0xd6>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f8c:	e013      	b.n	8005fb6 <HAL_TIM_PWM_Start+0xfe>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b0c      	cmp	r3, #12
 8005f92:	d104      	bne.n	8005f9e <HAL_TIM_PWM_Start+0xe6>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f9c:	e00b      	b.n	8005fb6 <HAL_TIM_PWM_Start+0xfe>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b10      	cmp	r3, #16
 8005fa2:	d104      	bne.n	8005fae <HAL_TIM_PWM_Start+0xf6>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fac:	e003      	b.n	8005fb6 <HAL_TIM_PWM_Start+0xfe>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f001 f9dc 	bl	800737c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a3a      	ldr	r2, [pc, #232]	@ (80060b4 <HAL_TIM_PWM_Start+0x1fc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d018      	beq.n	8006000 <HAL_TIM_PWM_Start+0x148>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a39      	ldr	r2, [pc, #228]	@ (80060b8 <HAL_TIM_PWM_Start+0x200>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d013      	beq.n	8006000 <HAL_TIM_PWM_Start+0x148>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a37      	ldr	r2, [pc, #220]	@ (80060bc <HAL_TIM_PWM_Start+0x204>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00e      	beq.n	8006000 <HAL_TIM_PWM_Start+0x148>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a36      	ldr	r2, [pc, #216]	@ (80060c0 <HAL_TIM_PWM_Start+0x208>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d009      	beq.n	8006000 <HAL_TIM_PWM_Start+0x148>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a34      	ldr	r2, [pc, #208]	@ (80060c4 <HAL_TIM_PWM_Start+0x20c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d004      	beq.n	8006000 <HAL_TIM_PWM_Start+0x148>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a33      	ldr	r2, [pc, #204]	@ (80060c8 <HAL_TIM_PWM_Start+0x210>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d101      	bne.n	8006004 <HAL_TIM_PWM_Start+0x14c>
 8006000:	2301      	movs	r3, #1
 8006002:	e000      	b.n	8006006 <HAL_TIM_PWM_Start+0x14e>
 8006004:	2300      	movs	r3, #0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d007      	beq.n	800601a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006018:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a25      	ldr	r2, [pc, #148]	@ (80060b4 <HAL_TIM_PWM_Start+0x1fc>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d022      	beq.n	800606a <HAL_TIM_PWM_Start+0x1b2>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800602c:	d01d      	beq.n	800606a <HAL_TIM_PWM_Start+0x1b2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a26      	ldr	r2, [pc, #152]	@ (80060cc <HAL_TIM_PWM_Start+0x214>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d018      	beq.n	800606a <HAL_TIM_PWM_Start+0x1b2>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a24      	ldr	r2, [pc, #144]	@ (80060d0 <HAL_TIM_PWM_Start+0x218>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <HAL_TIM_PWM_Start+0x1b2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a23      	ldr	r2, [pc, #140]	@ (80060d4 <HAL_TIM_PWM_Start+0x21c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00e      	beq.n	800606a <HAL_TIM_PWM_Start+0x1b2>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a19      	ldr	r2, [pc, #100]	@ (80060b8 <HAL_TIM_PWM_Start+0x200>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d009      	beq.n	800606a <HAL_TIM_PWM_Start+0x1b2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a18      	ldr	r2, [pc, #96]	@ (80060bc <HAL_TIM_PWM_Start+0x204>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d004      	beq.n	800606a <HAL_TIM_PWM_Start+0x1b2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a18      	ldr	r2, [pc, #96]	@ (80060c8 <HAL_TIM_PWM_Start+0x210>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d115      	bne.n	8006096 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	4b19      	ldr	r3, [pc, #100]	@ (80060d8 <HAL_TIM_PWM_Start+0x220>)
 8006072:	4013      	ands	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b06      	cmp	r3, #6
 800607a:	d015      	beq.n	80060a8 <HAL_TIM_PWM_Start+0x1f0>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006082:	d011      	beq.n	80060a8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006094:	e008      	b.n	80060a8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0201 	orr.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	e000      	b.n	80060aa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40013400 	.word	0x40013400
 80060bc:	40014000 	.word	0x40014000
 80060c0:	40014400 	.word	0x40014400
 80060c4:	40014800 	.word	0x40014800
 80060c8:	40015000 	.word	0x40015000
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40000800 	.word	0x40000800
 80060d4:	40000c00 	.word	0x40000c00
 80060d8:	00010007 	.word	0x00010007

080060dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e097      	b.n	8006220 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d106      	bne.n	800610a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7fb fe93 	bl	8001e30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006120:	f023 0307 	bic.w	r3, r3, #7
 8006124:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3304      	adds	r3, #4
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f000 fca9 	bl	8006a88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800615e:	f023 0303 	bic.w	r3, r3, #3
 8006162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	4313      	orrs	r3, r2
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	4313      	orrs	r3, r2
 8006174:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800617c:	f023 030c 	bic.w	r3, r3, #12
 8006180:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006188:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800618c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	4313      	orrs	r3, r2
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	011a      	lsls	r2, r3, #4
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	031b      	lsls	r3, r3, #12
 80061ac:	4313      	orrs	r3, r2
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80061c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	4313      	orrs	r3, r2
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006238:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006240:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006248:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006250:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d110      	bne.n	800627a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d102      	bne.n	8006264 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800625e:	7b7b      	ldrb	r3, [r7, #13]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d001      	beq.n	8006268 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e069      	b.n	800633c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006278:	e031      	b.n	80062de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b04      	cmp	r3, #4
 800627e:	d110      	bne.n	80062a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006280:	7bbb      	ldrb	r3, [r7, #14]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d102      	bne.n	800628c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006286:	7b3b      	ldrb	r3, [r7, #12]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d001      	beq.n	8006290 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e055      	b.n	800633c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062a0:	e01d      	b.n	80062de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d108      	bne.n	80062ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062a8:	7bbb      	ldrb	r3, [r7, #14]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d105      	bne.n	80062ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062ae:	7b7b      	ldrb	r3, [r7, #13]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d102      	bne.n	80062ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062b4:	7b3b      	ldrb	r3, [r7, #12]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d001      	beq.n	80062be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e03e      	b.n	800633c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2202      	movs	r2, #2
 80062c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2202      	movs	r2, #2
 80062ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2202      	movs	r2, #2
 80062d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2202      	movs	r2, #2
 80062da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <HAL_TIM_Encoder_Start+0xc4>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d008      	beq.n	80062fc <HAL_TIM_Encoder_Start+0xd4>
 80062ea:	e00f      	b.n	800630c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2201      	movs	r2, #1
 80062f2:	2100      	movs	r1, #0
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 f841 	bl	800737c <TIM_CCxChannelCmd>
      break;
 80062fa:	e016      	b.n	800632a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2201      	movs	r2, #1
 8006302:	2104      	movs	r1, #4
 8006304:	4618      	mov	r0, r3
 8006306:	f001 f839 	bl	800737c <TIM_CCxChannelCmd>
      break;
 800630a:	e00e      	b.n	800632a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2201      	movs	r2, #1
 8006312:	2100      	movs	r1, #0
 8006314:	4618      	mov	r0, r3
 8006316:	f001 f831 	bl	800737c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2201      	movs	r2, #1
 8006320:	2104      	movs	r1, #4
 8006322:	4618      	mov	r0, r3
 8006324:	f001 f82a 	bl	800737c <TIM_CCxChannelCmd>
      break;
 8006328:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0201 	orr.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d020      	beq.n	80063a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01b      	beq.n	80063a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0202 	mvn.w	r2, #2
 8006378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fb5c 	bl	8006a4c <HAL_TIM_IC_CaptureCallback>
 8006394:	e005      	b.n	80063a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fb4e 	bl	8006a38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fb5f 	bl	8006a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f003 0304 	and.w	r3, r3, #4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d020      	beq.n	80063f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01b      	beq.n	80063f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0204 	mvn.w	r2, #4
 80063c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2202      	movs	r2, #2
 80063ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fb36 	bl	8006a4c <HAL_TIM_IC_CaptureCallback>
 80063e0:	e005      	b.n	80063ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fb28 	bl	8006a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fb39 	bl	8006a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d020      	beq.n	8006440 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b00      	cmp	r3, #0
 8006406:	d01b      	beq.n	8006440 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0208 	mvn.w	r2, #8
 8006410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2204      	movs	r2, #4
 8006416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fb10 	bl	8006a4c <HAL_TIM_IC_CaptureCallback>
 800642c:	e005      	b.n	800643a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fb02 	bl	8006a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fb13 	bl	8006a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f003 0310 	and.w	r3, r3, #16
 8006446:	2b00      	cmp	r3, #0
 8006448:	d020      	beq.n	800648c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f003 0310 	and.w	r3, r3, #16
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01b      	beq.n	800648c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0210 	mvn.w	r2, #16
 800645c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2208      	movs	r2, #8
 8006462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 faea 	bl	8006a4c <HAL_TIM_IC_CaptureCallback>
 8006478:	e005      	b.n	8006486 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fadc 	bl	8006a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 faed 	bl	8006a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00c      	beq.n	80064b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f06f 0201 	mvn.w	r2, #1
 80064a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fb f8ac 	bl	8001608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d104      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00c      	beq.n	80064de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d007      	beq.n	80064de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80064d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f001 f815 	bl	8007508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00c      	beq.n	8006502 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d007      	beq.n	8006502 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80064fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 f80d 	bl	800751c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00c      	beq.n	8006526 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d007      	beq.n	8006526 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800651e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 faa7 	bl	8006a74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f003 0320 	and.w	r3, r3, #32
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00c      	beq.n	800654a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b00      	cmp	r3, #0
 8006538:	d007      	beq.n	800654a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f06f 0220 	mvn.w	r2, #32
 8006542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 ffd5 	bl	80074f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00c      	beq.n	800656e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 ffe1 	bl	8007530 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00c      	beq.n	8006592 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d007      	beq.n	8006592 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800658a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 ffd9 	bl	8007544 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00c      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d007      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80065ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 ffd1 	bl	8007558 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00c      	beq.n	80065da <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d007      	beq.n	80065da <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80065d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 ffc9 	bl	800756c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065da:	bf00      	nop
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065fe:	2302      	movs	r3, #2
 8006600:	e0ff      	b.n	8006802 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b14      	cmp	r3, #20
 800660e:	f200 80f0 	bhi.w	80067f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006612:	a201      	add	r2, pc, #4	@ (adr r2, 8006618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	0800666d 	.word	0x0800666d
 800661c:	080067f3 	.word	0x080067f3
 8006620:	080067f3 	.word	0x080067f3
 8006624:	080067f3 	.word	0x080067f3
 8006628:	080066ad 	.word	0x080066ad
 800662c:	080067f3 	.word	0x080067f3
 8006630:	080067f3 	.word	0x080067f3
 8006634:	080067f3 	.word	0x080067f3
 8006638:	080066ef 	.word	0x080066ef
 800663c:	080067f3 	.word	0x080067f3
 8006640:	080067f3 	.word	0x080067f3
 8006644:	080067f3 	.word	0x080067f3
 8006648:	0800672f 	.word	0x0800672f
 800664c:	080067f3 	.word	0x080067f3
 8006650:	080067f3 	.word	0x080067f3
 8006654:	080067f3 	.word	0x080067f3
 8006658:	08006771 	.word	0x08006771
 800665c:	080067f3 	.word	0x080067f3
 8006660:	080067f3 	.word	0x080067f3
 8006664:	080067f3 	.word	0x080067f3
 8006668:	080067b1 	.word	0x080067b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68b9      	ldr	r1, [r7, #8]
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fabc 	bl	8006bf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699a      	ldr	r2, [r3, #24]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0208 	orr.w	r2, r2, #8
 8006686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0204 	bic.w	r2, r2, #4
 8006696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6999      	ldr	r1, [r3, #24]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	691a      	ldr	r2, [r3, #16]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	619a      	str	r2, [r3, #24]
      break;
 80066aa:	e0a5      	b.n	80067f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fb36 	bl	8006d24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699a      	ldr	r2, [r3, #24]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	699a      	ldr	r2, [r3, #24]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6999      	ldr	r1, [r3, #24]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	021a      	lsls	r2, r3, #8
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	619a      	str	r2, [r3, #24]
      break;
 80066ec:	e084      	b.n	80067f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fba9 	bl	8006e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69da      	ldr	r2, [r3, #28]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f042 0208 	orr.w	r2, r2, #8
 8006708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69da      	ldr	r2, [r3, #28]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0204 	bic.w	r2, r2, #4
 8006718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69d9      	ldr	r1, [r3, #28]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	61da      	str	r2, [r3, #28]
      break;
 800672c:	e064      	b.n	80067f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68b9      	ldr	r1, [r7, #8]
 8006734:	4618      	mov	r0, r3
 8006736:	f000 fc1b 	bl	8006f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69da      	ldr	r2, [r3, #28]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69da      	ldr	r2, [r3, #28]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69d9      	ldr	r1, [r3, #28]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	021a      	lsls	r2, r3, #8
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	61da      	str	r2, [r3, #28]
      break;
 800676e:	e043      	b.n	80067f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fc8e 	bl	8007098 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0208 	orr.w	r2, r2, #8
 800678a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0204 	bic.w	r2, r2, #4
 800679a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	691a      	ldr	r2, [r3, #16]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80067ae:	e023      	b.n	80067f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fcd8 	bl	800716c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	021a      	lsls	r2, r3, #8
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80067f0:	e002      	b.n	80067f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	75fb      	strb	r3, [r7, #23]
      break;
 80067f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006800:	7dfb      	ldrb	r3, [r7, #23]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop

0800680c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006820:	2b01      	cmp	r3, #1
 8006822:	d101      	bne.n	8006828 <HAL_TIM_ConfigClockSource+0x1c>
 8006824:	2302      	movs	r3, #2
 8006826:	e0f6      	b.n	8006a16 <HAL_TIM_ConfigClockSource+0x20a>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006846:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800684a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a6f      	ldr	r2, [pc, #444]	@ (8006a20 <HAL_TIM_ConfigClockSource+0x214>)
 8006862:	4293      	cmp	r3, r2
 8006864:	f000 80c1 	beq.w	80069ea <HAL_TIM_ConfigClockSource+0x1de>
 8006868:	4a6d      	ldr	r2, [pc, #436]	@ (8006a20 <HAL_TIM_ConfigClockSource+0x214>)
 800686a:	4293      	cmp	r3, r2
 800686c:	f200 80c6 	bhi.w	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 8006870:	4a6c      	ldr	r2, [pc, #432]	@ (8006a24 <HAL_TIM_ConfigClockSource+0x218>)
 8006872:	4293      	cmp	r3, r2
 8006874:	f000 80b9 	beq.w	80069ea <HAL_TIM_ConfigClockSource+0x1de>
 8006878:	4a6a      	ldr	r2, [pc, #424]	@ (8006a24 <HAL_TIM_ConfigClockSource+0x218>)
 800687a:	4293      	cmp	r3, r2
 800687c:	f200 80be 	bhi.w	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 8006880:	4a69      	ldr	r2, [pc, #420]	@ (8006a28 <HAL_TIM_ConfigClockSource+0x21c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	f000 80b1 	beq.w	80069ea <HAL_TIM_ConfigClockSource+0x1de>
 8006888:	4a67      	ldr	r2, [pc, #412]	@ (8006a28 <HAL_TIM_ConfigClockSource+0x21c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	f200 80b6 	bhi.w	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 8006890:	4a66      	ldr	r2, [pc, #408]	@ (8006a2c <HAL_TIM_ConfigClockSource+0x220>)
 8006892:	4293      	cmp	r3, r2
 8006894:	f000 80a9 	beq.w	80069ea <HAL_TIM_ConfigClockSource+0x1de>
 8006898:	4a64      	ldr	r2, [pc, #400]	@ (8006a2c <HAL_TIM_ConfigClockSource+0x220>)
 800689a:	4293      	cmp	r3, r2
 800689c:	f200 80ae 	bhi.w	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 80068a0:	4a63      	ldr	r2, [pc, #396]	@ (8006a30 <HAL_TIM_ConfigClockSource+0x224>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	f000 80a1 	beq.w	80069ea <HAL_TIM_ConfigClockSource+0x1de>
 80068a8:	4a61      	ldr	r2, [pc, #388]	@ (8006a30 <HAL_TIM_ConfigClockSource+0x224>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	f200 80a6 	bhi.w	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 80068b0:	4a60      	ldr	r2, [pc, #384]	@ (8006a34 <HAL_TIM_ConfigClockSource+0x228>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	f000 8099 	beq.w	80069ea <HAL_TIM_ConfigClockSource+0x1de>
 80068b8:	4a5e      	ldr	r2, [pc, #376]	@ (8006a34 <HAL_TIM_ConfigClockSource+0x228>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	f200 809e 	bhi.w	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 80068c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80068c4:	f000 8091 	beq.w	80069ea <HAL_TIM_ConfigClockSource+0x1de>
 80068c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80068cc:	f200 8096 	bhi.w	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 80068d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068d4:	f000 8089 	beq.w	80069ea <HAL_TIM_ConfigClockSource+0x1de>
 80068d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068dc:	f200 808e 	bhi.w	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 80068e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068e4:	d03e      	beq.n	8006964 <HAL_TIM_ConfigClockSource+0x158>
 80068e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068ea:	f200 8087 	bhi.w	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 80068ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068f2:	f000 8086 	beq.w	8006a02 <HAL_TIM_ConfigClockSource+0x1f6>
 80068f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068fa:	d87f      	bhi.n	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 80068fc:	2b70      	cmp	r3, #112	@ 0x70
 80068fe:	d01a      	beq.n	8006936 <HAL_TIM_ConfigClockSource+0x12a>
 8006900:	2b70      	cmp	r3, #112	@ 0x70
 8006902:	d87b      	bhi.n	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 8006904:	2b60      	cmp	r3, #96	@ 0x60
 8006906:	d050      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x19e>
 8006908:	2b60      	cmp	r3, #96	@ 0x60
 800690a:	d877      	bhi.n	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 800690c:	2b50      	cmp	r3, #80	@ 0x50
 800690e:	d03c      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x17e>
 8006910:	2b50      	cmp	r3, #80	@ 0x50
 8006912:	d873      	bhi.n	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 8006914:	2b40      	cmp	r3, #64	@ 0x40
 8006916:	d058      	beq.n	80069ca <HAL_TIM_ConfigClockSource+0x1be>
 8006918:	2b40      	cmp	r3, #64	@ 0x40
 800691a:	d86f      	bhi.n	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 800691c:	2b30      	cmp	r3, #48	@ 0x30
 800691e:	d064      	beq.n	80069ea <HAL_TIM_ConfigClockSource+0x1de>
 8006920:	2b30      	cmp	r3, #48	@ 0x30
 8006922:	d86b      	bhi.n	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 8006924:	2b20      	cmp	r3, #32
 8006926:	d060      	beq.n	80069ea <HAL_TIM_ConfigClockSource+0x1de>
 8006928:	2b20      	cmp	r3, #32
 800692a:	d867      	bhi.n	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
 800692c:	2b00      	cmp	r3, #0
 800692e:	d05c      	beq.n	80069ea <HAL_TIM_ConfigClockSource+0x1de>
 8006930:	2b10      	cmp	r3, #16
 8006932:	d05a      	beq.n	80069ea <HAL_TIM_ConfigClockSource+0x1de>
 8006934:	e062      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006946:	f000 fcf9 	bl	800733c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	609a      	str	r2, [r3, #8]
      break;
 8006962:	e04f      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006974:	f000 fce2 	bl	800733c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006986:	609a      	str	r2, [r3, #8]
      break;
 8006988:	e03c      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006996:	461a      	mov	r2, r3
 8006998:	f000 fc54 	bl	8007244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2150      	movs	r1, #80	@ 0x50
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fcad 	bl	8007302 <TIM_ITRx_SetConfig>
      break;
 80069a8:	e02c      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069b6:	461a      	mov	r2, r3
 80069b8:	f000 fc73 	bl	80072a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2160      	movs	r1, #96	@ 0x60
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fc9d 	bl	8007302 <TIM_ITRx_SetConfig>
      break;
 80069c8:	e01c      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069d6:	461a      	mov	r2, r3
 80069d8:	f000 fc34 	bl	8007244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2140      	movs	r1, #64	@ 0x40
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fc8d 	bl	8007302 <TIM_ITRx_SetConfig>
      break;
 80069e8:	e00c      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4619      	mov	r1, r3
 80069f4:	4610      	mov	r0, r2
 80069f6:	f000 fc84 	bl	8007302 <TIM_ITRx_SetConfig>
      break;
 80069fa:	e003      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006a00:	e000      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	00100070 	.word	0x00100070
 8006a24:	00100060 	.word	0x00100060
 8006a28:	00100050 	.word	0x00100050
 8006a2c:	00100040 	.word	0x00100040
 8006a30:	00100030 	.word	0x00100030
 8006a34:	00100020 	.word	0x00100020

08006a38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a4c      	ldr	r2, [pc, #304]	@ (8006bcc <TIM_Base_SetConfig+0x144>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d017      	beq.n	8006ad0 <TIM_Base_SetConfig+0x48>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aa6:	d013      	beq.n	8006ad0 <TIM_Base_SetConfig+0x48>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a49      	ldr	r2, [pc, #292]	@ (8006bd0 <TIM_Base_SetConfig+0x148>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00f      	beq.n	8006ad0 <TIM_Base_SetConfig+0x48>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a48      	ldr	r2, [pc, #288]	@ (8006bd4 <TIM_Base_SetConfig+0x14c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00b      	beq.n	8006ad0 <TIM_Base_SetConfig+0x48>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a47      	ldr	r2, [pc, #284]	@ (8006bd8 <TIM_Base_SetConfig+0x150>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d007      	beq.n	8006ad0 <TIM_Base_SetConfig+0x48>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a46      	ldr	r2, [pc, #280]	@ (8006bdc <TIM_Base_SetConfig+0x154>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d003      	beq.n	8006ad0 <TIM_Base_SetConfig+0x48>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a45      	ldr	r2, [pc, #276]	@ (8006be0 <TIM_Base_SetConfig+0x158>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d108      	bne.n	8006ae2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a39      	ldr	r2, [pc, #228]	@ (8006bcc <TIM_Base_SetConfig+0x144>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d023      	beq.n	8006b32 <TIM_Base_SetConfig+0xaa>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006af0:	d01f      	beq.n	8006b32 <TIM_Base_SetConfig+0xaa>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a36      	ldr	r2, [pc, #216]	@ (8006bd0 <TIM_Base_SetConfig+0x148>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d01b      	beq.n	8006b32 <TIM_Base_SetConfig+0xaa>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a35      	ldr	r2, [pc, #212]	@ (8006bd4 <TIM_Base_SetConfig+0x14c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d017      	beq.n	8006b32 <TIM_Base_SetConfig+0xaa>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a34      	ldr	r2, [pc, #208]	@ (8006bd8 <TIM_Base_SetConfig+0x150>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <TIM_Base_SetConfig+0xaa>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a33      	ldr	r2, [pc, #204]	@ (8006bdc <TIM_Base_SetConfig+0x154>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00f      	beq.n	8006b32 <TIM_Base_SetConfig+0xaa>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a33      	ldr	r2, [pc, #204]	@ (8006be4 <TIM_Base_SetConfig+0x15c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d00b      	beq.n	8006b32 <TIM_Base_SetConfig+0xaa>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a32      	ldr	r2, [pc, #200]	@ (8006be8 <TIM_Base_SetConfig+0x160>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d007      	beq.n	8006b32 <TIM_Base_SetConfig+0xaa>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a31      	ldr	r2, [pc, #196]	@ (8006bec <TIM_Base_SetConfig+0x164>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d003      	beq.n	8006b32 <TIM_Base_SetConfig+0xaa>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a2c      	ldr	r2, [pc, #176]	@ (8006be0 <TIM_Base_SetConfig+0x158>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d108      	bne.n	8006b44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a18      	ldr	r2, [pc, #96]	@ (8006bcc <TIM_Base_SetConfig+0x144>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d013      	beq.n	8006b98 <TIM_Base_SetConfig+0x110>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a1a      	ldr	r2, [pc, #104]	@ (8006bdc <TIM_Base_SetConfig+0x154>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00f      	beq.n	8006b98 <TIM_Base_SetConfig+0x110>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8006be4 <TIM_Base_SetConfig+0x15c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00b      	beq.n	8006b98 <TIM_Base_SetConfig+0x110>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a19      	ldr	r2, [pc, #100]	@ (8006be8 <TIM_Base_SetConfig+0x160>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d007      	beq.n	8006b98 <TIM_Base_SetConfig+0x110>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a18      	ldr	r2, [pc, #96]	@ (8006bec <TIM_Base_SetConfig+0x164>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d003      	beq.n	8006b98 <TIM_Base_SetConfig+0x110>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a13      	ldr	r2, [pc, #76]	@ (8006be0 <TIM_Base_SetConfig+0x158>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d103      	bne.n	8006ba0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	691a      	ldr	r2, [r3, #16]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d105      	bne.n	8006bbe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f023 0201 	bic.w	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	611a      	str	r2, [r3, #16]
  }
}
 8006bbe:	bf00      	nop
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40012c00 	.word	0x40012c00
 8006bd0:	40000400 	.word	0x40000400
 8006bd4:	40000800 	.word	0x40000800
 8006bd8:	40000c00 	.word	0x40000c00
 8006bdc:	40013400 	.word	0x40013400
 8006be0:	40015000 	.word	0x40015000
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40014400 	.word	0x40014400
 8006bec:	40014800 	.word	0x40014800

08006bf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	f023 0201 	bic.w	r2, r3, #1
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0303 	bic.w	r3, r3, #3
 8006c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f023 0302 	bic.w	r3, r3, #2
 8006c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a30      	ldr	r2, [pc, #192]	@ (8006d0c <TIM_OC1_SetConfig+0x11c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d013      	beq.n	8006c78 <TIM_OC1_SetConfig+0x88>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a2f      	ldr	r2, [pc, #188]	@ (8006d10 <TIM_OC1_SetConfig+0x120>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00f      	beq.n	8006c78 <TIM_OC1_SetConfig+0x88>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a2e      	ldr	r2, [pc, #184]	@ (8006d14 <TIM_OC1_SetConfig+0x124>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d00b      	beq.n	8006c78 <TIM_OC1_SetConfig+0x88>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a2d      	ldr	r2, [pc, #180]	@ (8006d18 <TIM_OC1_SetConfig+0x128>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d007      	beq.n	8006c78 <TIM_OC1_SetConfig+0x88>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8006d1c <TIM_OC1_SetConfig+0x12c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d003      	beq.n	8006c78 <TIM_OC1_SetConfig+0x88>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a2b      	ldr	r2, [pc, #172]	@ (8006d20 <TIM_OC1_SetConfig+0x130>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d10c      	bne.n	8006c92 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f023 0308 	bic.w	r3, r3, #8
 8006c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f023 0304 	bic.w	r3, r3, #4
 8006c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a1d      	ldr	r2, [pc, #116]	@ (8006d0c <TIM_OC1_SetConfig+0x11c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d013      	beq.n	8006cc2 <TIM_OC1_SetConfig+0xd2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8006d10 <TIM_OC1_SetConfig+0x120>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00f      	beq.n	8006cc2 <TIM_OC1_SetConfig+0xd2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d14 <TIM_OC1_SetConfig+0x124>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00b      	beq.n	8006cc2 <TIM_OC1_SetConfig+0xd2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a1a      	ldr	r2, [pc, #104]	@ (8006d18 <TIM_OC1_SetConfig+0x128>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d007      	beq.n	8006cc2 <TIM_OC1_SetConfig+0xd2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a19      	ldr	r2, [pc, #100]	@ (8006d1c <TIM_OC1_SetConfig+0x12c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d003      	beq.n	8006cc2 <TIM_OC1_SetConfig+0xd2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a18      	ldr	r2, [pc, #96]	@ (8006d20 <TIM_OC1_SetConfig+0x130>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d111      	bne.n	8006ce6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	621a      	str	r2, [r3, #32]
}
 8006d00:	bf00      	nop
 8006d02:	371c      	adds	r7, #28
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	40012c00 	.word	0x40012c00
 8006d10:	40013400 	.word	0x40013400
 8006d14:	40014000 	.word	0x40014000
 8006d18:	40014400 	.word	0x40014400
 8006d1c:	40014800 	.word	0x40014800
 8006d20:	40015000 	.word	0x40015000

08006d24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	f023 0210 	bic.w	r2, r3, #16
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	021b      	lsls	r3, r3, #8
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f023 0320 	bic.w	r3, r3, #32
 8006d72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a2c      	ldr	r2, [pc, #176]	@ (8006e34 <TIM_OC2_SetConfig+0x110>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d007      	beq.n	8006d98 <TIM_OC2_SetConfig+0x74>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a2b      	ldr	r2, [pc, #172]	@ (8006e38 <TIM_OC2_SetConfig+0x114>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d003      	beq.n	8006d98 <TIM_OC2_SetConfig+0x74>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a2a      	ldr	r2, [pc, #168]	@ (8006e3c <TIM_OC2_SetConfig+0x118>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d10d      	bne.n	8006db4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006db2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a1f      	ldr	r2, [pc, #124]	@ (8006e34 <TIM_OC2_SetConfig+0x110>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d013      	beq.n	8006de4 <TIM_OC2_SetConfig+0xc0>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8006e38 <TIM_OC2_SetConfig+0x114>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00f      	beq.n	8006de4 <TIM_OC2_SetConfig+0xc0>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8006e40 <TIM_OC2_SetConfig+0x11c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00b      	beq.n	8006de4 <TIM_OC2_SetConfig+0xc0>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a1d      	ldr	r2, [pc, #116]	@ (8006e44 <TIM_OC2_SetConfig+0x120>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d007      	beq.n	8006de4 <TIM_OC2_SetConfig+0xc0>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8006e48 <TIM_OC2_SetConfig+0x124>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d003      	beq.n	8006de4 <TIM_OC2_SetConfig+0xc0>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a17      	ldr	r2, [pc, #92]	@ (8006e3c <TIM_OC2_SetConfig+0x118>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d113      	bne.n	8006e0c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006dea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006df2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	621a      	str	r2, [r3, #32]
}
 8006e26:	bf00      	nop
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40012c00 	.word	0x40012c00
 8006e38:	40013400 	.word	0x40013400
 8006e3c:	40015000 	.word	0x40015000
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40014400 	.word	0x40014400
 8006e48:	40014800 	.word	0x40014800

08006e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0303 	bic.w	r3, r3, #3
 8006e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	021b      	lsls	r3, r3, #8
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8006f58 <TIM_OC3_SetConfig+0x10c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d007      	beq.n	8006ebe <TIM_OC3_SetConfig+0x72>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8006f5c <TIM_OC3_SetConfig+0x110>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d003      	beq.n	8006ebe <TIM_OC3_SetConfig+0x72>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a29      	ldr	r2, [pc, #164]	@ (8006f60 <TIM_OC3_SetConfig+0x114>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d10d      	bne.n	8006eda <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	021b      	lsls	r3, r3, #8
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a1e      	ldr	r2, [pc, #120]	@ (8006f58 <TIM_OC3_SetConfig+0x10c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d013      	beq.n	8006f0a <TIM_OC3_SetConfig+0xbe>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8006f5c <TIM_OC3_SetConfig+0x110>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00f      	beq.n	8006f0a <TIM_OC3_SetConfig+0xbe>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a1d      	ldr	r2, [pc, #116]	@ (8006f64 <TIM_OC3_SetConfig+0x118>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00b      	beq.n	8006f0a <TIM_OC3_SetConfig+0xbe>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8006f68 <TIM_OC3_SetConfig+0x11c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d007      	beq.n	8006f0a <TIM_OC3_SetConfig+0xbe>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a1b      	ldr	r2, [pc, #108]	@ (8006f6c <TIM_OC3_SetConfig+0x120>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d003      	beq.n	8006f0a <TIM_OC3_SetConfig+0xbe>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a16      	ldr	r2, [pc, #88]	@ (8006f60 <TIM_OC3_SetConfig+0x114>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d113      	bne.n	8006f32 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	621a      	str	r2, [r3, #32]
}
 8006f4c:	bf00      	nop
 8006f4e:	371c      	adds	r7, #28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	40012c00 	.word	0x40012c00
 8006f5c:	40013400 	.word	0x40013400
 8006f60:	40015000 	.word	0x40015000
 8006f64:	40014000 	.word	0x40014000
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800

08006f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	031b      	lsls	r3, r3, #12
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a2c      	ldr	r2, [pc, #176]	@ (8007080 <TIM_OC4_SetConfig+0x110>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d007      	beq.n	8006fe4 <TIM_OC4_SetConfig+0x74>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8007084 <TIM_OC4_SetConfig+0x114>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d003      	beq.n	8006fe4 <TIM_OC4_SetConfig+0x74>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a2a      	ldr	r2, [pc, #168]	@ (8007088 <TIM_OC4_SetConfig+0x118>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d10d      	bne.n	8007000 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	031b      	lsls	r3, r3, #12
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ffe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a1f      	ldr	r2, [pc, #124]	@ (8007080 <TIM_OC4_SetConfig+0x110>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d013      	beq.n	8007030 <TIM_OC4_SetConfig+0xc0>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a1e      	ldr	r2, [pc, #120]	@ (8007084 <TIM_OC4_SetConfig+0x114>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00f      	beq.n	8007030 <TIM_OC4_SetConfig+0xc0>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a1e      	ldr	r2, [pc, #120]	@ (800708c <TIM_OC4_SetConfig+0x11c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d00b      	beq.n	8007030 <TIM_OC4_SetConfig+0xc0>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a1d      	ldr	r2, [pc, #116]	@ (8007090 <TIM_OC4_SetConfig+0x120>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d007      	beq.n	8007030 <TIM_OC4_SetConfig+0xc0>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a1c      	ldr	r2, [pc, #112]	@ (8007094 <TIM_OC4_SetConfig+0x124>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_OC4_SetConfig+0xc0>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a17      	ldr	r2, [pc, #92]	@ (8007088 <TIM_OC4_SetConfig+0x118>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d113      	bne.n	8007058 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007036:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800703e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	019b      	lsls	r3, r3, #6
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	019b      	lsls	r3, r3, #6
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	621a      	str	r2, [r3, #32]
}
 8007072:	bf00      	nop
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40012c00 	.word	0x40012c00
 8007084:	40013400 	.word	0x40013400
 8007088:	40015000 	.word	0x40015000
 800708c:	40014000 	.word	0x40014000
 8007090:	40014400 	.word	0x40014400
 8007094:	40014800 	.word	0x40014800

08007098 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80070dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	041b      	lsls	r3, r3, #16
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a19      	ldr	r2, [pc, #100]	@ (8007154 <TIM_OC5_SetConfig+0xbc>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d013      	beq.n	800711a <TIM_OC5_SetConfig+0x82>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a18      	ldr	r2, [pc, #96]	@ (8007158 <TIM_OC5_SetConfig+0xc0>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00f      	beq.n	800711a <TIM_OC5_SetConfig+0x82>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a17      	ldr	r2, [pc, #92]	@ (800715c <TIM_OC5_SetConfig+0xc4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d00b      	beq.n	800711a <TIM_OC5_SetConfig+0x82>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a16      	ldr	r2, [pc, #88]	@ (8007160 <TIM_OC5_SetConfig+0xc8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d007      	beq.n	800711a <TIM_OC5_SetConfig+0x82>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a15      	ldr	r2, [pc, #84]	@ (8007164 <TIM_OC5_SetConfig+0xcc>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d003      	beq.n	800711a <TIM_OC5_SetConfig+0x82>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a14      	ldr	r2, [pc, #80]	@ (8007168 <TIM_OC5_SetConfig+0xd0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d109      	bne.n	800712e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007120:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	021b      	lsls	r3, r3, #8
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	621a      	str	r2, [r3, #32]
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	40012c00 	.word	0x40012c00
 8007158:	40013400 	.word	0x40013400
 800715c:	40014000 	.word	0x40014000
 8007160:	40014400 	.word	0x40014400
 8007164:	40014800 	.word	0x40014800
 8007168:	40015000 	.word	0x40015000

0800716c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800719a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800719e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	051b      	lsls	r3, r3, #20
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a1a      	ldr	r2, [pc, #104]	@ (800722c <TIM_OC6_SetConfig+0xc0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d013      	beq.n	80071f0 <TIM_OC6_SetConfig+0x84>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a19      	ldr	r2, [pc, #100]	@ (8007230 <TIM_OC6_SetConfig+0xc4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00f      	beq.n	80071f0 <TIM_OC6_SetConfig+0x84>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a18      	ldr	r2, [pc, #96]	@ (8007234 <TIM_OC6_SetConfig+0xc8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00b      	beq.n	80071f0 <TIM_OC6_SetConfig+0x84>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a17      	ldr	r2, [pc, #92]	@ (8007238 <TIM_OC6_SetConfig+0xcc>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d007      	beq.n	80071f0 <TIM_OC6_SetConfig+0x84>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a16      	ldr	r2, [pc, #88]	@ (800723c <TIM_OC6_SetConfig+0xd0>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d003      	beq.n	80071f0 <TIM_OC6_SetConfig+0x84>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a15      	ldr	r2, [pc, #84]	@ (8007240 <TIM_OC6_SetConfig+0xd4>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d109      	bne.n	8007204 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	029b      	lsls	r3, r3, #10
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	621a      	str	r2, [r3, #32]
}
 800721e:	bf00      	nop
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	40012c00 	.word	0x40012c00
 8007230:	40013400 	.word	0x40013400
 8007234:	40014000 	.word	0x40014000
 8007238:	40014400 	.word	0x40014400
 800723c:	40014800 	.word	0x40014800
 8007240:	40015000 	.word	0x40015000

08007244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6a1b      	ldr	r3, [r3, #32]
 8007254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	f023 0201 	bic.w	r2, r3, #1
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800726e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	4313      	orrs	r3, r2
 8007278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f023 030a 	bic.w	r3, r3, #10
 8007280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	4313      	orrs	r3, r2
 8007288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	621a      	str	r2, [r3, #32]
}
 8007296:	bf00      	nop
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b087      	sub	sp, #28
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	f023 0210 	bic.w	r2, r3, #16
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	031b      	lsls	r3, r3, #12
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80072de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	621a      	str	r2, [r3, #32]
}
 80072f6:	bf00      	nop
 80072f8:	371c      	adds	r7, #28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800731c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4313      	orrs	r3, r2
 8007324:	f043 0307 	orr.w	r3, r3, #7
 8007328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	609a      	str	r2, [r3, #8]
}
 8007330:	bf00      	nop
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007356:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	021a      	lsls	r2, r3, #8
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	431a      	orrs	r2, r3
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	4313      	orrs	r3, r2
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	609a      	str	r2, [r3, #8]
}
 8007370:	bf00      	nop
 8007372:	371c      	adds	r7, #28
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f003 031f 	and.w	r3, r3, #31
 800738e:	2201      	movs	r2, #1
 8007390:	fa02 f303 	lsl.w	r3, r2, r3
 8007394:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a1a      	ldr	r2, [r3, #32]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	43db      	mvns	r3, r3
 800739e:	401a      	ands	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6a1a      	ldr	r2, [r3, #32]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f003 031f 	and.w	r3, r3, #31
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	fa01 f303 	lsl.w	r3, r1, r3
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	621a      	str	r2, [r3, #32]
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
	...

080073c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073dc:	2302      	movs	r3, #2
 80073de:	e074      	b.n	80074ca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a34      	ldr	r2, [pc, #208]	@ (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d009      	beq.n	800741e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a33      	ldr	r2, [pc, #204]	@ (80074dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d004      	beq.n	800741e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a31      	ldr	r2, [pc, #196]	@ (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d108      	bne.n	8007430 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007424:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	4313      	orrs	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800743a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a21      	ldr	r2, [pc, #132]	@ (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d022      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007460:	d01d      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1f      	ldr	r2, [pc, #124]	@ (80074e4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d018      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1d      	ldr	r2, [pc, #116]	@ (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d013      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1c      	ldr	r2, [pc, #112]	@ (80074ec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00e      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a15      	ldr	r2, [pc, #84]	@ (80074dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d009      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a18      	ldr	r2, [pc, #96]	@ (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d004      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a11      	ldr	r2, [pc, #68]	@ (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d10c      	bne.n	80074b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	40012c00 	.word	0x40012c00
 80074dc:	40013400 	.word	0x40013400
 80074e0:	40015000 	.word	0x40015000
 80074e4:	40000400 	.word	0x40000400
 80074e8:	40000800 	.word	0x40000800
 80074ec:	40000c00 	.word	0x40000c00
 80074f0:	40014000 	.word	0x40014000

080074f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e042      	b.n	8007618 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007598:	2b00      	cmp	r3, #0
 800759a:	d106      	bne.n	80075aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7fa fbeb 	bl	8001d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2224      	movs	r2, #36	@ 0x24
 80075ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0201 	bic.w	r2, r2, #1
 80075c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fb24 	bl	8007c18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f825 	bl	8007620 <UART_SetConfig>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d101      	bne.n	80075e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e01b      	b.n	8007618 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0201 	orr.w	r2, r2, #1
 800760e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fba3 	bl	8007d5c <UART_CheckIdleState>
 8007616:	4603      	mov	r3, r0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007624:	b08c      	sub	sp, #48	@ 0x30
 8007626:	af00      	add	r7, sp, #0
 8007628:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	431a      	orrs	r2, r3
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	431a      	orrs	r2, r3
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	69db      	ldr	r3, [r3, #28]
 8007644:	4313      	orrs	r3, r2
 8007646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	4baa      	ldr	r3, [pc, #680]	@ (80078f8 <UART_SetConfig+0x2d8>)
 8007650:	4013      	ands	r3, r2
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	6812      	ldr	r2, [r2, #0]
 8007656:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007658:	430b      	orrs	r3, r1
 800765a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a9f      	ldr	r2, [pc, #636]	@ (80078fc <UART_SetConfig+0x2dc>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d004      	beq.n	800768c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007688:	4313      	orrs	r3, r2
 800768a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007696:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076a0:	430b      	orrs	r3, r1
 80076a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076aa:	f023 010f 	bic.w	r1, r3, #15
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a90      	ldr	r2, [pc, #576]	@ (8007900 <UART_SetConfig+0x2e0>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d125      	bne.n	8007710 <UART_SetConfig+0xf0>
 80076c4:	4b8f      	ldr	r3, [pc, #572]	@ (8007904 <UART_SetConfig+0x2e4>)
 80076c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d81a      	bhi.n	8007708 <UART_SetConfig+0xe8>
 80076d2:	a201      	add	r2, pc, #4	@ (adr r2, 80076d8 <UART_SetConfig+0xb8>)
 80076d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d8:	080076e9 	.word	0x080076e9
 80076dc:	080076f9 	.word	0x080076f9
 80076e0:	080076f1 	.word	0x080076f1
 80076e4:	08007701 	.word	0x08007701
 80076e8:	2301      	movs	r3, #1
 80076ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ee:	e116      	b.n	800791e <UART_SetConfig+0x2fe>
 80076f0:	2302      	movs	r3, #2
 80076f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076f6:	e112      	b.n	800791e <UART_SetConfig+0x2fe>
 80076f8:	2304      	movs	r3, #4
 80076fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076fe:	e10e      	b.n	800791e <UART_SetConfig+0x2fe>
 8007700:	2308      	movs	r3, #8
 8007702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007706:	e10a      	b.n	800791e <UART_SetConfig+0x2fe>
 8007708:	2310      	movs	r3, #16
 800770a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800770e:	e106      	b.n	800791e <UART_SetConfig+0x2fe>
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a7c      	ldr	r2, [pc, #496]	@ (8007908 <UART_SetConfig+0x2e8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d138      	bne.n	800778c <UART_SetConfig+0x16c>
 800771a:	4b7a      	ldr	r3, [pc, #488]	@ (8007904 <UART_SetConfig+0x2e4>)
 800771c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007720:	f003 030c 	and.w	r3, r3, #12
 8007724:	2b0c      	cmp	r3, #12
 8007726:	d82d      	bhi.n	8007784 <UART_SetConfig+0x164>
 8007728:	a201      	add	r2, pc, #4	@ (adr r2, 8007730 <UART_SetConfig+0x110>)
 800772a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772e:	bf00      	nop
 8007730:	08007765 	.word	0x08007765
 8007734:	08007785 	.word	0x08007785
 8007738:	08007785 	.word	0x08007785
 800773c:	08007785 	.word	0x08007785
 8007740:	08007775 	.word	0x08007775
 8007744:	08007785 	.word	0x08007785
 8007748:	08007785 	.word	0x08007785
 800774c:	08007785 	.word	0x08007785
 8007750:	0800776d 	.word	0x0800776d
 8007754:	08007785 	.word	0x08007785
 8007758:	08007785 	.word	0x08007785
 800775c:	08007785 	.word	0x08007785
 8007760:	0800777d 	.word	0x0800777d
 8007764:	2300      	movs	r3, #0
 8007766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800776a:	e0d8      	b.n	800791e <UART_SetConfig+0x2fe>
 800776c:	2302      	movs	r3, #2
 800776e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007772:	e0d4      	b.n	800791e <UART_SetConfig+0x2fe>
 8007774:	2304      	movs	r3, #4
 8007776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800777a:	e0d0      	b.n	800791e <UART_SetConfig+0x2fe>
 800777c:	2308      	movs	r3, #8
 800777e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007782:	e0cc      	b.n	800791e <UART_SetConfig+0x2fe>
 8007784:	2310      	movs	r3, #16
 8007786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800778a:	e0c8      	b.n	800791e <UART_SetConfig+0x2fe>
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a5e      	ldr	r2, [pc, #376]	@ (800790c <UART_SetConfig+0x2ec>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d125      	bne.n	80077e2 <UART_SetConfig+0x1c2>
 8007796:	4b5b      	ldr	r3, [pc, #364]	@ (8007904 <UART_SetConfig+0x2e4>)
 8007798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800779c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80077a0:	2b30      	cmp	r3, #48	@ 0x30
 80077a2:	d016      	beq.n	80077d2 <UART_SetConfig+0x1b2>
 80077a4:	2b30      	cmp	r3, #48	@ 0x30
 80077a6:	d818      	bhi.n	80077da <UART_SetConfig+0x1ba>
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	d00a      	beq.n	80077c2 <UART_SetConfig+0x1a2>
 80077ac:	2b20      	cmp	r3, #32
 80077ae:	d814      	bhi.n	80077da <UART_SetConfig+0x1ba>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <UART_SetConfig+0x19a>
 80077b4:	2b10      	cmp	r3, #16
 80077b6:	d008      	beq.n	80077ca <UART_SetConfig+0x1aa>
 80077b8:	e00f      	b.n	80077da <UART_SetConfig+0x1ba>
 80077ba:	2300      	movs	r3, #0
 80077bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077c0:	e0ad      	b.n	800791e <UART_SetConfig+0x2fe>
 80077c2:	2302      	movs	r3, #2
 80077c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077c8:	e0a9      	b.n	800791e <UART_SetConfig+0x2fe>
 80077ca:	2304      	movs	r3, #4
 80077cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d0:	e0a5      	b.n	800791e <UART_SetConfig+0x2fe>
 80077d2:	2308      	movs	r3, #8
 80077d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d8:	e0a1      	b.n	800791e <UART_SetConfig+0x2fe>
 80077da:	2310      	movs	r3, #16
 80077dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077e0:	e09d      	b.n	800791e <UART_SetConfig+0x2fe>
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a4a      	ldr	r2, [pc, #296]	@ (8007910 <UART_SetConfig+0x2f0>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d125      	bne.n	8007838 <UART_SetConfig+0x218>
 80077ec:	4b45      	ldr	r3, [pc, #276]	@ (8007904 <UART_SetConfig+0x2e4>)
 80077ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80077f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80077f8:	d016      	beq.n	8007828 <UART_SetConfig+0x208>
 80077fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80077fc:	d818      	bhi.n	8007830 <UART_SetConfig+0x210>
 80077fe:	2b80      	cmp	r3, #128	@ 0x80
 8007800:	d00a      	beq.n	8007818 <UART_SetConfig+0x1f8>
 8007802:	2b80      	cmp	r3, #128	@ 0x80
 8007804:	d814      	bhi.n	8007830 <UART_SetConfig+0x210>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <UART_SetConfig+0x1f0>
 800780a:	2b40      	cmp	r3, #64	@ 0x40
 800780c:	d008      	beq.n	8007820 <UART_SetConfig+0x200>
 800780e:	e00f      	b.n	8007830 <UART_SetConfig+0x210>
 8007810:	2300      	movs	r3, #0
 8007812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007816:	e082      	b.n	800791e <UART_SetConfig+0x2fe>
 8007818:	2302      	movs	r3, #2
 800781a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800781e:	e07e      	b.n	800791e <UART_SetConfig+0x2fe>
 8007820:	2304      	movs	r3, #4
 8007822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007826:	e07a      	b.n	800791e <UART_SetConfig+0x2fe>
 8007828:	2308      	movs	r3, #8
 800782a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800782e:	e076      	b.n	800791e <UART_SetConfig+0x2fe>
 8007830:	2310      	movs	r3, #16
 8007832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007836:	e072      	b.n	800791e <UART_SetConfig+0x2fe>
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a35      	ldr	r2, [pc, #212]	@ (8007914 <UART_SetConfig+0x2f4>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d12a      	bne.n	8007898 <UART_SetConfig+0x278>
 8007842:	4b30      	ldr	r3, [pc, #192]	@ (8007904 <UART_SetConfig+0x2e4>)
 8007844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007848:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800784c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007850:	d01a      	beq.n	8007888 <UART_SetConfig+0x268>
 8007852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007856:	d81b      	bhi.n	8007890 <UART_SetConfig+0x270>
 8007858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800785c:	d00c      	beq.n	8007878 <UART_SetConfig+0x258>
 800785e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007862:	d815      	bhi.n	8007890 <UART_SetConfig+0x270>
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <UART_SetConfig+0x250>
 8007868:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800786c:	d008      	beq.n	8007880 <UART_SetConfig+0x260>
 800786e:	e00f      	b.n	8007890 <UART_SetConfig+0x270>
 8007870:	2300      	movs	r3, #0
 8007872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007876:	e052      	b.n	800791e <UART_SetConfig+0x2fe>
 8007878:	2302      	movs	r3, #2
 800787a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800787e:	e04e      	b.n	800791e <UART_SetConfig+0x2fe>
 8007880:	2304      	movs	r3, #4
 8007882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007886:	e04a      	b.n	800791e <UART_SetConfig+0x2fe>
 8007888:	2308      	movs	r3, #8
 800788a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800788e:	e046      	b.n	800791e <UART_SetConfig+0x2fe>
 8007890:	2310      	movs	r3, #16
 8007892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007896:	e042      	b.n	800791e <UART_SetConfig+0x2fe>
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a17      	ldr	r2, [pc, #92]	@ (80078fc <UART_SetConfig+0x2dc>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d13a      	bne.n	8007918 <UART_SetConfig+0x2f8>
 80078a2:	4b18      	ldr	r3, [pc, #96]	@ (8007904 <UART_SetConfig+0x2e4>)
 80078a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80078ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078b0:	d01a      	beq.n	80078e8 <UART_SetConfig+0x2c8>
 80078b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078b6:	d81b      	bhi.n	80078f0 <UART_SetConfig+0x2d0>
 80078b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078bc:	d00c      	beq.n	80078d8 <UART_SetConfig+0x2b8>
 80078be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078c2:	d815      	bhi.n	80078f0 <UART_SetConfig+0x2d0>
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <UART_SetConfig+0x2b0>
 80078c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078cc:	d008      	beq.n	80078e0 <UART_SetConfig+0x2c0>
 80078ce:	e00f      	b.n	80078f0 <UART_SetConfig+0x2d0>
 80078d0:	2300      	movs	r3, #0
 80078d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078d6:	e022      	b.n	800791e <UART_SetConfig+0x2fe>
 80078d8:	2302      	movs	r3, #2
 80078da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078de:	e01e      	b.n	800791e <UART_SetConfig+0x2fe>
 80078e0:	2304      	movs	r3, #4
 80078e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e6:	e01a      	b.n	800791e <UART_SetConfig+0x2fe>
 80078e8:	2308      	movs	r3, #8
 80078ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ee:	e016      	b.n	800791e <UART_SetConfig+0x2fe>
 80078f0:	2310      	movs	r3, #16
 80078f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078f6:	e012      	b.n	800791e <UART_SetConfig+0x2fe>
 80078f8:	cfff69f3 	.word	0xcfff69f3
 80078fc:	40008000 	.word	0x40008000
 8007900:	40013800 	.word	0x40013800
 8007904:	40021000 	.word	0x40021000
 8007908:	40004400 	.word	0x40004400
 800790c:	40004800 	.word	0x40004800
 8007910:	40004c00 	.word	0x40004c00
 8007914:	40005000 	.word	0x40005000
 8007918:	2310      	movs	r3, #16
 800791a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4aae      	ldr	r2, [pc, #696]	@ (8007bdc <UART_SetConfig+0x5bc>)
 8007924:	4293      	cmp	r3, r2
 8007926:	f040 8097 	bne.w	8007a58 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800792a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800792e:	2b08      	cmp	r3, #8
 8007930:	d823      	bhi.n	800797a <UART_SetConfig+0x35a>
 8007932:	a201      	add	r2, pc, #4	@ (adr r2, 8007938 <UART_SetConfig+0x318>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	0800795d 	.word	0x0800795d
 800793c:	0800797b 	.word	0x0800797b
 8007940:	08007965 	.word	0x08007965
 8007944:	0800797b 	.word	0x0800797b
 8007948:	0800796b 	.word	0x0800796b
 800794c:	0800797b 	.word	0x0800797b
 8007950:	0800797b 	.word	0x0800797b
 8007954:	0800797b 	.word	0x0800797b
 8007958:	08007973 	.word	0x08007973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800795c:	f7fd fe4a 	bl	80055f4 <HAL_RCC_GetPCLK1Freq>
 8007960:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007962:	e010      	b.n	8007986 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007964:	4b9e      	ldr	r3, [pc, #632]	@ (8007be0 <UART_SetConfig+0x5c0>)
 8007966:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007968:	e00d      	b.n	8007986 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800796a:	f7fd fdd5 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 800796e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007970:	e009      	b.n	8007986 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007976:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007978:	e005      	b.n	8007986 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007984:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 8130 	beq.w	8007bee <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007992:	4a94      	ldr	r2, [pc, #592]	@ (8007be4 <UART_SetConfig+0x5c4>)
 8007994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007998:	461a      	mov	r2, r3
 800799a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799c:	fbb3 f3f2 	udiv	r3, r3, r2
 80079a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	4613      	mov	r3, r2
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	4413      	add	r3, r2
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d305      	bcc.n	80079be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d903      	bls.n	80079c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80079c4:	e113      	b.n	8007bee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c8:	2200      	movs	r2, #0
 80079ca:	60bb      	str	r3, [r7, #8]
 80079cc:	60fa      	str	r2, [r7, #12]
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d2:	4a84      	ldr	r2, [pc, #528]	@ (8007be4 <UART_SetConfig+0x5c4>)
 80079d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2200      	movs	r2, #0
 80079dc:	603b      	str	r3, [r7, #0]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079e8:	f7f9 f8aa 	bl	8000b40 <__aeabi_uldivmod>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	4610      	mov	r0, r2
 80079f2:	4619      	mov	r1, r3
 80079f4:	f04f 0200 	mov.w	r2, #0
 80079f8:	f04f 0300 	mov.w	r3, #0
 80079fc:	020b      	lsls	r3, r1, #8
 80079fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a02:	0202      	lsls	r2, r0, #8
 8007a04:	6979      	ldr	r1, [r7, #20]
 8007a06:	6849      	ldr	r1, [r1, #4]
 8007a08:	0849      	lsrs	r1, r1, #1
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	4605      	mov	r5, r0
 8007a10:	eb12 0804 	adds.w	r8, r2, r4
 8007a14:	eb43 0905 	adc.w	r9, r3, r5
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	469a      	mov	sl, r3
 8007a20:	4693      	mov	fp, r2
 8007a22:	4652      	mov	r2, sl
 8007a24:	465b      	mov	r3, fp
 8007a26:	4640      	mov	r0, r8
 8007a28:	4649      	mov	r1, r9
 8007a2a:	f7f9 f889 	bl	8000b40 <__aeabi_uldivmod>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	4613      	mov	r3, r2
 8007a34:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a3c:	d308      	bcc.n	8007a50 <UART_SetConfig+0x430>
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a44:	d204      	bcs.n	8007a50 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6a3a      	ldr	r2, [r7, #32]
 8007a4c:	60da      	str	r2, [r3, #12]
 8007a4e:	e0ce      	b.n	8007bee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a56:	e0ca      	b.n	8007bee <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a60:	d166      	bne.n	8007b30 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007a62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a66:	2b08      	cmp	r3, #8
 8007a68:	d827      	bhi.n	8007aba <UART_SetConfig+0x49a>
 8007a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a70 <UART_SetConfig+0x450>)
 8007a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a70:	08007a95 	.word	0x08007a95
 8007a74:	08007a9d 	.word	0x08007a9d
 8007a78:	08007aa5 	.word	0x08007aa5
 8007a7c:	08007abb 	.word	0x08007abb
 8007a80:	08007aab 	.word	0x08007aab
 8007a84:	08007abb 	.word	0x08007abb
 8007a88:	08007abb 	.word	0x08007abb
 8007a8c:	08007abb 	.word	0x08007abb
 8007a90:	08007ab3 	.word	0x08007ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a94:	f7fd fdae 	bl	80055f4 <HAL_RCC_GetPCLK1Freq>
 8007a98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a9a:	e014      	b.n	8007ac6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a9c:	f7fd fdc0 	bl	8005620 <HAL_RCC_GetPCLK2Freq>
 8007aa0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007aa2:	e010      	b.n	8007ac6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007aa4:	4b4e      	ldr	r3, [pc, #312]	@ (8007be0 <UART_SetConfig+0x5c0>)
 8007aa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007aa8:	e00d      	b.n	8007ac6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aaa:	f7fd fd35 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 8007aae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ab0:	e009      	b.n	8007ac6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ab8:	e005      	b.n	8007ac6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ac4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 8090 	beq.w	8007bee <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad2:	4a44      	ldr	r2, [pc, #272]	@ (8007be4 <UART_SetConfig+0x5c4>)
 8007ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ae0:	005a      	lsls	r2, r3, #1
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	085b      	lsrs	r3, r3, #1
 8007ae8:	441a      	add	r2, r3
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	2b0f      	cmp	r3, #15
 8007af8:	d916      	bls.n	8007b28 <UART_SetConfig+0x508>
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b00:	d212      	bcs.n	8007b28 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	f023 030f 	bic.w	r3, r3, #15
 8007b0a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	085b      	lsrs	r3, r3, #1
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	f003 0307 	and.w	r3, r3, #7
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	8bfb      	ldrh	r3, [r7, #30]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	8bfa      	ldrh	r2, [r7, #30]
 8007b24:	60da      	str	r2, [r3, #12]
 8007b26:	e062      	b.n	8007bee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b2e:	e05e      	b.n	8007bee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b34:	2b08      	cmp	r3, #8
 8007b36:	d828      	bhi.n	8007b8a <UART_SetConfig+0x56a>
 8007b38:	a201      	add	r2, pc, #4	@ (adr r2, 8007b40 <UART_SetConfig+0x520>)
 8007b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3e:	bf00      	nop
 8007b40:	08007b65 	.word	0x08007b65
 8007b44:	08007b6d 	.word	0x08007b6d
 8007b48:	08007b75 	.word	0x08007b75
 8007b4c:	08007b8b 	.word	0x08007b8b
 8007b50:	08007b7b 	.word	0x08007b7b
 8007b54:	08007b8b 	.word	0x08007b8b
 8007b58:	08007b8b 	.word	0x08007b8b
 8007b5c:	08007b8b 	.word	0x08007b8b
 8007b60:	08007b83 	.word	0x08007b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b64:	f7fd fd46 	bl	80055f4 <HAL_RCC_GetPCLK1Freq>
 8007b68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b6a:	e014      	b.n	8007b96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b6c:	f7fd fd58 	bl	8005620 <HAL_RCC_GetPCLK2Freq>
 8007b70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b72:	e010      	b.n	8007b96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b74:	4b1a      	ldr	r3, [pc, #104]	@ (8007be0 <UART_SetConfig+0x5c0>)
 8007b76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b78:	e00d      	b.n	8007b96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b7a:	f7fd fccd 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 8007b7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b80:	e009      	b.n	8007b96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b88:	e005      	b.n	8007b96 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b94:	bf00      	nop
    }

    if (pclk != 0U)
 8007b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d028      	beq.n	8007bee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba0:	4a10      	ldr	r2, [pc, #64]	@ (8007be4 <UART_SetConfig+0x5c4>)
 8007ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007baa:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	085b      	lsrs	r3, r3, #1
 8007bb4:	441a      	add	r2, r3
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	2b0f      	cmp	r3, #15
 8007bc4:	d910      	bls.n	8007be8 <UART_SetConfig+0x5c8>
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bcc:	d20c      	bcs.n	8007be8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	60da      	str	r2, [r3, #12]
 8007bd8:	e009      	b.n	8007bee <UART_SetConfig+0x5ce>
 8007bda:	bf00      	nop
 8007bdc:	40008000 	.word	0x40008000
 8007be0:	00f42400 	.word	0x00f42400
 8007be4:	080085d0 	.word	0x080085d0
      }
      else
      {
        ret = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2200      	movs	r2, #0
 8007c02:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	2200      	movs	r2, #0
 8007c08:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007c0a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3730      	adds	r7, #48	@ 0x30
 8007c12:	46bd      	mov	sp, r7
 8007c14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007c18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c24:	f003 0308 	and.w	r3, r3, #8
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00a      	beq.n	8007c42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	430a      	orrs	r2, r1
 8007c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00a      	beq.n	8007c86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8a:	f003 0304 	and.w	r3, r3, #4
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00a      	beq.n	8007ca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cac:	f003 0310 	and.w	r3, r3, #16
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00a      	beq.n	8007cca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d01a      	beq.n	8007d2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d16:	d10a      	bne.n	8007d2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00a      	beq.n	8007d50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	605a      	str	r2, [r3, #4]
  }
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b098      	sub	sp, #96	@ 0x60
 8007d60:	af02      	add	r7, sp, #8
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d6c:	f7fa fa42 	bl	80021f4 <HAL_GetTick>
 8007d70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0308 	and.w	r3, r3, #8
 8007d7c:	2b08      	cmp	r3, #8
 8007d7e:	d12f      	bne.n	8007de0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f88e 	bl	8007eb0 <UART_WaitOnFlagUntilTimeout>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d022      	beq.n	8007de0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da2:	e853 3f00 	ldrex	r3, [r3]
 8007da6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007daa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e6      	bne.n	8007d9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e063      	b.n	8007ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0304 	and.w	r3, r3, #4
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d149      	bne.n	8007e82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007df6:	2200      	movs	r2, #0
 8007df8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f857 	bl	8007eb0 <UART_WaitOnFlagUntilTimeout>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d03c      	beq.n	8007e82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	623b      	str	r3, [r7, #32]
   return(result);
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	461a      	mov	r2, r3
 8007e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e6      	bne.n	8007e08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3308      	adds	r3, #8
 8007e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f023 0301 	bic.w	r3, r3, #1
 8007e50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3308      	adds	r3, #8
 8007e58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e5a:	61fa      	str	r2, [r7, #28]
 8007e5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	69b9      	ldr	r1, [r7, #24]
 8007e60:	69fa      	ldr	r2, [r7, #28]
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	617b      	str	r3, [r7, #20]
   return(result);
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e5      	bne.n	8007e3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e012      	b.n	8007ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3758      	adds	r7, #88	@ 0x58
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ec0:	e04f      	b.n	8007f62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec8:	d04b      	beq.n	8007f62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eca:	f7fa f993 	bl	80021f4 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d302      	bcc.n	8007ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e04e      	b.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0304 	and.w	r3, r3, #4
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d037      	beq.n	8007f62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2b80      	cmp	r3, #128	@ 0x80
 8007ef6:	d034      	beq.n	8007f62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b40      	cmp	r3, #64	@ 0x40
 8007efc:	d031      	beq.n	8007f62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	f003 0308 	and.w	r3, r3, #8
 8007f08:	2b08      	cmp	r3, #8
 8007f0a:	d110      	bne.n	8007f2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2208      	movs	r2, #8
 8007f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 f838 	bl	8007f8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2208      	movs	r2, #8
 8007f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e029      	b.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	69db      	ldr	r3, [r3, #28]
 8007f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f3c:	d111      	bne.n	8007f62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f81e 	bl	8007f8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e00f      	b.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	69da      	ldr	r2, [r3, #28]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	bf0c      	ite	eq
 8007f72:	2301      	moveq	r3, #1
 8007f74:	2300      	movne	r3, #0
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	461a      	mov	r2, r3
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d0a0      	beq.n	8007ec2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b095      	sub	sp, #84	@ 0x54
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9a:	e853 3f00 	ldrex	r3, [r3]
 8007f9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	461a      	mov	r2, r3
 8007fae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fb2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fb8:	e841 2300 	strex	r3, r2, [r1]
 8007fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e6      	bne.n	8007f92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3308      	adds	r3, #8
 8007fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	e853 3f00 	ldrex	r3, [r3]
 8007fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fda:	f023 0301 	bic.w	r3, r3, #1
 8007fde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fe8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e3      	bne.n	8007fc4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008000:	2b01      	cmp	r3, #1
 8008002:	d118      	bne.n	8008036 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	e853 3f00 	ldrex	r3, [r3]
 8008010:	60bb      	str	r3, [r7, #8]
   return(result);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	f023 0310 	bic.w	r3, r3, #16
 8008018:	647b      	str	r3, [r7, #68]	@ 0x44
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008022:	61bb      	str	r3, [r7, #24]
 8008024:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6979      	ldr	r1, [r7, #20]
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	613b      	str	r3, [r7, #16]
   return(result);
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e6      	bne.n	8008004 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800804a:	bf00      	nop
 800804c:	3754      	adds	r7, #84	@ 0x54
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008056:	b480      	push	{r7}
 8008058:	b085      	sub	sp, #20
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008064:	2b01      	cmp	r3, #1
 8008066:	d101      	bne.n	800806c <HAL_UARTEx_DisableFifoMode+0x16>
 8008068:	2302      	movs	r3, #2
 800806a:	e027      	b.n	80080bc <HAL_UARTEx_DisableFifoMode+0x66>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2224      	movs	r2, #36	@ 0x24
 8008078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0201 	bic.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800809a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d101      	bne.n	80080e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080dc:	2302      	movs	r3, #2
 80080de:	e02d      	b.n	800813c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2224      	movs	r2, #36	@ 0x24
 80080ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 0201 	bic.w	r2, r2, #1
 8008106:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f84f 	bl	80081c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2220      	movs	r2, #32
 800812e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008154:	2b01      	cmp	r3, #1
 8008156:	d101      	bne.n	800815c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008158:	2302      	movs	r3, #2
 800815a:	e02d      	b.n	80081b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2224      	movs	r2, #36	@ 0x24
 8008168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f022 0201 	bic.w	r2, r2, #1
 8008182:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	430a      	orrs	r2, r1
 8008196:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f811 	bl	80081c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d108      	bne.n	80081e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081e0:	e031      	b.n	8008246 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081e2:	2308      	movs	r3, #8
 80081e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081e6:	2308      	movs	r3, #8
 80081e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	0e5b      	lsrs	r3, r3, #25
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	f003 0307 	and.w	r3, r3, #7
 80081f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	0f5b      	lsrs	r3, r3, #29
 8008202:	b2db      	uxtb	r3, r3
 8008204:	f003 0307 	and.w	r3, r3, #7
 8008208:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	7b3a      	ldrb	r2, [r7, #12]
 800820e:	4911      	ldr	r1, [pc, #68]	@ (8008254 <UARTEx_SetNbDataToProcess+0x94>)
 8008210:	5c8a      	ldrb	r2, [r1, r2]
 8008212:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008216:	7b3a      	ldrb	r2, [r7, #12]
 8008218:	490f      	ldr	r1, [pc, #60]	@ (8008258 <UARTEx_SetNbDataToProcess+0x98>)
 800821a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800821c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008220:	b29a      	uxth	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008228:	7bfb      	ldrb	r3, [r7, #15]
 800822a:	7b7a      	ldrb	r2, [r7, #13]
 800822c:	4909      	ldr	r1, [pc, #36]	@ (8008254 <UARTEx_SetNbDataToProcess+0x94>)
 800822e:	5c8a      	ldrb	r2, [r1, r2]
 8008230:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008234:	7b7a      	ldrb	r2, [r7, #13]
 8008236:	4908      	ldr	r1, [pc, #32]	@ (8008258 <UARTEx_SetNbDataToProcess+0x98>)
 8008238:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800823a:	fb93 f3f2 	sdiv	r3, r3, r2
 800823e:	b29a      	uxth	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008246:	bf00      	nop
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	080085e8 	.word	0x080085e8
 8008258:	080085f0 	.word	0x080085f0

0800825c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	ed93 7a06 	vldr	s14, [r3, #24]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008272:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	edd3 7a08 	vldr	s15, [r3, #32]
 800827c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	edd3 7a06 	vldr	s15, [r3, #24]
 800828c:	eeb1 7a67 	vneg.f32	s14, s15
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	edd3 7a08 	vldr	s15, [r3, #32]
 8008296:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800829a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a1a      	ldr	r2, [r3, #32]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d006      	beq.n	80082c0 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	330c      	adds	r3, #12
 80082b6:	220c      	movs	r2, #12
 80082b8:	2100      	movs	r1, #0
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 f804 	bl	80082c8 <memset>
  }

}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <memset>:
 80082c8:	4402      	add	r2, r0
 80082ca:	4603      	mov	r3, r0
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d100      	bne.n	80082d2 <memset+0xa>
 80082d0:	4770      	bx	lr
 80082d2:	f803 1b01 	strb.w	r1, [r3], #1
 80082d6:	e7f9      	b.n	80082cc <memset+0x4>

080082d8 <__errno>:
 80082d8:	4b01      	ldr	r3, [pc, #4]	@ (80082e0 <__errno+0x8>)
 80082da:	6818      	ldr	r0, [r3, #0]
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	2000000c 	.word	0x2000000c

080082e4 <__libc_init_array>:
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	4d0d      	ldr	r5, [pc, #52]	@ (800831c <__libc_init_array+0x38>)
 80082e8:	4c0d      	ldr	r4, [pc, #52]	@ (8008320 <__libc_init_array+0x3c>)
 80082ea:	1b64      	subs	r4, r4, r5
 80082ec:	10a4      	asrs	r4, r4, #2
 80082ee:	2600      	movs	r6, #0
 80082f0:	42a6      	cmp	r6, r4
 80082f2:	d109      	bne.n	8008308 <__libc_init_array+0x24>
 80082f4:	4d0b      	ldr	r5, [pc, #44]	@ (8008324 <__libc_init_array+0x40>)
 80082f6:	4c0c      	ldr	r4, [pc, #48]	@ (8008328 <__libc_init_array+0x44>)
 80082f8:	f000 f950 	bl	800859c <_init>
 80082fc:	1b64      	subs	r4, r4, r5
 80082fe:	10a4      	asrs	r4, r4, #2
 8008300:	2600      	movs	r6, #0
 8008302:	42a6      	cmp	r6, r4
 8008304:	d105      	bne.n	8008312 <__libc_init_array+0x2e>
 8008306:	bd70      	pop	{r4, r5, r6, pc}
 8008308:	f855 3b04 	ldr.w	r3, [r5], #4
 800830c:	4798      	blx	r3
 800830e:	3601      	adds	r6, #1
 8008310:	e7ee      	b.n	80082f0 <__libc_init_array+0xc>
 8008312:	f855 3b04 	ldr.w	r3, [r5], #4
 8008316:	4798      	blx	r3
 8008318:	3601      	adds	r6, #1
 800831a:	e7f2      	b.n	8008302 <__libc_init_array+0x1e>
 800831c:	08008610 	.word	0x08008610
 8008320:	08008610 	.word	0x08008610
 8008324:	08008610 	.word	0x08008610
 8008328:	08008614 	.word	0x08008614

0800832c <fmod>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	ed2d 8b02 	vpush	{d8}
 8008332:	ec57 6b10 	vmov	r6, r7, d0
 8008336:	ec55 4b11 	vmov	r4, r5, d1
 800833a:	f000 f825 	bl	8008388 <__ieee754_fmod>
 800833e:	4622      	mov	r2, r4
 8008340:	462b      	mov	r3, r5
 8008342:	4630      	mov	r0, r6
 8008344:	4639      	mov	r1, r7
 8008346:	eeb0 8a40 	vmov.f32	s16, s0
 800834a:	eef0 8a60 	vmov.f32	s17, s1
 800834e:	f7f8 fbb9 	bl	8000ac4 <__aeabi_dcmpun>
 8008352:	b990      	cbnz	r0, 800837a <fmod+0x4e>
 8008354:	2200      	movs	r2, #0
 8008356:	2300      	movs	r3, #0
 8008358:	4620      	mov	r0, r4
 800835a:	4629      	mov	r1, r5
 800835c:	f7f8 fb80 	bl	8000a60 <__aeabi_dcmpeq>
 8008360:	b158      	cbz	r0, 800837a <fmod+0x4e>
 8008362:	f7ff ffb9 	bl	80082d8 <__errno>
 8008366:	2321      	movs	r3, #33	@ 0x21
 8008368:	6003      	str	r3, [r0, #0]
 800836a:	2200      	movs	r2, #0
 800836c:	2300      	movs	r3, #0
 800836e:	4610      	mov	r0, r2
 8008370:	4619      	mov	r1, r3
 8008372:	f7f8 fa37 	bl	80007e4 <__aeabi_ddiv>
 8008376:	ec41 0b18 	vmov	d8, r0, r1
 800837a:	eeb0 0a48 	vmov.f32	s0, s16
 800837e:	eef0 0a68 	vmov.f32	s1, s17
 8008382:	ecbd 8b02 	vpop	{d8}
 8008386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008388 <__ieee754_fmod>:
 8008388:	ec53 2b11 	vmov	r2, r3, d1
 800838c:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8008390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008394:	ea52 040c 	orrs.w	r4, r2, ip
 8008398:	ec51 0b10 	vmov	r0, r1, d0
 800839c:	461e      	mov	r6, r3
 800839e:	4617      	mov	r7, r2
 80083a0:	4696      	mov	lr, r2
 80083a2:	d00c      	beq.n	80083be <__ieee754_fmod+0x36>
 80083a4:	4c77      	ldr	r4, [pc, #476]	@ (8008584 <__ieee754_fmod+0x1fc>)
 80083a6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80083aa:	45a0      	cmp	r8, r4
 80083ac:	4689      	mov	r9, r1
 80083ae:	d806      	bhi.n	80083be <__ieee754_fmod+0x36>
 80083b0:	4254      	negs	r4, r2
 80083b2:	4d75      	ldr	r5, [pc, #468]	@ (8008588 <__ieee754_fmod+0x200>)
 80083b4:	4314      	orrs	r4, r2
 80083b6:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 80083ba:	42ac      	cmp	r4, r5
 80083bc:	d909      	bls.n	80083d2 <__ieee754_fmod+0x4a>
 80083be:	f7f8 f8e7 	bl	8000590 <__aeabi_dmul>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	f7f8 fa0d 	bl	80007e4 <__aeabi_ddiv>
 80083ca:	ec41 0b10 	vmov	d0, r0, r1
 80083ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d2:	45e0      	cmp	r8, ip
 80083d4:	4682      	mov	sl, r0
 80083d6:	4604      	mov	r4, r0
 80083d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80083dc:	dc09      	bgt.n	80083f2 <__ieee754_fmod+0x6a>
 80083de:	dbf4      	blt.n	80083ca <__ieee754_fmod+0x42>
 80083e0:	4282      	cmp	r2, r0
 80083e2:	d8f2      	bhi.n	80083ca <__ieee754_fmod+0x42>
 80083e4:	d105      	bne.n	80083f2 <__ieee754_fmod+0x6a>
 80083e6:	4b69      	ldr	r3, [pc, #420]	@ (800858c <__ieee754_fmod+0x204>)
 80083e8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80083ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083f0:	e7eb      	b.n	80083ca <__ieee754_fmod+0x42>
 80083f2:	4a65      	ldr	r2, [pc, #404]	@ (8008588 <__ieee754_fmod+0x200>)
 80083f4:	ea19 0f02 	tst.w	r9, r2
 80083f8:	d148      	bne.n	800848c <__ieee754_fmod+0x104>
 80083fa:	f1b8 0f00 	cmp.w	r8, #0
 80083fe:	d13d      	bne.n	800847c <__ieee754_fmod+0xf4>
 8008400:	4963      	ldr	r1, [pc, #396]	@ (8008590 <__ieee754_fmod+0x208>)
 8008402:	4653      	mov	r3, sl
 8008404:	2b00      	cmp	r3, #0
 8008406:	dc36      	bgt.n	8008476 <__ieee754_fmod+0xee>
 8008408:	4216      	tst	r6, r2
 800840a:	d14f      	bne.n	80084ac <__ieee754_fmod+0x124>
 800840c:	f1bc 0f00 	cmp.w	ip, #0
 8008410:	d144      	bne.n	800849c <__ieee754_fmod+0x114>
 8008412:	4a5f      	ldr	r2, [pc, #380]	@ (8008590 <__ieee754_fmod+0x208>)
 8008414:	463b      	mov	r3, r7
 8008416:	2b00      	cmp	r3, #0
 8008418:	dc3d      	bgt.n	8008496 <__ieee754_fmod+0x10e>
 800841a:	485e      	ldr	r0, [pc, #376]	@ (8008594 <__ieee754_fmod+0x20c>)
 800841c:	4281      	cmp	r1, r0
 800841e:	db4a      	blt.n	80084b6 <__ieee754_fmod+0x12e>
 8008420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008424:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008428:	485a      	ldr	r0, [pc, #360]	@ (8008594 <__ieee754_fmod+0x20c>)
 800842a:	4282      	cmp	r2, r0
 800842c:	db57      	blt.n	80084de <__ieee754_fmod+0x156>
 800842e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8008432:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8008436:	1a89      	subs	r1, r1, r2
 8008438:	1b98      	subs	r0, r3, r6
 800843a:	eba4 070e 	sub.w	r7, r4, lr
 800843e:	2900      	cmp	r1, #0
 8008440:	d162      	bne.n	8008508 <__ieee754_fmod+0x180>
 8008442:	4574      	cmp	r4, lr
 8008444:	bf38      	it	cc
 8008446:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800844a:	2800      	cmp	r0, #0
 800844c:	bfa4      	itt	ge
 800844e:	463c      	movge	r4, r7
 8008450:	4603      	movge	r3, r0
 8008452:	ea53 0104 	orrs.w	r1, r3, r4
 8008456:	d0c6      	beq.n	80083e6 <__ieee754_fmod+0x5e>
 8008458:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800845c:	db69      	blt.n	8008532 <__ieee754_fmod+0x1aa>
 800845e:	494d      	ldr	r1, [pc, #308]	@ (8008594 <__ieee754_fmod+0x20c>)
 8008460:	428a      	cmp	r2, r1
 8008462:	db6c      	blt.n	800853e <__ieee754_fmod+0x1b6>
 8008464:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008468:	432b      	orrs	r3, r5
 800846a:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800846e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008472:	4620      	mov	r0, r4
 8008474:	e7a9      	b.n	80083ca <__ieee754_fmod+0x42>
 8008476:	3901      	subs	r1, #1
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	e7c3      	b.n	8008404 <__ieee754_fmod+0x7c>
 800847c:	4945      	ldr	r1, [pc, #276]	@ (8008594 <__ieee754_fmod+0x20c>)
 800847e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8008482:	2b00      	cmp	r3, #0
 8008484:	ddc0      	ble.n	8008408 <__ieee754_fmod+0x80>
 8008486:	3901      	subs	r1, #1
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	e7fa      	b.n	8008482 <__ieee754_fmod+0xfa>
 800848c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8008490:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008494:	e7b8      	b.n	8008408 <__ieee754_fmod+0x80>
 8008496:	3a01      	subs	r2, #1
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	e7bc      	b.n	8008416 <__ieee754_fmod+0x8e>
 800849c:	4a3d      	ldr	r2, [pc, #244]	@ (8008594 <__ieee754_fmod+0x20c>)
 800849e:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	ddb9      	ble.n	800841a <__ieee754_fmod+0x92>
 80084a6:	3a01      	subs	r2, #1
 80084a8:	005b      	lsls	r3, r3, #1
 80084aa:	e7fa      	b.n	80084a2 <__ieee754_fmod+0x11a>
 80084ac:	ea4f 522c 	mov.w	r2, ip, asr #20
 80084b0:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80084b4:	e7b1      	b.n	800841a <__ieee754_fmod+0x92>
 80084b6:	1a40      	subs	r0, r0, r1
 80084b8:	281f      	cmp	r0, #31
 80084ba:	dc0a      	bgt.n	80084d2 <__ieee754_fmod+0x14a>
 80084bc:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 80084c0:	fa08 f800 	lsl.w	r8, r8, r0
 80084c4:	fa2a f303 	lsr.w	r3, sl, r3
 80084c8:	ea43 0308 	orr.w	r3, r3, r8
 80084cc:	fa0a f400 	lsl.w	r4, sl, r0
 80084d0:	e7aa      	b.n	8008428 <__ieee754_fmod+0xa0>
 80084d2:	4b31      	ldr	r3, [pc, #196]	@ (8008598 <__ieee754_fmod+0x210>)
 80084d4:	1a5b      	subs	r3, r3, r1
 80084d6:	fa0a f303 	lsl.w	r3, sl, r3
 80084da:	2400      	movs	r4, #0
 80084dc:	e7a4      	b.n	8008428 <__ieee754_fmod+0xa0>
 80084de:	1a80      	subs	r0, r0, r2
 80084e0:	281f      	cmp	r0, #31
 80084e2:	dc0a      	bgt.n	80084fa <__ieee754_fmod+0x172>
 80084e4:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 80084e8:	fa0c fc00 	lsl.w	ip, ip, r0
 80084ec:	fa27 f606 	lsr.w	r6, r7, r6
 80084f0:	ea46 060c 	orr.w	r6, r6, ip
 80084f4:	fa07 fe00 	lsl.w	lr, r7, r0
 80084f8:	e79d      	b.n	8008436 <__ieee754_fmod+0xae>
 80084fa:	4e27      	ldr	r6, [pc, #156]	@ (8008598 <__ieee754_fmod+0x210>)
 80084fc:	1ab6      	subs	r6, r6, r2
 80084fe:	fa07 f606 	lsl.w	r6, r7, r6
 8008502:	f04f 0e00 	mov.w	lr, #0
 8008506:	e796      	b.n	8008436 <__ieee754_fmod+0xae>
 8008508:	4574      	cmp	r4, lr
 800850a:	bf38      	it	cc
 800850c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8008510:	2800      	cmp	r0, #0
 8008512:	da05      	bge.n	8008520 <__ieee754_fmod+0x198>
 8008514:	0fe0      	lsrs	r0, r4, #31
 8008516:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800851a:	0064      	lsls	r4, r4, #1
 800851c:	3901      	subs	r1, #1
 800851e:	e78b      	b.n	8008438 <__ieee754_fmod+0xb0>
 8008520:	ea50 0307 	orrs.w	r3, r0, r7
 8008524:	f43f af5f 	beq.w	80083e6 <__ieee754_fmod+0x5e>
 8008528:	0ffb      	lsrs	r3, r7, #31
 800852a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800852e:	007c      	lsls	r4, r7, #1
 8008530:	e7f4      	b.n	800851c <__ieee754_fmod+0x194>
 8008532:	0fe1      	lsrs	r1, r4, #31
 8008534:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008538:	0064      	lsls	r4, r4, #1
 800853a:	3a01      	subs	r2, #1
 800853c:	e78c      	b.n	8008458 <__ieee754_fmod+0xd0>
 800853e:	1a89      	subs	r1, r1, r2
 8008540:	2914      	cmp	r1, #20
 8008542:	dc0a      	bgt.n	800855a <__ieee754_fmod+0x1d2>
 8008544:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8008548:	fa03 f202 	lsl.w	r2, r3, r2
 800854c:	40cc      	lsrs	r4, r1
 800854e:	4322      	orrs	r2, r4
 8008550:	410b      	asrs	r3, r1
 8008552:	ea43 0105 	orr.w	r1, r3, r5
 8008556:	4610      	mov	r0, r2
 8008558:	e737      	b.n	80083ca <__ieee754_fmod+0x42>
 800855a:	291f      	cmp	r1, #31
 800855c:	dc07      	bgt.n	800856e <__ieee754_fmod+0x1e6>
 800855e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8008562:	40cc      	lsrs	r4, r1
 8008564:	fa03 f202 	lsl.w	r2, r3, r2
 8008568:	4322      	orrs	r2, r4
 800856a:	462b      	mov	r3, r5
 800856c:	e7f1      	b.n	8008552 <__ieee754_fmod+0x1ca>
 800856e:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8008572:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8008576:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800857a:	32e2      	adds	r2, #226	@ 0xe2
 800857c:	fa43 f202 	asr.w	r2, r3, r2
 8008580:	e7f3      	b.n	800856a <__ieee754_fmod+0x1e2>
 8008582:	bf00      	nop
 8008584:	7fefffff 	.word	0x7fefffff
 8008588:	7ff00000 	.word	0x7ff00000
 800858c:	080085f8 	.word	0x080085f8
 8008590:	fffffbed 	.word	0xfffffbed
 8008594:	fffffc02 	.word	0xfffffc02
 8008598:	fffffbe2 	.word	0xfffffbe2

0800859c <_init>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	bf00      	nop
 80085a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a2:	bc08      	pop	{r3}
 80085a4:	469e      	mov	lr, r3
 80085a6:	4770      	bx	lr

080085a8 <_fini>:
 80085a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085aa:	bf00      	nop
 80085ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ae:	bc08      	pop	{r3}
 80085b0:	469e      	mov	lr, r3
 80085b2:	4770      	bx	lr
