
LAB_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a518  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800a6f0  0800a6f0  0000b6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a740  0800a740  0000c05c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a740  0800a740  0000b740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a748  0800a748  0000c05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a748  0800a748  0000b748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a74c  0800a74c  0000b74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800a750  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000069c  20000060  0800a7ac  0000c060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800a7ac  0000c6fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a25  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d22  00000000  00000000  00024ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  000277d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010d6  00000000  00000000  00028d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fa2  00000000  00000000  00029e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d89  00000000  00000000  00052db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114869  00000000  00000000  0006bb39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001803a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060a0  00000000  00000000  001803e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00186488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a6d8 	.word	0x0800a6d8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	0800a6d8 	.word	0x0800a6d8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b96a 	b.w	8000e6c <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	460c      	mov	r4, r1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d14e      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	458c      	cmp	ip, r1
 8000bc0:	4686      	mov	lr, r0
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	d962      	bls.n	8000c8e <__udivmoddi4+0xde>
 8000bc8:	b14a      	cbz	r2, 8000bde <__udivmoddi4+0x2e>
 8000bca:	f1c2 0320 	rsb	r3, r2, #32
 8000bce:	4091      	lsls	r1, r2
 8000bd0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd8:	4319      	orrs	r1, r3
 8000bda:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f f68c 	uxth.w	r6, ip
 8000be6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bee:	fb07 1114 	mls	r1, r7, r4, r1
 8000bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf6:	fb04 f106 	mul.w	r1, r4, r6
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c06:	f080 8112 	bcs.w	8000e2e <__udivmoddi4+0x27e>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 810f 	bls.w	8000e2e <__udivmoddi4+0x27e>
 8000c10:	3c02      	subs	r4, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a59      	subs	r1, r3, r1
 8000c16:	fa1f f38e 	uxth.w	r3, lr
 8000c1a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c26:	fb00 f606 	mul.w	r6, r0, r6
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	d90a      	bls.n	8000c44 <__udivmoddi4+0x94>
 8000c2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c32:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c36:	f080 80fc 	bcs.w	8000e32 <__udivmoddi4+0x282>
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	f240 80f9 	bls.w	8000e32 <__udivmoddi4+0x282>
 8000c40:	4463      	add	r3, ip
 8000c42:	3802      	subs	r0, #2
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	b11d      	cbz	r5, 8000c56 <__udivmoddi4+0xa6>
 8000c4e:	40d3      	lsrs	r3, r2
 8000c50:	2200      	movs	r2, #0
 8000c52:	e9c5 3200 	strd	r3, r2, [r5]
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d905      	bls.n	8000c6a <__udivmoddi4+0xba>
 8000c5e:	b10d      	cbz	r5, 8000c64 <__udivmoddi4+0xb4>
 8000c60:	e9c5 0100 	strd	r0, r1, [r5]
 8000c64:	2100      	movs	r1, #0
 8000c66:	4608      	mov	r0, r1
 8000c68:	e7f5      	b.n	8000c56 <__udivmoddi4+0xa6>
 8000c6a:	fab3 f183 	clz	r1, r3
 8000c6e:	2900      	cmp	r1, #0
 8000c70:	d146      	bne.n	8000d00 <__udivmoddi4+0x150>
 8000c72:	42a3      	cmp	r3, r4
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xcc>
 8000c76:	4290      	cmp	r0, r2
 8000c78:	f0c0 80f0 	bcc.w	8000e5c <__udivmoddi4+0x2ac>
 8000c7c:	1a86      	subs	r6, r0, r2
 8000c7e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	d0e6      	beq.n	8000c56 <__udivmoddi4+0xa6>
 8000c88:	e9c5 6300 	strd	r6, r3, [r5]
 8000c8c:	e7e3      	b.n	8000c56 <__udivmoddi4+0xa6>
 8000c8e:	2a00      	cmp	r2, #0
 8000c90:	f040 8090 	bne.w	8000db4 <__udivmoddi4+0x204>
 8000c94:	eba1 040c 	sub.w	r4, r1, ip
 8000c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c9c:	fa1f f78c 	uxth.w	r7, ip
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ca6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000caa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb2:	fb07 f006 	mul.w	r0, r7, r6
 8000cb6:	4298      	cmp	r0, r3
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x11c>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x11a>
 8000cc4:	4298      	cmp	r0, r3
 8000cc6:	f200 80cd 	bhi.w	8000e64 <__udivmoddi4+0x2b4>
 8000cca:	4626      	mov	r6, r4
 8000ccc:	1a1c      	subs	r4, r3, r0
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cd6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cde:	fb00 f707 	mul.w	r7, r0, r7
 8000ce2:	429f      	cmp	r7, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x148>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x146>
 8000cf0:	429f      	cmp	r7, r3
 8000cf2:	f200 80b0 	bhi.w	8000e56 <__udivmoddi4+0x2a6>
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	1bdb      	subs	r3, r3, r7
 8000cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfe:	e7a5      	b.n	8000c4c <__udivmoddi4+0x9c>
 8000d00:	f1c1 0620 	rsb	r6, r1, #32
 8000d04:	408b      	lsls	r3, r1
 8000d06:	fa22 f706 	lsr.w	r7, r2, r6
 8000d0a:	431f      	orrs	r7, r3
 8000d0c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d10:	fa04 f301 	lsl.w	r3, r4, r1
 8000d14:	ea43 030c 	orr.w	r3, r3, ip
 8000d18:	40f4      	lsrs	r4, r6
 8000d1a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1e:	0c38      	lsrs	r0, r7, #16
 8000d20:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d24:	fbb4 fef0 	udiv	lr, r4, r0
 8000d28:	fa1f fc87 	uxth.w	ip, r7
 8000d2c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d30:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d34:	fb0e f90c 	mul.w	r9, lr, ip
 8000d38:	45a1      	cmp	r9, r4
 8000d3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x1a6>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d46:	f080 8084 	bcs.w	8000e52 <__udivmoddi4+0x2a2>
 8000d4a:	45a1      	cmp	r9, r4
 8000d4c:	f240 8081 	bls.w	8000e52 <__udivmoddi4+0x2a2>
 8000d50:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	eba4 0409 	sub.w	r4, r4, r9
 8000d5a:	fa1f f983 	uxth.w	r9, r3
 8000d5e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d62:	fb00 4413 	mls	r4, r0, r3, r4
 8000d66:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6e:	45a4      	cmp	ip, r4
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x1d2>
 8000d72:	193c      	adds	r4, r7, r4
 8000d74:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d78:	d267      	bcs.n	8000e4a <__udivmoddi4+0x29a>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	d965      	bls.n	8000e4a <__udivmoddi4+0x29a>
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d86:	fba0 9302 	umull	r9, r3, r0, r2
 8000d8a:	eba4 040c 	sub.w	r4, r4, ip
 8000d8e:	429c      	cmp	r4, r3
 8000d90:	46ce      	mov	lr, r9
 8000d92:	469c      	mov	ip, r3
 8000d94:	d351      	bcc.n	8000e3a <__udivmoddi4+0x28a>
 8000d96:	d04e      	beq.n	8000e36 <__udivmoddi4+0x286>
 8000d98:	b155      	cbz	r5, 8000db0 <__udivmoddi4+0x200>
 8000d9a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d9e:	eb64 040c 	sbc.w	r4, r4, ip
 8000da2:	fa04 f606 	lsl.w	r6, r4, r6
 8000da6:	40cb      	lsrs	r3, r1
 8000da8:	431e      	orrs	r6, r3
 8000daa:	40cc      	lsrs	r4, r1
 8000dac:	e9c5 6400 	strd	r6, r4, [r5]
 8000db0:	2100      	movs	r1, #0
 8000db2:	e750      	b.n	8000c56 <__udivmoddi4+0xa6>
 8000db4:	f1c2 0320 	rsb	r3, r2, #32
 8000db8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc4:	4094      	lsls	r4, r2
 8000dc6:	430c      	orrs	r4, r1
 8000dc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dcc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd0:	fa1f f78c 	uxth.w	r7, ip
 8000dd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd8:	fb08 3110 	mls	r1, r8, r0, r3
 8000ddc:	0c23      	lsrs	r3, r4, #16
 8000dde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de2:	fb00 f107 	mul.w	r1, r0, r7
 8000de6:	4299      	cmp	r1, r3
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x24c>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f100 36ff 	add.w	r6, r0, #4294967295
 8000df2:	d22c      	bcs.n	8000e4e <__udivmoddi4+0x29e>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	d92a      	bls.n	8000e4e <__udivmoddi4+0x29e>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e04:	fb08 3311 	mls	r3, r8, r1, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb01 f307 	mul.w	r3, r1, r7
 8000e10:	42a3      	cmp	r3, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x276>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e1c:	d213      	bcs.n	8000e46 <__udivmoddi4+0x296>
 8000e1e:	42a3      	cmp	r3, r4
 8000e20:	d911      	bls.n	8000e46 <__udivmoddi4+0x296>
 8000e22:	3902      	subs	r1, #2
 8000e24:	4464      	add	r4, ip
 8000e26:	1ae4      	subs	r4, r4, r3
 8000e28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e2c:	e739      	b.n	8000ca2 <__udivmoddi4+0xf2>
 8000e2e:	4604      	mov	r4, r0
 8000e30:	e6f0      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e32:	4608      	mov	r0, r1
 8000e34:	e706      	b.n	8000c44 <__udivmoddi4+0x94>
 8000e36:	45c8      	cmp	r8, r9
 8000e38:	d2ae      	bcs.n	8000d98 <__udivmoddi4+0x1e8>
 8000e3a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e3e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e42:	3801      	subs	r0, #1
 8000e44:	e7a8      	b.n	8000d98 <__udivmoddi4+0x1e8>
 8000e46:	4631      	mov	r1, r6
 8000e48:	e7ed      	b.n	8000e26 <__udivmoddi4+0x276>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	e799      	b.n	8000d82 <__udivmoddi4+0x1d2>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e7d4      	b.n	8000dfc <__udivmoddi4+0x24c>
 8000e52:	46d6      	mov	lr, sl
 8000e54:	e77f      	b.n	8000d56 <__udivmoddi4+0x1a6>
 8000e56:	4463      	add	r3, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e74d      	b.n	8000cf8 <__udivmoddi4+0x148>
 8000e5c:	4606      	mov	r6, r0
 8000e5e:	4623      	mov	r3, r4
 8000e60:	4608      	mov	r0, r1
 8000e62:	e70f      	b.n	8000c84 <__udivmoddi4+0xd4>
 8000e64:	3e02      	subs	r6, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	e730      	b.n	8000ccc <__udivmoddi4+0x11c>
 8000e6a:	bf00      	nop

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e74:	f001 fcd1 	bl	800281a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e78:	f000 f88a 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7c:	f000 fbde 	bl	800163c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e80:	f000 fb92 	bl	80015a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e84:	f000 f8d0 	bl	8001028 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000e88:	f000 fa94 	bl	80013b4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e8c:	f000 fa44 	bl	8001318 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000e90:	f000 f9e8 	bl	8001264 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000e94:	f000 fb06 	bl	80014a4 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 8000e98:	f000 f94e 	bl	8001138 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000e9c:	f000 f996 	bl	80011cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000ea0:	217f      	movs	r1, #127	@ 0x7f
 8000ea2:	482b      	ldr	r0, [pc, #172]	@ (8000f50 <main+0xe0>)
 8000ea4:	f003 fac4 	bl	8004430 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 2);
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	492a      	ldr	r1, [pc, #168]	@ (8000f54 <main+0xe4>)
 8000eac:	4828      	ldr	r0, [pc, #160]	@ (8000f50 <main+0xe0>)
 8000eae:	f002 f947 	bl	8003140 <HAL_ADC_Start_DMA>

  PID.Kp = 0.01;
 8000eb2:	4b29      	ldr	r3, [pc, #164]	@ (8000f58 <main+0xe8>)
 8000eb4:	4a29      	ldr	r2, [pc, #164]	@ (8000f5c <main+0xec>)
 8000eb6:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.0000045;
 8000eb8:	4b27      	ldr	r3, [pc, #156]	@ (8000f58 <main+0xe8>)
 8000eba:	4a29      	ldr	r2, [pc, #164]	@ (8000f60 <main+0xf0>)
 8000ebc:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.000009;
 8000ebe:	4b26      	ldr	r3, [pc, #152]	@ (8000f58 <main+0xe8>)
 8000ec0:	4a28      	ldr	r2, [pc, #160]	@ (8000f64 <main+0xf4>)
 8000ec2:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4824      	ldr	r0, [pc, #144]	@ (8000f58 <main+0xe8>)
 8000ec8:	f009 fa66 	bl	800a398 <arm_pid_init_f32>

  PID2.Kp = 0.0047;
 8000ecc:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <main+0xf8>)
 8000ece:	4a27      	ldr	r2, [pc, #156]	@ (8000f6c <main+0xfc>)
 8000ed0:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.000035;
 8000ed2:	4b25      	ldr	r3, [pc, #148]	@ (8000f68 <main+0xf8>)
 8000ed4:	4a26      	ldr	r2, [pc, #152]	@ (8000f70 <main+0x100>)
 8000ed6:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0.00041;
 8000ed8:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <main+0xf8>)
 8000eda:	4a26      	ldr	r2, [pc, #152]	@ (8000f74 <main+0x104>)
 8000edc:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4821      	ldr	r0, [pc, #132]	@ (8000f68 <main+0xf8>)
 8000ee2:	f009 fa59 	bl	800a398 <arm_pid_init_f32>

  HAL_TIM_Base_Start_IT(&htim2);
 8000ee6:	4824      	ldr	r0, [pc, #144]	@ (8000f78 <main+0x108>)
 8000ee8:	f005 fb44 	bl	8006574 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim3);
 8000eec:	4823      	ldr	r0, [pc, #140]	@ (8000f7c <main+0x10c>)
 8000eee:	f005 fad1 	bl	8006494 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4821      	ldr	r0, [pc, #132]	@ (8000f7c <main+0x10c>)
 8000ef6:	f005 fc17 	bl	8006728 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim4);
 8000efa:	4821      	ldr	r0, [pc, #132]	@ (8000f80 <main+0x110>)
 8000efc:	f005 faca 	bl	8006494 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f00:	2100      	movs	r1, #0
 8000f02:	481f      	ldr	r0, [pc, #124]	@ (8000f80 <main+0x110>)
 8000f04:	f005 fc10 	bl	8006728 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f08:	2104      	movs	r1, #4
 8000f0a:	481d      	ldr	r0, [pc, #116]	@ (8000f80 <main+0x110>)
 8000f0c:	f005 fc0c 	bl	8006728 <HAL_TIM_PWM_Start>


  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8000f10:	213c      	movs	r1, #60	@ 0x3c
 8000f12:	481c      	ldr	r0, [pc, #112]	@ (8000f84 <main+0x114>)
 8000f14:	f005 fdc0 	bl	8006a98 <HAL_TIM_Encoder_Start>

  UARTReci();
 8000f18:	f001 f832 	bl	8001f80 <UARTReci>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_set);
	  if(Mode == 0){
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <main+0x118>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <main+0xba>
		  Part_I_PID_ADC();
 8000f24:	f000 fd0c 	bl	8001940 <Part_I_PID_ADC>
 8000f28:	e7f8      	b.n	8000f1c <main+0xac>
	  }
	  else if(Mode == 1){
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <main+0x118>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d107      	bne.n	8000f42 <main+0xd2>
		  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim1);
 8000f32:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <main+0x114>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f38:	4a14      	ldr	r2, [pc, #80]	@ (8000f8c <main+0x11c>)
 8000f3a:	6013      	str	r3, [r2, #0]
		  Part_II_QEI();
 8000f3c:	f000 fe10 	bl	8001b60 <Part_II_QEI>
 8000f40:	e7ec      	b.n	8000f1c <main+0xac>
	  }
	  else if(Mode == 2){
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <main+0x118>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d1e8      	bne.n	8000f1c <main+0xac>
		  Part_III_UART();
 8000f4a:	f000 ff09 	bl	8001d60 <Part_III_UART>
	  if(Mode == 0){
 8000f4e:	e7e5      	b.n	8000f1c <main+0xac>
 8000f50:	2000007c 	.word	0x2000007c
 8000f54:	20000554 	.word	0x20000554
 8000f58:	20000558 	.word	0x20000558
 8000f5c:	3c23d70a 	.word	0x3c23d70a
 8000f60:	3696feb5 	.word	0x3696feb5
 8000f64:	3716feb5 	.word	0x3716feb5
 8000f68:	2000057c 	.word	0x2000057c
 8000f6c:	3b9a0275 	.word	0x3b9a0275
 8000f70:	3812ccf7 	.word	0x3812ccf7
 8000f74:	39d6f545 	.word	0x39d6f545
 8000f78:	2000043c 	.word	0x2000043c
 8000f7c:	20000488 	.word	0x20000488
 8000f80:	200004d4 	.word	0x200004d4
 8000f84:	200003f0 	.word	0x200003f0
 8000f88:	20000520 	.word	0x20000520
 8000f8c:	200005a0 	.word	0x200005a0

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	@ 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	2238      	movs	r2, #56	@ 0x38
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f009 fa30 	bl	800a404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f004 f9e6 	bl	8005384 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc2:	2340      	movs	r3, #64	@ 0x40
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fd2:	2355      	movs	r3, #85	@ 0x55
 8000fd4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 fa80 	bl	80054ec <HAL_RCC_OscConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ff2:	f001 f81f 	bl	8002034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2104      	movs	r1, #4
 800100e:	4618      	mov	r0, r3
 8001010:	f004 fd7e 	bl	8005b10 <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800101a:	f001 f80b 	bl	8002034 <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3750      	adds	r7, #80	@ 0x50
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	@ 0x30
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800102e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2220      	movs	r2, #32
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f009 f9df 	bl	800a404 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001046:	4b39      	ldr	r3, [pc, #228]	@ (800112c <MX_ADC1_Init+0x104>)
 8001048:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800104c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800104e:	4b37      	ldr	r3, [pc, #220]	@ (800112c <MX_ADC1_Init+0x104>)
 8001050:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001054:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001056:	4b35      	ldr	r3, [pc, #212]	@ (800112c <MX_ADC1_Init+0x104>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105c:	4b33      	ldr	r3, [pc, #204]	@ (800112c <MX_ADC1_Init+0x104>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001062:	4b32      	ldr	r3, [pc, #200]	@ (800112c <MX_ADC1_Init+0x104>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001068:	4b30      	ldr	r3, [pc, #192]	@ (800112c <MX_ADC1_Init+0x104>)
 800106a:	2201      	movs	r2, #1
 800106c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106e:	4b2f      	ldr	r3, [pc, #188]	@ (800112c <MX_ADC1_Init+0x104>)
 8001070:	2204      	movs	r2, #4
 8001072:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001074:	4b2d      	ldr	r3, [pc, #180]	@ (800112c <MX_ADC1_Init+0x104>)
 8001076:	2200      	movs	r2, #0
 8001078:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800107a:	4b2c      	ldr	r3, [pc, #176]	@ (800112c <MX_ADC1_Init+0x104>)
 800107c:	2201      	movs	r2, #1
 800107e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001080:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <MX_ADC1_Init+0x104>)
 8001082:	2202      	movs	r2, #2
 8001084:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001086:	4b29      	ldr	r3, [pc, #164]	@ (800112c <MX_ADC1_Init+0x104>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800108e:	4b27      	ldr	r3, [pc, #156]	@ (800112c <MX_ADC1_Init+0x104>)
 8001090:	2200      	movs	r2, #0
 8001092:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001094:	4b25      	ldr	r3, [pc, #148]	@ (800112c <MX_ADC1_Init+0x104>)
 8001096:	2200      	movs	r2, #0
 8001098:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800109a:	4b24      	ldr	r3, [pc, #144]	@ (800112c <MX_ADC1_Init+0x104>)
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010a2:	4b22      	ldr	r3, [pc, #136]	@ (800112c <MX_ADC1_Init+0x104>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010a8:	4b20      	ldr	r3, [pc, #128]	@ (800112c <MX_ADC1_Init+0x104>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b0:	481e      	ldr	r0, [pc, #120]	@ (800112c <MX_ADC1_Init+0x104>)
 80010b2:	f001 fe89 	bl	8002dc8 <HAL_ADC_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010bc:	f000 ffba 	bl	8002034 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c8:	4619      	mov	r1, r3
 80010ca:	4818      	ldr	r0, [pc, #96]	@ (800112c <MX_ADC1_Init+0x104>)
 80010cc:	f003 fa44 	bl	8004558 <HAL_ADCEx_MultiModeConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010d6:	f000 ffad 	bl	8002034 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_ADC1_Init+0x108>)
 80010dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010de:	2306      	movs	r3, #6
 80010e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80010e2:	2307      	movs	r3, #7
 80010e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010e6:	237f      	movs	r3, #127	@ 0x7f
 80010e8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ea:	2304      	movs	r3, #4
 80010ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	4619      	mov	r1, r3
 80010f6:	480d      	ldr	r0, [pc, #52]	@ (800112c <MX_ADC1_Init+0x104>)
 80010f8:	f002 fb7e 	bl	80037f8 <HAL_ADC_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001102:	f000 ff97 	bl	8002034 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <MX_ADC1_Init+0x10c>)
 8001108:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800110a:	230c      	movs	r3, #12
 800110c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	@ (800112c <MX_ADC1_Init+0x104>)
 8001114:	f002 fb70 	bl	80037f8 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800111e:	f000 ff89 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3730      	adds	r7, #48	@ 0x30
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000007c 	.word	0x2000007c
 8001130:	04300002 	.word	0x04300002
 8001134:	08600004 	.word	0x08600004

08001138 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800113c:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 800113e:	4a22      	ldr	r2, [pc, #136]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001140:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001142:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 8001144:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001148:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b1c      	ldr	r3, [pc, #112]	@ (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001156:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001168:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800117a:	4812      	ldr	r0, [pc, #72]	@ (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 800117c:	f006 fe38 	bl	8007df0 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001186:	f000 ff55 	bl	8002034 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118a:	2100      	movs	r1, #0
 800118c:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 800118e:	f009 f838 	bl	800a202 <HAL_UARTEx_SetTxFifoThreshold>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001198:	f000 ff4c 	bl	8002034 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119c:	2100      	movs	r1, #0
 800119e:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 80011a0:	f009 f86d 	bl	800a27e <HAL_UARTEx_SetRxFifoThreshold>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80011aa:	f000 ff43 	bl	8002034 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_LPUART1_UART_Init+0x8c>)
 80011b0:	f008 ffee 	bl	800a190 <HAL_UARTEx_DisableFifoMode>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80011ba:	f000 ff3b 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000148 	.word	0x20000148
 80011c8:	40008000 	.word	0x40008000

080011cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d0:	4b22      	ldr	r3, [pc, #136]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011d2:	4a23      	ldr	r2, [pc, #140]	@ (8001260 <MX_USART1_UART_Init+0x94>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011d6:	4b21      	ldr	r3, [pc, #132]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <MX_USART1_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_USART1_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <MX_USART1_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001214:	4811      	ldr	r0, [pc, #68]	@ (800125c <MX_USART1_UART_Init+0x90>)
 8001216:	f006 fdeb 	bl	8007df0 <HAL_UART_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001220:	f000 ff08 	bl	8002034 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001224:	2100      	movs	r1, #0
 8001226:	480d      	ldr	r0, [pc, #52]	@ (800125c <MX_USART1_UART_Init+0x90>)
 8001228:	f008 ffeb 	bl	800a202 <HAL_UARTEx_SetTxFifoThreshold>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001232:	f000 feff 	bl	8002034 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001236:	2100      	movs	r1, #0
 8001238:	4808      	ldr	r0, [pc, #32]	@ (800125c <MX_USART1_UART_Init+0x90>)
 800123a:	f009 f820 	bl	800a27e <HAL_UARTEx_SetRxFifoThreshold>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001244:	f000 fef6 	bl	8002034 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <MX_USART1_UART_Init+0x90>)
 800124a:	f008 ffa1 	bl	800a190 <HAL_UARTEx_DisableFifoMode>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001254:	f000 feee 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200001dc 	.word	0x200001dc
 8001260:	40013800 	.word	0x40013800

08001264 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	@ 0x30
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	2224      	movs	r2, #36	@ 0x24
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f009 f8c6 	bl	800a404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001282:	4b23      	ldr	r3, [pc, #140]	@ (8001310 <MX_TIM1_Init+0xac>)
 8001284:	4a23      	ldr	r2, [pc, #140]	@ (8001314 <MX_TIM1_Init+0xb0>)
 8001286:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001288:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <MX_TIM1_Init+0xac>)
 800128a:	2200      	movs	r2, #0
 800128c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <MX_TIM1_Init+0xac>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3071;
 8001294:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <MX_TIM1_Init+0xac>)
 8001296:	f640 32ff 	movw	r2, #3071	@ 0xbff
 800129a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <MX_TIM1_Init+0xac>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <MX_TIM1_Init+0xac>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <MX_TIM1_Init+0xac>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012ae:	2303      	movs	r3, #3
 80012b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012b6:	2301      	movs	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012c6:	2301      	movs	r3, #1
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4619      	mov	r1, r3
 80012d8:	480d      	ldr	r0, [pc, #52]	@ (8001310 <MX_TIM1_Init+0xac>)
 80012da:	f005 fb37 	bl	800694c <HAL_TIM_Encoder_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80012e4:	f000 fea6 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_TIM1_Init+0xac>)
 80012fa:	f006 fc9d 	bl	8007c38 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001304:	f000 fe96 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	3730      	adds	r7, #48	@ 0x30
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200003f0 	.word	0x200003f0
 8001314:	40012c00 	.word	0x40012c00

08001318 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001336:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <MX_TIM2_Init+0x98>)
 8001338:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800133c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800133e:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <MX_TIM2_Init+0x98>)
 8001340:	22a9      	movs	r2, #169	@ 0xa9
 8001342:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <MX_TIM2_Init+0x98>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800134a:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <MX_TIM2_Init+0x98>)
 800134c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001350:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001352:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <MX_TIM2_Init+0x98>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001358:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <MX_TIM2_Init+0x98>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800135e:	4814      	ldr	r0, [pc, #80]	@ (80013b0 <MX_TIM2_Init+0x98>)
 8001360:	f005 f840 	bl	80063e4 <HAL_TIM_Base_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800136a:	f000 fe63 	bl	8002034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001372:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <MX_TIM2_Init+0x98>)
 800137c:	f005 fe7e 	bl	800707c <HAL_TIM_ConfigClockSource>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001386:	f000 fe55 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <MX_TIM2_Init+0x98>)
 8001398:	f006 fc4e 	bl	8007c38 <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013a2:	f000 fe47 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	3720      	adds	r7, #32
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000043c 	.word	0x2000043c

080013b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	@ 0x38
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
 80013e2:	615a      	str	r2, [r3, #20]
 80013e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013e6:	4b2d      	ldr	r3, [pc, #180]	@ (800149c <MX_TIM3_Init+0xe8>)
 80013e8:	4a2d      	ldr	r2, [pc, #180]	@ (80014a0 <MX_TIM3_Init+0xec>)
 80013ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80013ec:	4b2b      	ldr	r3, [pc, #172]	@ (800149c <MX_TIM3_Init+0xe8>)
 80013ee:	22a9      	movs	r2, #169	@ 0xa9
 80013f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <MX_TIM3_Init+0xe8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80013f8:	4b28      	ldr	r3, [pc, #160]	@ (800149c <MX_TIM3_Init+0xe8>)
 80013fa:	f241 3287 	movw	r2, #4999	@ 0x1387
 80013fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001400:	4b26      	ldr	r3, [pc, #152]	@ (800149c <MX_TIM3_Init+0xe8>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001406:	4b25      	ldr	r3, [pc, #148]	@ (800149c <MX_TIM3_Init+0xe8>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800140c:	4823      	ldr	r0, [pc, #140]	@ (800149c <MX_TIM3_Init+0xe8>)
 800140e:	f004 ffe9 	bl	80063e4 <HAL_TIM_Base_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001418:	f000 fe0c 	bl	8002034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001422:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001426:	4619      	mov	r1, r3
 8001428:	481c      	ldr	r0, [pc, #112]	@ (800149c <MX_TIM3_Init+0xe8>)
 800142a:	f005 fe27 	bl	800707c <HAL_TIM_ConfigClockSource>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001434:	f000 fdfe 	bl	8002034 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001438:	4818      	ldr	r0, [pc, #96]	@ (800149c <MX_TIM3_Init+0xe8>)
 800143a:	f005 f913 	bl	8006664 <HAL_TIM_PWM_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001444:	f000 fdf6 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	4811      	ldr	r0, [pc, #68]	@ (800149c <MX_TIM3_Init+0xe8>)
 8001458:	f006 fbee 	bl	8007c38 <HAL_TIMEx_MasterConfigSynchronization>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001462:	f000 fde7 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001466:	2360      	movs	r3, #96	@ 0x60
 8001468:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001476:	463b      	mov	r3, r7
 8001478:	2200      	movs	r2, #0
 800147a:	4619      	mov	r1, r3
 800147c:	4807      	ldr	r0, [pc, #28]	@ (800149c <MX_TIM3_Init+0xe8>)
 800147e:	f005 fce9 	bl	8006e54 <HAL_TIM_PWM_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001488:	f000 fdd4 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800148c:	4803      	ldr	r0, [pc, #12]	@ (800149c <MX_TIM3_Init+0xe8>)
 800148e:	f001 f89b 	bl	80025c8 <HAL_TIM_MspPostInit>

}
 8001492:	bf00      	nop
 8001494:	3738      	adds	r7, #56	@ 0x38
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000488 	.word	0x20000488
 80014a0:	40000400 	.word	0x40000400

080014a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	@ 0x38
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c4:	463b      	mov	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]
 80014d2:	615a      	str	r2, [r3, #20]
 80014d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014d6:	4b32      	ldr	r3, [pc, #200]	@ (80015a0 <MX_TIM4_Init+0xfc>)
 80014d8:	4a32      	ldr	r2, [pc, #200]	@ (80015a4 <MX_TIM4_Init+0x100>)
 80014da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 80014dc:	4b30      	ldr	r3, [pc, #192]	@ (80015a0 <MX_TIM4_Init+0xfc>)
 80014de:	22a9      	movs	r2, #169	@ 0xa9
 80014e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e2:	4b2f      	ldr	r3, [pc, #188]	@ (80015a0 <MX_TIM4_Init+0xfc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 80014e8:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <MX_TIM4_Init+0xfc>)
 80014ea:	f241 3287 	movw	r2, #4999	@ 0x1387
 80014ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f0:	4b2b      	ldr	r3, [pc, #172]	@ (80015a0 <MX_TIM4_Init+0xfc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f6:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <MX_TIM4_Init+0xfc>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014fc:	4828      	ldr	r0, [pc, #160]	@ (80015a0 <MX_TIM4_Init+0xfc>)
 80014fe:	f004 ff71 	bl	80063e4 <HAL_TIM_Base_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001508:	f000 fd94 	bl	8002034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001512:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001516:	4619      	mov	r1, r3
 8001518:	4821      	ldr	r0, [pc, #132]	@ (80015a0 <MX_TIM4_Init+0xfc>)
 800151a:	f005 fdaf 	bl	800707c <HAL_TIM_ConfigClockSource>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001524:	f000 fd86 	bl	8002034 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001528:	481d      	ldr	r0, [pc, #116]	@ (80015a0 <MX_TIM4_Init+0xfc>)
 800152a:	f005 f89b 	bl	8006664 <HAL_TIM_PWM_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001534:	f000 fd7e 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	4816      	ldr	r0, [pc, #88]	@ (80015a0 <MX_TIM4_Init+0xfc>)
 8001548:	f006 fb76 	bl	8007c38 <HAL_TIMEx_MasterConfigSynchronization>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001552:	f000 fd6f 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001556:	2360      	movs	r3, #96	@ 0x60
 8001558:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001566:	463b      	mov	r3, r7
 8001568:	2200      	movs	r2, #0
 800156a:	4619      	mov	r1, r3
 800156c:	480c      	ldr	r0, [pc, #48]	@ (80015a0 <MX_TIM4_Init+0xfc>)
 800156e:	f005 fc71 	bl	8006e54 <HAL_TIM_PWM_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001578:	f000 fd5c 	bl	8002034 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800157c:	463b      	mov	r3, r7
 800157e:	2204      	movs	r2, #4
 8001580:	4619      	mov	r1, r3
 8001582:	4807      	ldr	r0, [pc, #28]	@ (80015a0 <MX_TIM4_Init+0xfc>)
 8001584:	f005 fc66 	bl	8006e54 <HAL_TIM_PWM_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800158e:	f000 fd51 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001592:	4803      	ldr	r0, [pc, #12]	@ (80015a0 <MX_TIM4_Init+0xfc>)
 8001594:	f001 f818 	bl	80025c8 <HAL_TIM_MspPostInit>

}
 8001598:	bf00      	nop
 800159a:	3738      	adds	r7, #56	@ 0x38
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200004d4 	.word	0x200004d4
 80015a4:	40000800 	.word	0x40000800

080015a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015ae:	4b22      	ldr	r3, [pc, #136]	@ (8001638 <MX_DMA_Init+0x90>)
 80015b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b2:	4a21      	ldr	r2, [pc, #132]	@ (8001638 <MX_DMA_Init+0x90>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80015ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <MX_DMA_Init+0x90>)
 80015bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <MX_DMA_Init+0x90>)
 80015c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001638 <MX_DMA_Init+0x90>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <MX_DMA_Init+0x90>)
 80015d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	200b      	movs	r0, #11
 80015e4:	f003 f99b 	bl	800491e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015e8:	200b      	movs	r0, #11
 80015ea:	f003 f9b2 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	200c      	movs	r0, #12
 80015f4:	f003 f993 	bl	800491e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015f8:	200c      	movs	r0, #12
 80015fa:	f003 f9aa 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	200d      	movs	r0, #13
 8001604:	f003 f98b 	bl	800491e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001608:	200d      	movs	r0, #13
 800160a:	f003 f9a2 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	200e      	movs	r0, #14
 8001614:	f003 f983 	bl	800491e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001618:	200e      	movs	r0, #14
 800161a:	f003 f99a 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	200f      	movs	r0, #15
 8001624:	f003 f97b 	bl	800491e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001628:	200f      	movs	r0, #15
 800162a:	f003 f992 	bl	8004952 <HAL_NVIC_EnableIRQ>

}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000

0800163c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	4b3a      	ldr	r3, [pc, #232]	@ (800173c <MX_GPIO_Init+0x100>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	4a39      	ldr	r2, [pc, #228]	@ (800173c <MX_GPIO_Init+0x100>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165e:	4b37      	ldr	r3, [pc, #220]	@ (800173c <MX_GPIO_Init+0x100>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800166a:	4b34      	ldr	r3, [pc, #208]	@ (800173c <MX_GPIO_Init+0x100>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	4a33      	ldr	r2, [pc, #204]	@ (800173c <MX_GPIO_Init+0x100>)
 8001670:	f043 0320 	orr.w	r3, r3, #32
 8001674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001676:	4b31      	ldr	r3, [pc, #196]	@ (800173c <MX_GPIO_Init+0x100>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167a:	f003 0320 	and.w	r3, r3, #32
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <MX_GPIO_Init+0x100>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001686:	4a2d      	ldr	r2, [pc, #180]	@ (800173c <MX_GPIO_Init+0x100>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168e:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <MX_GPIO_Init+0x100>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	4b28      	ldr	r3, [pc, #160]	@ (800173c <MX_GPIO_Init+0x100>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	4a27      	ldr	r2, [pc, #156]	@ (800173c <MX_GPIO_Init+0x100>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a6:	4b25      	ldr	r3, [pc, #148]	@ (800173c <MX_GPIO_Init+0x100>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016bc:	f003 fe18 	bl	80052f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2110      	movs	r1, #16
 80016c4:	481e      	ldr	r0, [pc, #120]	@ (8001740 <MX_GPIO_Init+0x104>)
 80016c6:	f003 fe13 	bl	80052f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4817      	ldr	r0, [pc, #92]	@ (8001740 <MX_GPIO_Init+0x104>)
 80016e2:	f003 fc83 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_10;
 80016e6:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001702:	f003 fc73 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001706:	2310      	movs	r3, #16
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4808      	ldr	r0, [pc, #32]	@ (8001740 <MX_GPIO_Init+0x104>)
 800171e:	f003 fc65 	bl	8004fec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	2028      	movs	r0, #40	@ 0x28
 8001728:	f003 f8f9 	bl	800491e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800172c:	2028      	movs	r0, #40	@ 0x28
 800172e:	f003 f910 	bl	8004952 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	@ 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	48000800 	.word	0x48000800
 8001744:	00000000 	.word	0x00000000

08001748 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001748:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a6c      	ldr	r2, [pc, #432]	@ (8001908 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	f040 80cc 	bne.w	80018f4 <HAL_TIM_PeriodElapsedCallback+0x1ac>
	{
		if(Mode == 0){
 800175c:	4b6b      	ldr	r3, [pc, #428]	@ (800190c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d12a      	bne.n	80017ba <HAL_TIM_PeriodElapsedCallback+0x72>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001764:	4b6a      	ldr	r3, [pc, #424]	@ (8001910 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2200      	movs	r2, #0
 800176a:	639a      	str	r2, [r3, #56]	@ 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800176c:	4b68      	ldr	r3, [pc, #416]	@ (8001910 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2200      	movs	r2, #0
 8001772:	635a      	str	r2, [r3, #52]	@ 0x34
			angular_position = (ADC_RawRead[0] * 359) / 4095;
 8001774:	4b67      	ldr	r3, [pc, #412]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	f240 1367 	movw	r3, #359	@ 0x167
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	4a65      	ldr	r2, [pc, #404]	@ (8001918 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001784:	fb82 1203 	smull	r1, r2, r2, r3
 8001788:	441a      	add	r2, r3
 800178a:	12d2      	asrs	r2, r2, #11
 800178c:	17db      	asrs	r3, r3, #31
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	b29a      	uxth	r2, r3
 8001792:	4b62      	ldr	r3, [pc, #392]	@ (800191c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001794:	801a      	strh	r2, [r3, #0]
			set_point = (ADC_RawRead[1] * 359) / 4095;
 8001796:	4b5f      	ldr	r3, [pc, #380]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001798:	885b      	ldrh	r3, [r3, #2]
 800179a:	461a      	mov	r2, r3
 800179c:	f240 1367 	movw	r3, #359	@ 0x167
 80017a0:	fb02 f303 	mul.w	r3, r2, r3
 80017a4:	4a5c      	ldr	r2, [pc, #368]	@ (8001918 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80017a6:	fb82 1203 	smull	r1, r2, r2, r3
 80017aa:	441a      	add	r2, r3
 80017ac:	12d2      	asrs	r2, r2, #11
 80017ae:	17db      	asrs	r3, r3, #31
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001920 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80017b6:	801a      	strh	r2, [r3, #0]
 80017b8:	e059      	b.n	800186e <HAL_TIM_PeriodElapsedCallback+0x126>
		}
		else if(Mode == 1){
 80017ba:	4b54      	ldr	r3, [pc, #336]	@ (800190c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d127      	bne.n	8001812 <HAL_TIM_PeriodElapsedCallback+0xca>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80017c2:	4b58      	ldr	r3, [pc, #352]	@ (8001924 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	635a      	str	r2, [r3, #52]	@ 0x34
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim1);
 80017ca:	4b57      	ldr	r3, [pc, #348]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d0:	4a56      	ldr	r2, [pc, #344]	@ (800192c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80017d2:	6013      	str	r3, [r2, #0]
			angular_position = (QEIReadRaw*360)/3072;
 80017d4:	4b55      	ldr	r3, [pc, #340]	@ (800192c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80017dc:	fb02 f303 	mul.w	r3, r2, r3
 80017e0:	4a53      	ldr	r2, [pc, #332]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	0adb      	lsrs	r3, r3, #11
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b4c      	ldr	r3, [pc, #304]	@ (800191c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80017ec:	801a      	strh	r2, [r3, #0]
			set_point = (ADC_RawRead[1] * 359) / 4095;
 80017ee:	4b49      	ldr	r3, [pc, #292]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80017f0:	885b      	ldrh	r3, [r3, #2]
 80017f2:	461a      	mov	r2, r3
 80017f4:	f240 1367 	movw	r3, #359	@ 0x167
 80017f8:	fb02 f303 	mul.w	r3, r2, r3
 80017fc:	4a46      	ldr	r2, [pc, #280]	@ (8001918 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80017fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001802:	441a      	add	r2, r3
 8001804:	12d2      	asrs	r2, r2, #11
 8001806:	17db      	asrs	r3, r3, #31
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b44      	ldr	r3, [pc, #272]	@ (8001920 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800180e:	801a      	strh	r2, [r3, #0]
 8001810:	e02d      	b.n	800186e <HAL_TIM_PeriodElapsedCallback+0x126>
		}
		else if(Mode == 2){
 8001812:	4b3e      	ldr	r3, [pc, #248]	@ (800190c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d129      	bne.n	800186e <HAL_TIM_PeriodElapsedCallback+0x126>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 800181a:	4b3d      	ldr	r3, [pc, #244]	@ (8001910 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2200      	movs	r2, #0
 8001820:	639a      	str	r2, [r3, #56]	@ 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001822:	4b3b      	ldr	r3, [pc, #236]	@ (8001910 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2200      	movs	r2, #0
 8001828:	635a      	str	r2, [r3, #52]	@ 0x34
			angular_position = (ADC_RawRead[0] * 359) / 4095;
 800182a:	4b3a      	ldr	r3, [pc, #232]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	f240 1367 	movw	r3, #359	@ 0x167
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	4a37      	ldr	r2, [pc, #220]	@ (8001918 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800183a:	fb82 1203 	smull	r1, r2, r2, r3
 800183e:	441a      	add	r2, r3
 8001840:	12d2      	asrs	r2, r2, #11
 8001842:	17db      	asrs	r3, r3, #31
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	b29a      	uxth	r2, r3
 8001848:	4b34      	ldr	r3, [pc, #208]	@ (800191c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800184a:	801a      	strh	r2, [r3, #0]
			set_point = (ADC_RawRead[1] * 359) / 4095;
 800184c:	4b31      	ldr	r3, [pc, #196]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800184e:	885b      	ldrh	r3, [r3, #2]
 8001850:	461a      	mov	r2, r3
 8001852:	f240 1367 	movw	r3, #359	@ 0x167
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	4a2f      	ldr	r2, [pc, #188]	@ (8001918 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800185c:	fb82 1203 	smull	r1, r2, r2, r3
 8001860:	441a      	add	r2, r3
 8001862:	12d2      	asrs	r2, r2, #11
 8001864:	17db      	asrs	r3, r3, #31
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b2d      	ldr	r3, [pc, #180]	@ (8001920 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800186c:	801a      	strh	r2, [r3, #0]
		}
		clockwise = fmod(fabs(set_point - angular_position), 360);
 800186e:	4b2c      	ldr	r3, [pc, #176]	@ (8001920 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	4b29      	ldr	r3, [pc, #164]	@ (800191c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe1e 	bl	80004bc <__aeabi_i2d>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4690      	mov	r8, r2
 8001886:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800188a:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 8001900 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 800188e:	ec49 8b10 	vmov	d0, r8, r9
 8001892:	f008 fde9 	bl	800a468 <fmod>
 8001896:	eeb0 7a40 	vmov.f32	s14, s0
 800189a:	eef0 7a60 	vmov.f32	s15, s1
 800189e:	4b25      	ldr	r3, [pc, #148]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80018a0:	ed83 7b00 	vstr	d7, [r3]
		counterclockwise = fmod(360 - fabs(set_point - angular_position), 360);
 80018a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001920 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe03 	bl	80004bc <__aeabi_i2d>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4614      	mov	r4, r2
 80018bc:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80018c0:	4622      	mov	r2, r4
 80018c2:	462b      	mov	r3, r5
 80018c4:	f04f 0000 	mov.w	r0, #0
 80018c8:	491b      	ldr	r1, [pc, #108]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80018ca:	f7fe fca9 	bl	8000220 <__aeabi_dsub>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	ec43 2b17 	vmov	d7, r2, r3
 80018d6:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 8001900 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 80018da:	eeb0 0a47 	vmov.f32	s0, s14
 80018de:	eef0 0a67 	vmov.f32	s1, s15
 80018e2:	f008 fdc1 	bl	800a468 <fmod>
 80018e6:	eeb0 7a40 	vmov.f32	s14, s0
 80018ea:	eef0 7a60 	vmov.f32	s15, s1
 80018ee:	4b13      	ldr	r3, [pc, #76]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80018f0:	ed83 7b00 	vstr	d7, [r3]
	}
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018fe:	bf00      	nop
 8001900:	00000000 	.word	0x00000000
 8001904:	40768000 	.word	0x40768000
 8001908:	2000043c 	.word	0x2000043c
 800190c:	20000520 	.word	0x20000520
 8001910:	200004d4 	.word	0x200004d4
 8001914:	20000554 	.word	0x20000554
 8001918:	80080081 	.word	0x80080081
 800191c:	20000550 	.word	0x20000550
 8001920:	20000552 	.word	0x20000552
 8001924:	20000488 	.word	0x20000488
 8001928:	200003f0 	.word	0x200003f0
 800192c:	200005a0 	.word	0x200005a0
 8001930:	aaaaaaab 	.word	0xaaaaaaab
 8001934:	20000540 	.word	0x20000540
 8001938:	40768000 	.word	0x40768000
 800193c:	20000548 	.word	0x20000548

08001940 <Part_I_PID_ADC>:

void Part_I_PID_ADC(){
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	2120      	movs	r1, #32
 800194a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800194e:	f003 fccf 	bl	80052f0 <HAL_GPIO_WritePin>
	static uint32_t timestamp = 0;
	if(timestamp < HAL_GetTick())
 8001952:	f000 ffc7 	bl	80028e4 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	4b73      	ldr	r3, [pc, #460]	@ (8001b28 <Part_I_PID_ADC+0x1e8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	f240 80d9 	bls.w	8001b14 <Part_I_PID_ADC+0x1d4>
	{
		timestamp = HAL_GetTick() + 10;
 8001962:	f000 ffbf 	bl	80028e4 <HAL_GetTick>
 8001966:	4603      	mov	r3, r0
 8001968:	330a      	adds	r3, #10
 800196a:	4a6f      	ldr	r2, [pc, #444]	@ (8001b28 <Part_I_PID_ADC+0x1e8>)
 800196c:	6013      	str	r3, [r2, #0]

		err = set_point - angular_position;
 800196e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b2c <Part_I_PID_ADC+0x1ec>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	4b6e      	ldr	r3, [pc, #440]	@ (8001b30 <Part_I_PID_ADC+0x1f0>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	4a6e      	ldr	r2, [pc, #440]	@ (8001b34 <Part_I_PID_ADC+0x1f4>)
 800197c:	6013      	str	r3, [r2, #0]
		Vfeedback = arm_pid_f32(&PID, err);
 800197e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b34 <Part_I_PID_ADC+0x1f4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	ee07 3a90 	vmov	s15, r3
 8001986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198a:	4b6b      	ldr	r3, [pc, #428]	@ (8001b38 <Part_I_PID_ADC+0x1f8>)
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	edc7 7a01 	vstr	s15, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	ed93 7a00 	vldr	s14, [r3]
 8001998:	edd7 7a01 	vldr	s15, [r7, #4]
 800199c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80019ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80019b0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	edd3 6a02 	vldr	s13, [r3, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80019c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80019ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d2:	edc7 7a00 	vstr	s15, [r7]

    /* Update state */
    S->state[1] = S->state[0];
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	4a53      	ldr	r2, [pc, #332]	@ (8001b3c <Part_I_PID_ADC+0x1fc>)
 80019ee:	6013      	str	r3, [r2, #0]
		absVfb = fabs(Vfeedback) *2.5;
 80019f0:	4b52      	ldr	r3, [pc, #328]	@ (8001b3c <Part_I_PID_ADC+0x1fc>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	eef0 7ae7 	vabs.f32	s15, s15
 80019fa:	ee17 0a90 	vmov	r0, s15
 80019fe:	f7fe fd6f 	bl	80004e0 <__aeabi_f2d>
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	4b4e      	ldr	r3, [pc, #312]	@ (8001b40 <Part_I_PID_ADC+0x200>)
 8001a08:	f7fe fdc2 	bl	8000590 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	494c      	ldr	r1, [pc, #304]	@ (8001b44 <Part_I_PID_ADC+0x204>)
 8001a12:	e9c1 2300 	strd	r2, r3, [r1]
		vfbtopwm = (absVfb * 5000)/12;
 8001a16:	4b4b      	ldr	r3, [pc, #300]	@ (8001b44 <Part_I_PID_ADC+0x204>)
 8001a18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a1c:	a340      	add	r3, pc, #256	@ (adr r3, 8001b20 <Part_I_PID_ADC+0x1e0>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fdb5 	bl	8000590 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	4b45      	ldr	r3, [pc, #276]	@ (8001b48 <Part_I_PID_ADC+0x208>)
 8001a34:	f7fe fed6 	bl	80007e4 <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f856 	bl	8000af0 <__aeabi_d2iz>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4a41      	ldr	r2, [pc, #260]	@ (8001b4c <Part_I_PID_ADC+0x20c>)
 8001a48:	6013      	str	r3, [r2, #0]
		if(vfbtopwm < 1500 && vfbtopwm > 25) usepwm = 1500;
 8001a4a:	4b40      	ldr	r3, [pc, #256]	@ (8001b4c <Part_I_PID_ADC+0x20c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001a52:	4293      	cmp	r3, r2
 8001a54:	dc08      	bgt.n	8001a68 <Part_I_PID_ADC+0x128>
 8001a56:	4b3d      	ldr	r3, [pc, #244]	@ (8001b4c <Part_I_PID_ADC+0x20c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b19      	cmp	r3, #25
 8001a5c:	dd04      	ble.n	8001a68 <Part_I_PID_ADC+0x128>
 8001a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b50 <Part_I_PID_ADC+0x210>)
 8001a60:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	e003      	b.n	8001a70 <Part_I_PID_ADC+0x130>
		else usepwm = vfbtopwm;
 8001a68:	4b38      	ldr	r3, [pc, #224]	@ (8001b4c <Part_I_PID_ADC+0x20c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a38      	ldr	r2, [pc, #224]	@ (8001b50 <Part_I_PID_ADC+0x210>)
 8001a6e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, usepwm);
 8001a70:	4b37      	ldr	r3, [pc, #220]	@ (8001b50 <Part_I_PID_ADC+0x210>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b37      	ldr	r3, [pc, #220]	@ (8001b54 <Part_I_PID_ADC+0x214>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	635a      	str	r2, [r3, #52]	@ 0x34
		if(fabs(err) < 7) usepwm = 0;
 8001a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b34 <Part_I_PID_ADC+0x1f4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd1c 	bl	80004bc <__aeabi_i2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4614      	mov	r4, r2
 8001a8a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	4b31      	ldr	r3, [pc, #196]	@ (8001b58 <Part_I_PID_ADC+0x218>)
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe ffec 	bl	8000a74 <__aeabi_dcmplt>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <Part_I_PID_ADC+0x168>
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b50 <Part_I_PID_ADC+0x210>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

		int errr = set_point - angular_position;
 8001aa8:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <Part_I_PID_ADC+0x1ec>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b20      	ldr	r3, [pc, #128]	@ (8001b30 <Part_I_PID_ADC+0x1f0>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	60fb      	str	r3, [r7, #12]
		if(errr > 180) errr -= 360;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2bb4      	cmp	r3, #180	@ 0xb4
 8001aba:	dd04      	ble.n	8001ac6 <Part_I_PID_ADC+0x186>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e007      	b.n	8001ad6 <Part_I_PID_ADC+0x196>
		else if(errr < -180) errr += 360;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f113 0fb4 	cmn.w	r3, #180	@ 0xb4
 8001acc:	da03      	bge.n	8001ad6 <Part_I_PID_ADC+0x196>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ad4:	60fb      	str	r3, [r7, #12]
//		}
//		else if(set_point - angular_position < 0 ){ //CCW
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
//		}
		if(errr > 0){
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	dd0c      	ble.n	8001af6 <Part_I_PID_ADC+0x1b6>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae6:	f003 fc03 	bl	80052f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2110      	movs	r1, #16
 8001aee:	481b      	ldr	r0, [pc, #108]	@ (8001b5c <Part_I_PID_ADC+0x21c>)
 8001af0:	f003 fbfe 	bl	80052f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
		}

	}

}
 8001af4:	e00e      	b.n	8001b14 <Part_I_PID_ADC+0x1d4>
		else if(errr < 0){
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	da0b      	bge.n	8001b14 <Part_I_PID_ADC+0x1d4>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b06:	f003 fbf3 	bl	80052f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	2110      	movs	r1, #16
 8001b0e:	4813      	ldr	r0, [pc, #76]	@ (8001b5c <Part_I_PID_ADC+0x21c>)
 8001b10:	f003 fbee 	bl	80052f0 <HAL_GPIO_WritePin>
}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1c:	f3af 8000 	nop.w
 8001b20:	00000000 	.word	0x00000000
 8001b24:	40b38800 	.word	0x40b38800
 8001b28:	200005b0 	.word	0x200005b0
 8001b2c:	20000552 	.word	0x20000552
 8001b30:	20000550 	.word	0x20000550
 8001b34:	2000053c 	.word	0x2000053c
 8001b38:	20000558 	.word	0x20000558
 8001b3c:	20000528 	.word	0x20000528
 8001b40:	40040000 	.word	0x40040000
 8001b44:	20000530 	.word	0x20000530
 8001b48:	40280000 	.word	0x40280000
 8001b4c:	20000524 	.word	0x20000524
 8001b50:	20000538 	.word	0x20000538
 8001b54:	20000488 	.word	0x20000488
 8001b58:	401c0000 	.word	0x401c0000
 8001b5c:	48000800 	.word	0x48000800

08001b60 <Part_II_QEI>:

void Part_II_QEI(){
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2120      	movs	r1, #32
 8001b6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b6e:	f003 fbbf 	bl	80052f0 <HAL_GPIO_WritePin>
	static uint32_t timestamp = 0;
	if(timestamp < HAL_GetTick())
 8001b72:	f000 feb7 	bl	80028e4 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	4b6b      	ldr	r3, [pc, #428]	@ (8001d28 <Part_II_QEI+0x1c8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	f240 80cb 	bls.w	8001d18 <Part_II_QEI+0x1b8>
	{
		timestamp = HAL_GetTick() + 10;
 8001b82:	f000 feaf 	bl	80028e4 <HAL_GetTick>
 8001b86:	4603      	mov	r3, r0
 8001b88:	330a      	adds	r3, #10
 8001b8a:	4a67      	ldr	r2, [pc, #412]	@ (8001d28 <Part_II_QEI+0x1c8>)
 8001b8c:	6013      	str	r3, [r2, #0]

		err = set_point - angular_position;
 8001b8e:	4b67      	ldr	r3, [pc, #412]	@ (8001d2c <Part_II_QEI+0x1cc>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b66      	ldr	r3, [pc, #408]	@ (8001d30 <Part_II_QEI+0x1d0>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	4a66      	ldr	r2, [pc, #408]	@ (8001d34 <Part_II_QEI+0x1d4>)
 8001b9c:	6013      	str	r3, [r2, #0]
		Vfeedback = arm_pid_f32(&PID2, err);
 8001b9e:	4b65      	ldr	r3, [pc, #404]	@ (8001d34 <Part_II_QEI+0x1d4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001baa:	4b63      	ldr	r3, [pc, #396]	@ (8001d38 <Part_II_QEI+0x1d8>)
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	edc7 7a01 	vstr	s15, [r7, #4]
    out = (S->A0 * in) +
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	ed93 7a00 	vldr	s14, [r3]
 8001bb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001bd0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf2:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	615a      	str	r2, [r3, #20]
    return (out);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001d3c <Part_II_QEI+0x1dc>)
 8001c0e:	6013      	str	r3, [r2, #0]

		absVfb = fabs(Vfeedback) * 2.5;
 8001c10:	4b4a      	ldr	r3, [pc, #296]	@ (8001d3c <Part_II_QEI+0x1dc>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	eef0 7ae7 	vabs.f32	s15, s15
 8001c1a:	ee17 0a90 	vmov	r0, s15
 8001c1e:	f7fe fc5f 	bl	80004e0 <__aeabi_f2d>
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	4b46      	ldr	r3, [pc, #280]	@ (8001d40 <Part_II_QEI+0x1e0>)
 8001c28:	f7fe fcb2 	bl	8000590 <__aeabi_dmul>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4944      	ldr	r1, [pc, #272]	@ (8001d44 <Part_II_QEI+0x1e4>)
 8001c32:	e9c1 2300 	strd	r2, r3, [r1]
		vfbtopwm = (absVfb * 5000) / 5.00;
 8001c36:	4b43      	ldr	r3, [pc, #268]	@ (8001d44 <Part_II_QEI+0x1e4>)
 8001c38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c3c:	a338      	add	r3, pc, #224	@ (adr r3, 8001d20 <Part_II_QEI+0x1c0>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe fca5 	bl	8000590 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	4b3d      	ldr	r3, [pc, #244]	@ (8001d48 <Part_II_QEI+0x1e8>)
 8001c54:	f7fe fdc6 	bl	80007e4 <__aeabi_ddiv>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f7fe ff46 	bl	8000af0 <__aeabi_d2iz>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4a39      	ldr	r2, [pc, #228]	@ (8001d4c <Part_II_QEI+0x1ec>)
 8001c68:	6013      	str	r3, [r2, #0]


		if(vfbtopwm > 5000) usepwm = 5000;
 8001c6a:	4b38      	ldr	r3, [pc, #224]	@ (8001d4c <Part_II_QEI+0x1ec>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c72:	4293      	cmp	r3, r2
 8001c74:	dd04      	ble.n	8001c80 <Part_II_QEI+0x120>
 8001c76:	4b36      	ldr	r3, [pc, #216]	@ (8001d50 <Part_II_QEI+0x1f0>)
 8001c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e01b      	b.n	8001cb8 <Part_II_QEI+0x158>
		else if (fabs(err) < 1) usepwm = 0;
 8001c80:	4b2c      	ldr	r3, [pc, #176]	@ (8001d34 <Part_II_QEI+0x1d4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc19 	bl	80004bc <__aeabi_i2d>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4614      	mov	r4, r2
 8001c90:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	4b2e      	ldr	r3, [pc, #184]	@ (8001d54 <Part_II_QEI+0x1f4>)
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	f7fe fee9 	bl	8000a74 <__aeabi_dcmplt>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <Part_II_QEI+0x150>
 8001ca8:	4b29      	ldr	r3, [pc, #164]	@ (8001d50 <Part_II_QEI+0x1f0>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	e003      	b.n	8001cb8 <Part_II_QEI+0x158>
		else usepwm = vfbtopwm;
 8001cb0:	4b26      	ldr	r3, [pc, #152]	@ (8001d4c <Part_II_QEI+0x1ec>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a26      	ldr	r2, [pc, #152]	@ (8001d50 <Part_II_QEI+0x1f0>)
 8001cb6:	6013      	str	r3, [r2, #0]

		int errr = set_point - angular_position;
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <Part_II_QEI+0x1cc>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001d30 <Part_II_QEI+0x1d0>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	60fb      	str	r3, [r7, #12]
		if(errr > 180) errr -= 360;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2bb4      	cmp	r3, #180	@ 0xb4
 8001cca:	dd04      	ble.n	8001cd6 <Part_II_QEI+0x176>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e007      	b.n	8001ce6 <Part_II_QEI+0x186>
		else if(errr < -180) errr += 360;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f113 0fb4 	cmn.w	r3, #180	@ 0xb4
 8001cdc:	da03      	bge.n	8001ce6 <Part_II_QEI+0x186>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ce4:	60fb      	str	r3, [r7, #12]
		if(errr > 0){
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	dd09      	ble.n	8001d00 <Part_II_QEI+0x1a0>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, usepwm);
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <Part_II_QEI+0x1f0>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b19      	ldr	r3, [pc, #100]	@ (8001d58 <Part_II_QEI+0x1f8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	639a      	str	r2, [r3, #56]	@ 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001cf6:	4b18      	ldr	r3, [pc, #96]	@ (8001d58 <Part_II_QEI+0x1f8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, usepwm);
		}

	}

}
 8001cfe:	e00b      	b.n	8001d18 <Part_II_QEI+0x1b8>
		else if(errr < 0){
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	da08      	bge.n	8001d18 <Part_II_QEI+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001d06:	4b14      	ldr	r3, [pc, #80]	@ (8001d58 <Part_II_QEI+0x1f8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	639a      	str	r2, [r3, #56]	@ 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, usepwm);
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <Part_II_QEI+0x1f0>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <Part_II_QEI+0x1f8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d20:	00000000 	.word	0x00000000
 8001d24:	40b38800 	.word	0x40b38800
 8001d28:	200005b4 	.word	0x200005b4
 8001d2c:	20000552 	.word	0x20000552
 8001d30:	20000550 	.word	0x20000550
 8001d34:	2000053c 	.word	0x2000053c
 8001d38:	2000057c 	.word	0x2000057c
 8001d3c:	20000528 	.word	0x20000528
 8001d40:	40040000 	.word	0x40040000
 8001d44:	20000530 	.word	0x20000530
 8001d48:	40140000 	.word	0x40140000
 8001d4c:	20000524 	.word	0x20000524
 8001d50:	20000538 	.word	0x20000538
 8001d54:	3ff00000 	.word	0x3ff00000
 8001d58:	200004d4 	.word	0x200004d4
 8001d5c:	00000000 	.word	0x00000000

08001d60 <Part_III_UART>:

void Part_III_UART(){
 8001d60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	static uint32_t timestamp2 = 0;
	if(timestamp < HAL_GetTick()){
 8001d68:	f000 fdbc 	bl	80028e4 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ee8 <Part_III_UART+0x188>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d90b      	bls.n	8001d8e <Part_III_UART+0x2e>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d76:	2120      	movs	r1, #32
 8001d78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d7c:	f003 fad0 	bl	8005320 <HAL_GPIO_TogglePin>
		timestamp = HAL_GetTick() + 500;
 8001d80:	f000 fdb0 	bl	80028e4 <HAL_GetTick>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001d8a:	4a57      	ldr	r2, [pc, #348]	@ (8001ee8 <Part_III_UART+0x188>)
 8001d8c:	6013      	str	r3, [r2, #0]
	}

	err = set_point - angular_position;
 8001d8e:	4b57      	ldr	r3, [pc, #348]	@ (8001eec <Part_III_UART+0x18c>)
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b56      	ldr	r3, [pc, #344]	@ (8001ef0 <Part_III_UART+0x190>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	4a56      	ldr	r2, [pc, #344]	@ (8001ef4 <Part_III_UART+0x194>)
 8001d9c:	6013      	str	r3, [r2, #0]

	if(timestamp2 < HAL_GetTick()){
 8001d9e:	f000 fda1 	bl	80028e4 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b54      	ldr	r3, [pc, #336]	@ (8001ef8 <Part_III_UART+0x198>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d907      	bls.n	8001dbc <Part_III_UART+0x5c>
		timestamp2 = HAL_GetTick() + 5;
 8001dac:	f000 fd9a 	bl	80028e4 <HAL_GetTick>
 8001db0:	4603      	mov	r3, r0
 8001db2:	3305      	adds	r3, #5
 8001db4:	4a50      	ldr	r2, [pc, #320]	@ (8001ef8 <Part_III_UART+0x198>)
 8001db6:	6013      	str	r3, [r2, #0]
		UARTTrans();
 8001db8:	f000 f8b0 	bl	8001f1c <UARTTrans>
//		UARTReci();
	}

	absVfb = fabs(MAT_PWM);
 8001dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8001efc <Part_III_UART+0x19c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fb7b 	bl	80004bc <__aeabi_i2d>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4614      	mov	r4, r2
 8001dcc:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8001f00 <Part_III_UART+0x1a0>)
 8001dd2:	e9c3 4500 	strd	r4, r5, [r3]
	vfbtopwm = (absVfb * 5000)/550;
 8001dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001f00 <Part_III_UART+0x1a0>)
 8001dd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ddc:	a340      	add	r3, pc, #256	@ (adr r3, 8001ee0 <Part_III_UART+0x180>)
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	f7fe fbd5 	bl	8000590 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	4b44      	ldr	r3, [pc, #272]	@ (8001f04 <Part_III_UART+0x1a4>)
 8001df4:	f7fe fcf6 	bl	80007e4 <__aeabi_ddiv>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f7fe fe76 	bl	8000af0 <__aeabi_d2iz>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4a40      	ldr	r2, [pc, #256]	@ (8001f08 <Part_III_UART+0x1a8>)
 8001e08:	6013      	str	r3, [r2, #0]
	if(vfbtopwm < 1500 && vfbtopwm > 25) usepwm = 1500;
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f08 <Part_III_UART+0x1a8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001e12:	4293      	cmp	r3, r2
 8001e14:	dc08      	bgt.n	8001e28 <Part_III_UART+0xc8>
 8001e16:	4b3c      	ldr	r3, [pc, #240]	@ (8001f08 <Part_III_UART+0x1a8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b19      	cmp	r3, #25
 8001e1c:	dd04      	ble.n	8001e28 <Part_III_UART+0xc8>
 8001e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f0c <Part_III_UART+0x1ac>)
 8001e20:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	e003      	b.n	8001e30 <Part_III_UART+0xd0>
	else usepwm = vfbtopwm;
 8001e28:	4b37      	ldr	r3, [pc, #220]	@ (8001f08 <Part_III_UART+0x1a8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a37      	ldr	r2, [pc, #220]	@ (8001f0c <Part_III_UART+0x1ac>)
 8001e2e:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, usepwm);
 8001e30:	4b36      	ldr	r3, [pc, #216]	@ (8001f0c <Part_III_UART+0x1ac>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b36      	ldr	r3, [pc, #216]	@ (8001f10 <Part_III_UART+0x1b0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	635a      	str	r2, [r3, #52]	@ 0x34
	if(fabs(err) < 7) usepwm = 0;
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef4 <Part_III_UART+0x194>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fb3c 	bl	80004bc <__aeabi_i2d>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4690      	mov	r8, r2
 8001e4a:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	4b30      	ldr	r3, [pc, #192]	@ (8001f14 <Part_III_UART+0x1b4>)
 8001e54:	4640      	mov	r0, r8
 8001e56:	4649      	mov	r1, r9
 8001e58:	f7fe fe0c 	bl	8000a74 <__aeabi_dcmplt>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <Part_III_UART+0x108>
 8001e62:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <Part_III_UART+0x1ac>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

	int errr = set_point - angular_position;
 8001e68:	4b20      	ldr	r3, [pc, #128]	@ (8001eec <Part_III_UART+0x18c>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ef0 <Part_III_UART+0x190>)
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	607b      	str	r3, [r7, #4]
	if(errr > 180) errr -= 360;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2bb4      	cmp	r3, #180	@ 0xb4
 8001e7a:	dd04      	ble.n	8001e86 <Part_III_UART+0x126>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	e007      	b.n	8001e96 <Part_III_UART+0x136>
	else if(errr < -180) errr += 360;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f113 0fb4 	cmn.w	r3, #180	@ 0xb4
 8001e8c:	da03      	bge.n	8001e96 <Part_III_UART+0x136>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e94:	607b      	str	r3, [r7, #4]
	if(errr > 0){
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	dd0c      	ble.n	8001eb6 <Part_III_UART+0x156>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ea2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea6:	f003 fa23 	bl	80052f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2110      	movs	r1, #16
 8001eae:	481a      	ldr	r0, [pc, #104]	@ (8001f18 <Part_III_UART+0x1b8>)
 8001eb0:	f003 fa1e 	bl	80052f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
	}



}
 8001eb4:	e00e      	b.n	8001ed4 <Part_III_UART+0x174>
	else if(errr < 0){
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da0b      	bge.n	8001ed4 <Part_III_UART+0x174>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ec2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ec6:	f003 fa13 	bl	80052f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2110      	movs	r1, #16
 8001ece:	4812      	ldr	r0, [pc, #72]	@ (8001f18 <Part_III_UART+0x1b8>)
 8001ed0:	f003 fa0e 	bl	80052f0 <HAL_GPIO_WritePin>
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ede:	bf00      	nop
 8001ee0:	00000000 	.word	0x00000000
 8001ee4:	40b38800 	.word	0x40b38800
 8001ee8:	200005b8 	.word	0x200005b8
 8001eec:	20000552 	.word	0x20000552
 8001ef0:	20000550 	.word	0x20000550
 8001ef4:	2000053c 	.word	0x2000053c
 8001ef8:	200005bc 	.word	0x200005bc
 8001efc:	200005ac 	.word	0x200005ac
 8001f00:	20000530 	.word	0x20000530
 8001f04:	40813000 	.word	0x40813000
 8001f08:	20000524 	.word	0x20000524
 8001f0c:	20000538 	.word	0x20000538
 8001f10:	20000488 	.word	0x20000488
 8001f14:	401c0000 	.word	0x401c0000
 8001f18:	48000800 	.word	0x48000800

08001f1c <UARTTrans>:

void UARTTrans(){
 8001f1c:	b5b0      	push	{r4, r5, r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
	uint16_t ert = fabs(err);
 8001f22:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <UARTTrans+0x58>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fac8 	bl	80004bc <__aeabi_i2d>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4614      	mov	r4, r2
 8001f32:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001f36:	4620      	mov	r0, r4
 8001f38:	4629      	mov	r1, r5
 8001f3a:	f7fe fe01 	bl	8000b40 <__aeabi_d2uiz>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
	TxBuffer[0] = 0x45;
 8001f42:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <UARTTrans+0x5c>)
 8001f44:	2245      	movs	r2, #69	@ 0x45
 8001f46:	701a      	strb	r2, [r3, #0]
	TxBuffer[1] = (uint8_t)(ert & 0xFF);
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <UARTTrans+0x5c>)
 8001f4e:	705a      	strb	r2, [r3, #1]
	TxBuffer[2] = (uint8_t)((ert>> 8) & 0xFF);
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	0a1b      	lsrs	r3, r3, #8
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <UARTTrans+0x5c>)
 8001f5a:	709a      	strb	r2, [r3, #2]
	TxBuffer[3] = 0x0A;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <UARTTrans+0x5c>)
 8001f5e:	220a      	movs	r2, #10
 8001f60:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&hlpuart1, TxBuffer, sizeof(TxBuffer));
 8001f62:	2204      	movs	r2, #4
 8001f64:	4904      	ldr	r1, [pc, #16]	@ (8001f78 <UARTTrans+0x5c>)
 8001f66:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <UARTTrans+0x60>)
 8001f68:	f005 ff92 	bl	8007e90 <HAL_UART_Transmit_IT>
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bdb0      	pop	{r4, r5, r7, pc}
 8001f74:	2000053c 	.word	0x2000053c
 8001f78:	200005a8 	.word	0x200005a8
 8001f7c:	20000148 	.word	0x20000148

08001f80 <UARTReci>:

void UARTReci()
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 8001f84:	2204      	movs	r2, #4
 8001f86:	4903      	ldr	r1, [pc, #12]	@ (8001f94 <UARTReci+0x14>)
 8001f88:	4803      	ldr	r0, [pc, #12]	@ (8001f98 <UARTReci+0x18>)
 8001f8a:	f006 f815 	bl	8007fb8 <HAL_UART_Receive_IT>
//	RxBuffer[3] = '\0';
//	MAT_PWM = (int16_t)(RxBuffer[1]+(RxBuffer[2]<<8));

}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200005a4 	.word	0x200005a4
 8001f98:	20000148 	.word	0x20000148

08001f9c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*hlpuart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	if(hlpuart == &hlpuart1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <HAL_UART_RxCpltCallback+0x48>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d117      	bne.n	8001fdc <HAL_UART_RxCpltCallback+0x40>
	{
		RxBuffer[3] = '\0';
 8001fac:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <HAL_UART_RxCpltCallback+0x4c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	70da      	strb	r2, [r3, #3]
		HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	490c      	ldr	r1, [pc, #48]	@ (8001fe8 <HAL_UART_RxCpltCallback+0x4c>)
 8001fb6:	480b      	ldr	r0, [pc, #44]	@ (8001fe4 <HAL_UART_RxCpltCallback+0x48>)
 8001fb8:	f005 fffe 	bl	8007fb8 <HAL_UART_Receive_IT>
		MAT_PWM = (int16_t)(RxBuffer[1]+(RxBuffer[2]<<8));
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe8 <HAL_UART_RxCpltCallback+0x4c>)
 8001fbe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <HAL_UART_RxCpltCallback+0x4c>)
 8001fc6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <HAL_UART_RxCpltCallback+0x50>)
 8001fda:	601a      	str	r2, [r3, #0]
	}
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000148 	.word	0x20000148
 8001fe8:	200005a4 	.word	0x200005a4
 8001fec:	200005ac 	.word	0x200005ac

08001ff0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002000:	d10d      	bne.n	800201e <HAL_GPIO_EXTI_Callback+0x2e>
	{
		Mode = (Mode + 1) % 3;
 8002002:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	1c59      	adds	r1, r3, #1
 8002008:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <HAL_GPIO_EXTI_Callback+0x40>)
 800200a:	fb83 3201 	smull	r3, r2, r3, r1
 800200e:	17cb      	asrs	r3, r1, #31
 8002010:	1ad2      	subs	r2, r2, r3
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	1aca      	subs	r2, r1, r3
 800201a:	4b04      	ldr	r3, [pc, #16]	@ (800202c <HAL_GPIO_EXTI_Callback+0x3c>)
 800201c:	601a      	str	r2, [r3, #0]
	}
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000520 	.word	0x20000520
 8002030:	55555556 	.word	0x55555556

08002034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002038:	b672      	cpsid	i
}
 800203a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <Error_Handler+0x8>

08002040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002046:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <HAL_MspInit+0x44>)
 8002048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204a:	4a0e      	ldr	r2, [pc, #56]	@ (8002084 <HAL_MspInit+0x44>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6613      	str	r3, [r2, #96]	@ 0x60
 8002052:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <HAL_MspInit+0x44>)
 8002054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <HAL_MspInit+0x44>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	4a08      	ldr	r2, [pc, #32]	@ (8002084 <HAL_MspInit+0x44>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002068:	6593      	str	r3, [r2, #88]	@ 0x58
 800206a:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <HAL_MspInit+0x44>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002076:	f003 fa29 	bl	80054cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000

08002088 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b09e      	sub	sp, #120	@ 0x78
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	2254      	movs	r2, #84	@ 0x54
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f008 f9ab 	bl	800a404 <memset>
  if(hadc->Instance==ADC1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020b6:	d167      	bne.n	8002188 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80020b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80020be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80020c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 ff3d 	bl	8005f48 <HAL_RCCEx_PeriphCLKConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80020d4:	f7ff ffae 	bl	8002034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80020d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002190 <HAL_ADC_MspInit+0x108>)
 80020da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002190 <HAL_ADC_MspInit+0x108>)
 80020de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002190 <HAL_ADC_MspInit+0x108>)
 80020e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f0:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <HAL_ADC_MspInit+0x108>)
 80020f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f4:	4a26      	ldr	r2, [pc, #152]	@ (8002190 <HAL_ADC_MspInit+0x108>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020fc:	4b24      	ldr	r3, [pc, #144]	@ (8002190 <HAL_ADC_MspInit+0x108>)
 80020fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002108:	2303      	movs	r3, #3
 800210a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800210c:	2303      	movs	r3, #3
 800210e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002114:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002118:	4619      	mov	r1, r3
 800211a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800211e:	f002 ff65 	bl	8004fec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002122:	4b1c      	ldr	r3, [pc, #112]	@ (8002194 <HAL_ADC_MspInit+0x10c>)
 8002124:	4a1c      	ldr	r2, [pc, #112]	@ (8002198 <HAL_ADC_MspInit+0x110>)
 8002126:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002128:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <HAL_ADC_MspInit+0x10c>)
 800212a:	2205      	movs	r2, #5
 800212c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800212e:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <HAL_ADC_MspInit+0x10c>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002134:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <HAL_ADC_MspInit+0x10c>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800213a:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <HAL_ADC_MspInit+0x10c>)
 800213c:	2280      	movs	r2, #128	@ 0x80
 800213e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002140:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <HAL_ADC_MspInit+0x10c>)
 8002142:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002146:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002148:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <HAL_ADC_MspInit+0x10c>)
 800214a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800214e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002150:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <HAL_ADC_MspInit+0x10c>)
 8002152:	2220      	movs	r2, #32
 8002154:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002156:	4b0f      	ldr	r3, [pc, #60]	@ (8002194 <HAL_ADC_MspInit+0x10c>)
 8002158:	2200      	movs	r2, #0
 800215a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800215c:	480d      	ldr	r0, [pc, #52]	@ (8002194 <HAL_ADC_MspInit+0x10c>)
 800215e:	f002 fc13 	bl	8004988 <HAL_DMA_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002168:	f7ff ff64 	bl	8002034 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a09      	ldr	r2, [pc, #36]	@ (8002194 <HAL_ADC_MspInit+0x10c>)
 8002170:	655a      	str	r2, [r3, #84]	@ 0x54
 8002172:	4a08      	ldr	r2, [pc, #32]	@ (8002194 <HAL_ADC_MspInit+0x10c>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	2012      	movs	r0, #18
 800217e:	f002 fbce 	bl	800491e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002182:	2012      	movs	r0, #18
 8002184:	f002 fbe5 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002188:	bf00      	nop
 800218a:	3778      	adds	r7, #120	@ 0x78
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	200000e8 	.word	0x200000e8
 8002198:	40020008 	.word	0x40020008

0800219c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b0a2      	sub	sp, #136	@ 0x88
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021b4:	f107 0320 	add.w	r3, r7, #32
 80021b8:	2254      	movs	r2, #84	@ 0x54
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f008 f921 	bl	800a404 <memset>
  if(huart->Instance==LPUART1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a4c      	ldr	r2, [pc, #304]	@ (80022f8 <HAL_UART_MspInit+0x15c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	f040 80a1 	bne.w	8002310 <HAL_UART_MspInit+0x174>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80021ce:	2320      	movs	r3, #32
 80021d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d6:	f107 0320 	add.w	r3, r7, #32
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 feb4 	bl	8005f48 <HAL_RCCEx_PeriphCLKConfig>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021e6:	f7ff ff25 	bl	8002034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80021ea:	4b44      	ldr	r3, [pc, #272]	@ (80022fc <HAL_UART_MspInit+0x160>)
 80021ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ee:	4a43      	ldr	r2, [pc, #268]	@ (80022fc <HAL_UART_MspInit+0x160>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80021f6:	4b41      	ldr	r3, [pc, #260]	@ (80022fc <HAL_UART_MspInit+0x160>)
 80021f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	4b3e      	ldr	r3, [pc, #248]	@ (80022fc <HAL_UART_MspInit+0x160>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002206:	4a3d      	ldr	r2, [pc, #244]	@ (80022fc <HAL_UART_MspInit+0x160>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800220e:	4b3b      	ldr	r3, [pc, #236]	@ (80022fc <HAL_UART_MspInit+0x160>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|GPIO_PIN_3;
 800221a:	230c      	movs	r3, #12
 800221c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800222c:	230c      	movs	r3, #12
 800222e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002236:	4619      	mov	r1, r3
 8002238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800223c:	f002 fed6 	bl	8004fec <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8002240:	4b2f      	ldr	r3, [pc, #188]	@ (8002300 <HAL_UART_MspInit+0x164>)
 8002242:	4a30      	ldr	r2, [pc, #192]	@ (8002304 <HAL_UART_MspInit+0x168>)
 8002244:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002246:	4b2e      	ldr	r3, [pc, #184]	@ (8002300 <HAL_UART_MspInit+0x164>)
 8002248:	2222      	movs	r2, #34	@ 0x22
 800224a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800224c:	4b2c      	ldr	r3, [pc, #176]	@ (8002300 <HAL_UART_MspInit+0x164>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002252:	4b2b      	ldr	r3, [pc, #172]	@ (8002300 <HAL_UART_MspInit+0x164>)
 8002254:	2200      	movs	r2, #0
 8002256:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002258:	4b29      	ldr	r3, [pc, #164]	@ (8002300 <HAL_UART_MspInit+0x164>)
 800225a:	2280      	movs	r2, #128	@ 0x80
 800225c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800225e:	4b28      	ldr	r3, [pc, #160]	@ (8002300 <HAL_UART_MspInit+0x164>)
 8002260:	2200      	movs	r2, #0
 8002262:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002264:	4b26      	ldr	r3, [pc, #152]	@ (8002300 <HAL_UART_MspInit+0x164>)
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800226a:	4b25      	ldr	r3, [pc, #148]	@ (8002300 <HAL_UART_MspInit+0x164>)
 800226c:	2220      	movs	r2, #32
 800226e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002270:	4b23      	ldr	r3, [pc, #140]	@ (8002300 <HAL_UART_MspInit+0x164>)
 8002272:	2200      	movs	r2, #0
 8002274:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002276:	4822      	ldr	r0, [pc, #136]	@ (8002300 <HAL_UART_MspInit+0x164>)
 8002278:	f002 fb86 	bl	8004988 <HAL_DMA_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8002282:	f7ff fed7 	bl	8002034 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a1d      	ldr	r2, [pc, #116]	@ (8002300 <HAL_UART_MspInit+0x164>)
 800228a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800228e:	4a1c      	ldr	r2, [pc, #112]	@ (8002300 <HAL_UART_MspInit+0x164>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 8002294:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <HAL_UART_MspInit+0x16c>)
 8002296:	4a1d      	ldr	r2, [pc, #116]	@ (800230c <HAL_UART_MspInit+0x170>)
 8002298:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800229a:	4b1b      	ldr	r3, [pc, #108]	@ (8002308 <HAL_UART_MspInit+0x16c>)
 800229c:	2223      	movs	r2, #35	@ 0x23
 800229e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022a0:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <HAL_UART_MspInit+0x16c>)
 80022a2:	2210      	movs	r2, #16
 80022a4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a6:	4b18      	ldr	r3, [pc, #96]	@ (8002308 <HAL_UART_MspInit+0x16c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022ac:	4b16      	ldr	r3, [pc, #88]	@ (8002308 <HAL_UART_MspInit+0x16c>)
 80022ae:	2280      	movs	r2, #128	@ 0x80
 80022b0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022b2:	4b15      	ldr	r3, [pc, #84]	@ (8002308 <HAL_UART_MspInit+0x16c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022b8:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <HAL_UART_MspInit+0x16c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80022be:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <HAL_UART_MspInit+0x16c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022c4:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <HAL_UART_MspInit+0x16c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80022ca:	480f      	ldr	r0, [pc, #60]	@ (8002308 <HAL_UART_MspInit+0x16c>)
 80022cc:	f002 fb5c 	bl	8004988 <HAL_DMA_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80022d6:	f7ff fead 	bl	8002034 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002308 <HAL_UART_MspInit+0x16c>)
 80022de:	67da      	str	r2, [r3, #124]	@ 0x7c
 80022e0:	4a09      	ldr	r2, [pc, #36]	@ (8002308 <HAL_UART_MspInit+0x16c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	205b      	movs	r0, #91	@ 0x5b
 80022ec:	f002 fb17 	bl	800491e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80022f0:	205b      	movs	r0, #91	@ 0x5b
 80022f2:	f002 fb2e 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022f6:	e0c4      	b.n	8002482 <HAL_UART_MspInit+0x2e6>
 80022f8:	40008000 	.word	0x40008000
 80022fc:	40021000 	.word	0x40021000
 8002300:	20000270 	.word	0x20000270
 8002304:	4002001c 	.word	0x4002001c
 8002308:	200002d0 	.word	0x200002d0
 800230c:	40020030 	.word	0x40020030
  else if(huart->Instance==USART1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a5d      	ldr	r2, [pc, #372]	@ (800248c <HAL_UART_MspInit+0x2f0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	f040 80b3 	bne.w	8002482 <HAL_UART_MspInit+0x2e6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800231c:	2301      	movs	r3, #1
 800231e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002324:	f107 0320 	add.w	r3, r7, #32
 8002328:	4618      	mov	r0, r3
 800232a:	f003 fe0d 	bl	8005f48 <HAL_RCCEx_PeriphCLKConfig>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8002334:	f7ff fe7e 	bl	8002034 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002338:	4b55      	ldr	r3, [pc, #340]	@ (8002490 <HAL_UART_MspInit+0x2f4>)
 800233a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800233c:	4a54      	ldr	r2, [pc, #336]	@ (8002490 <HAL_UART_MspInit+0x2f4>)
 800233e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002342:	6613      	str	r3, [r2, #96]	@ 0x60
 8002344:	4b52      	ldr	r3, [pc, #328]	@ (8002490 <HAL_UART_MspInit+0x2f4>)
 8002346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002350:	4b4f      	ldr	r3, [pc, #316]	@ (8002490 <HAL_UART_MspInit+0x2f4>)
 8002352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002354:	4a4e      	ldr	r2, [pc, #312]	@ (8002490 <HAL_UART_MspInit+0x2f4>)
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800235c:	4b4c      	ldr	r3, [pc, #304]	@ (8002490 <HAL_UART_MspInit+0x2f4>)
 800235e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002368:	4b49      	ldr	r3, [pc, #292]	@ (8002490 <HAL_UART_MspInit+0x2f4>)
 800236a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236c:	4a48      	ldr	r2, [pc, #288]	@ (8002490 <HAL_UART_MspInit+0x2f4>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002374:	4b46      	ldr	r3, [pc, #280]	@ (8002490 <HAL_UART_MspInit+0x2f4>)
 8002376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002380:	2320      	movs	r3, #32
 8002382:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002392:	2307      	movs	r3, #7
 8002394:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002398:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800239c:	4619      	mov	r1, r3
 800239e:	483d      	ldr	r0, [pc, #244]	@ (8002494 <HAL_UART_MspInit+0x2f8>)
 80023a0:	f002 fe24 	bl	8004fec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023a8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023b8:	2307      	movs	r3, #7
 80023ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023be:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80023c2:	4619      	mov	r1, r3
 80023c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023c8:	f002 fe10 	bl	8004fec <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel4;
 80023cc:	4b32      	ldr	r3, [pc, #200]	@ (8002498 <HAL_UART_MspInit+0x2fc>)
 80023ce:	4a33      	ldr	r2, [pc, #204]	@ (800249c <HAL_UART_MspInit+0x300>)
 80023d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80023d2:	4b31      	ldr	r3, [pc, #196]	@ (8002498 <HAL_UART_MspInit+0x2fc>)
 80023d4:	2218      	movs	r2, #24
 80023d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002498 <HAL_UART_MspInit+0x2fc>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023de:	4b2e      	ldr	r3, [pc, #184]	@ (8002498 <HAL_UART_MspInit+0x2fc>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002498 <HAL_UART_MspInit+0x2fc>)
 80023e6:	2280      	movs	r2, #128	@ 0x80
 80023e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002498 <HAL_UART_MspInit+0x2fc>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023f0:	4b29      	ldr	r3, [pc, #164]	@ (8002498 <HAL_UART_MspInit+0x2fc>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80023f6:	4b28      	ldr	r3, [pc, #160]	@ (8002498 <HAL_UART_MspInit+0x2fc>)
 80023f8:	2220      	movs	r2, #32
 80023fa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023fc:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <HAL_UART_MspInit+0x2fc>)
 80023fe:	2200      	movs	r2, #0
 8002400:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002402:	4825      	ldr	r0, [pc, #148]	@ (8002498 <HAL_UART_MspInit+0x2fc>)
 8002404:	f002 fac0 	bl	8004988 <HAL_DMA_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_UART_MspInit+0x276>
      Error_Handler();
 800240e:	f7ff fe11 	bl	8002034 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a20      	ldr	r2, [pc, #128]	@ (8002498 <HAL_UART_MspInit+0x2fc>)
 8002416:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800241a:	4a1f      	ldr	r2, [pc, #124]	@ (8002498 <HAL_UART_MspInit+0x2fc>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel5;
 8002420:	4b1f      	ldr	r3, [pc, #124]	@ (80024a0 <HAL_UART_MspInit+0x304>)
 8002422:	4a20      	ldr	r2, [pc, #128]	@ (80024a4 <HAL_UART_MspInit+0x308>)
 8002424:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002426:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <HAL_UART_MspInit+0x304>)
 8002428:	2219      	movs	r2, #25
 800242a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800242c:	4b1c      	ldr	r3, [pc, #112]	@ (80024a0 <HAL_UART_MspInit+0x304>)
 800242e:	2210      	movs	r2, #16
 8002430:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002432:	4b1b      	ldr	r3, [pc, #108]	@ (80024a0 <HAL_UART_MspInit+0x304>)
 8002434:	2200      	movs	r2, #0
 8002436:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002438:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <HAL_UART_MspInit+0x304>)
 800243a:	2280      	movs	r2, #128	@ 0x80
 800243c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800243e:	4b18      	ldr	r3, [pc, #96]	@ (80024a0 <HAL_UART_MspInit+0x304>)
 8002440:	2200      	movs	r2, #0
 8002442:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002444:	4b16      	ldr	r3, [pc, #88]	@ (80024a0 <HAL_UART_MspInit+0x304>)
 8002446:	2200      	movs	r2, #0
 8002448:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800244a:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <HAL_UART_MspInit+0x304>)
 800244c:	2200      	movs	r2, #0
 800244e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002450:	4b13      	ldr	r3, [pc, #76]	@ (80024a0 <HAL_UART_MspInit+0x304>)
 8002452:	2200      	movs	r2, #0
 8002454:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002456:	4812      	ldr	r0, [pc, #72]	@ (80024a0 <HAL_UART_MspInit+0x304>)
 8002458:	f002 fa96 	bl	8004988 <HAL_DMA_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 8002462:	f7ff fde7 	bl	8002034 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a0d      	ldr	r2, [pc, #52]	@ (80024a0 <HAL_UART_MspInit+0x304>)
 800246a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800246c:	4a0c      	ldr	r2, [pc, #48]	@ (80024a0 <HAL_UART_MspInit+0x304>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	2025      	movs	r0, #37	@ 0x25
 8002478:	f002 fa51 	bl	800491e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800247c:	2025      	movs	r0, #37	@ 0x25
 800247e:	f002 fa68 	bl	8004952 <HAL_NVIC_EnableIRQ>
}
 8002482:	bf00      	nop
 8002484:	3788      	adds	r7, #136	@ 0x88
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40013800 	.word	0x40013800
 8002490:	40021000 	.word	0x40021000
 8002494:	48000800 	.word	0x48000800
 8002498:	20000330 	.word	0x20000330
 800249c:	40020044 	.word	0x40020044
 80024a0:	20000390 	.word	0x20000390
 80024a4:	40020058 	.word	0x40020058

080024a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	@ 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a17      	ldr	r2, [pc, #92]	@ (8002524 <HAL_TIM_Encoder_MspInit+0x7c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d127      	bne.n	800251a <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ca:	4b17      	ldr	r3, [pc, #92]	@ (8002528 <HAL_TIM_Encoder_MspInit+0x80>)
 80024cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ce:	4a16      	ldr	r2, [pc, #88]	@ (8002528 <HAL_TIM_Encoder_MspInit+0x80>)
 80024d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80024d6:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <HAL_TIM_Encoder_MspInit+0x80>)
 80024d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_TIM_Encoder_MspInit+0x80>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	4a10      	ldr	r2, [pc, #64]	@ (8002528 <HAL_TIM_Encoder_MspInit+0x80>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <HAL_TIM_Encoder_MspInit+0x80>)
 80024f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024fa:	2303      	movs	r3, #3
 80024fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800250a:	2302      	movs	r3, #2
 800250c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	4619      	mov	r1, r3
 8002514:	4805      	ldr	r0, [pc, #20]	@ (800252c <HAL_TIM_Encoder_MspInit+0x84>)
 8002516:	f002 fd69 	bl	8004fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800251a:	bf00      	nop
 800251c:	3728      	adds	r7, #40	@ 0x28
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40012c00 	.word	0x40012c00
 8002528:	40021000 	.word	0x40021000
 800252c:	48000800 	.word	0x48000800

08002530 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002540:	d114      	bne.n	800256c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002542:	4b1e      	ldr	r3, [pc, #120]	@ (80025bc <HAL_TIM_Base_MspInit+0x8c>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002546:	4a1d      	ldr	r2, [pc, #116]	@ (80025bc <HAL_TIM_Base_MspInit+0x8c>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6593      	str	r3, [r2, #88]	@ 0x58
 800254e:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <HAL_TIM_Base_MspInit+0x8c>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	201c      	movs	r0, #28
 8002560:	f002 f9dd 	bl	800491e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002564:	201c      	movs	r0, #28
 8002566:	f002 f9f4 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800256a:	e022      	b.n	80025b2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a13      	ldr	r2, [pc, #76]	@ (80025c0 <HAL_TIM_Base_MspInit+0x90>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d10c      	bne.n	8002590 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002576:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <HAL_TIM_Base_MspInit+0x8c>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257a:	4a10      	ldr	r2, [pc, #64]	@ (80025bc <HAL_TIM_Base_MspInit+0x8c>)
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	6593      	str	r3, [r2, #88]	@ 0x58
 8002582:	4b0e      	ldr	r3, [pc, #56]	@ (80025bc <HAL_TIM_Base_MspInit+0x8c>)
 8002584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
}
 800258e:	e010      	b.n	80025b2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <HAL_TIM_Base_MspInit+0x94>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d10b      	bne.n	80025b2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800259a:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <HAL_TIM_Base_MspInit+0x8c>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259e:	4a07      	ldr	r2, [pc, #28]	@ (80025bc <HAL_TIM_Base_MspInit+0x8c>)
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a6:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <HAL_TIM_Base_MspInit+0x8c>)
 80025a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
}
 80025b2:	bf00      	nop
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40000400 	.word	0x40000400
 80025c4:	40000800 	.word	0x40000800

080025c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	@ 0x28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a23      	ldr	r2, [pc, #140]	@ (8002674 <HAL_TIM_MspPostInit+0xac>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d11d      	bne.n	8002626 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ea:	4b23      	ldr	r3, [pc, #140]	@ (8002678 <HAL_TIM_MspPostInit+0xb0>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ee:	4a22      	ldr	r2, [pc, #136]	@ (8002678 <HAL_TIM_MspPostInit+0xb0>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f6:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <HAL_TIM_MspPostInit+0xb0>)
 80025f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002602:	2340      	movs	r3, #64	@ 0x40
 8002604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002612:	2302      	movs	r3, #2
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4619      	mov	r1, r3
 800261c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002620:	f002 fce4 	bl	8004fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002624:	e022      	b.n	800266c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM4)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a14      	ldr	r2, [pc, #80]	@ (800267c <HAL_TIM_MspPostInit+0xb4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d11d      	bne.n	800266c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002630:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <HAL_TIM_MspPostInit+0xb0>)
 8002632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002634:	4a10      	ldr	r2, [pc, #64]	@ (8002678 <HAL_TIM_MspPostInit+0xb0>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800263c:	4b0e      	ldr	r3, [pc, #56]	@ (8002678 <HAL_TIM_MspPostInit+0xb0>)
 800263e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002648:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800265a:	230a      	movs	r3, #10
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002668:	f002 fcc0 	bl	8004fec <HAL_GPIO_Init>
}
 800266c:	bf00      	nop
 800266e:	3728      	adds	r7, #40	@ 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40000400 	.word	0x40000400
 8002678:	40021000 	.word	0x40021000
 800267c:	40000800 	.word	0x40000800

08002680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <NMI_Handler+0x4>

08002688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <HardFault_Handler+0x4>

08002690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <MemManage_Handler+0x4>

08002698 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <BusFault_Handler+0x4>

080026a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <UsageFault_Handler+0x4>

080026a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d6:	f000 f8f3 	bl	80028c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026e4:	4802      	ldr	r0, [pc, #8]	@ (80026f0 <DMA1_Channel1_IRQHandler+0x10>)
 80026e6:	f002 fb32 	bl	8004d4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200000e8 	.word	0x200000e8

080026f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80026f8:	4802      	ldr	r0, [pc, #8]	@ (8002704 <DMA1_Channel2_IRQHandler+0x10>)
 80026fa:	f002 fb28 	bl	8004d4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000270 	.word	0x20000270

08002708 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800270c:	4802      	ldr	r0, [pc, #8]	@ (8002718 <DMA1_Channel3_IRQHandler+0x10>)
 800270e:	f002 fb1e 	bl	8004d4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200002d0 	.word	0x200002d0

0800271c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002720:	4802      	ldr	r0, [pc, #8]	@ (800272c <DMA1_Channel4_IRQHandler+0x10>)
 8002722:	f002 fb14 	bl	8004d4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000330 	.word	0x20000330

08002730 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002734:	4802      	ldr	r0, [pc, #8]	@ (8002740 <DMA1_Channel5_IRQHandler+0x10>)
 8002736:	f002 fb0a 	bl	8004d4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000390 	.word	0x20000390

08002744 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002748:	4802      	ldr	r0, [pc, #8]	@ (8002754 <ADC1_2_IRQHandler+0x10>)
 800274a:	f000 fdcd 	bl	80032e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2000007c 	.word	0x2000007c

08002758 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800275c:	4802      	ldr	r0, [pc, #8]	@ (8002768 <TIM2_IRQHandler+0x10>)
 800275e:	f004 fa29 	bl	8006bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000043c 	.word	0x2000043c

0800276c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002770:	4802      	ldr	r0, [pc, #8]	@ (800277c <USART1_IRQHandler+0x10>)
 8002772:	f005 fc6d 	bl	8008050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200001dc 	.word	0x200001dc

08002780 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002784:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002788:	f002 fde4 	bl	8005354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}

08002790 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <LPUART1_IRQHandler+0x10>)
 8002796:	f005 fc5b 	bl	8008050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000148 	.word	0x20000148

080027a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <SystemInit+0x20>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ae:	4a05      	ldr	r2, [pc, #20]	@ (80027c4 <SystemInit+0x20>)
 80027b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027c8:	480d      	ldr	r0, [pc, #52]	@ (8002800 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027cc:	f7ff ffea 	bl	80027a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027d0:	480c      	ldr	r0, [pc, #48]	@ (8002804 <LoopForever+0x6>)
  ldr r1, =_edata
 80027d2:	490d      	ldr	r1, [pc, #52]	@ (8002808 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027d4:	4a0d      	ldr	r2, [pc, #52]	@ (800280c <LoopForever+0xe>)
  movs r3, #0
 80027d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80027d8:	e002      	b.n	80027e0 <LoopCopyDataInit>

080027da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027de:	3304      	adds	r3, #4

080027e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e4:	d3f9      	bcc.n	80027da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002810 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002814 <LoopForever+0x16>)
  movs r3, #0
 80027ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027ec:	e001      	b.n	80027f2 <LoopFillZerobss>

080027ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f0:	3204      	adds	r2, #4

080027f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f4:	d3fb      	bcc.n	80027ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027f6:	f007 fe13 	bl	800a420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027fa:	f7fe fb39 	bl	8000e70 <main>

080027fe <LoopForever>:

LoopForever:
    b LoopForever
 80027fe:	e7fe      	b.n	80027fe <LoopForever>
  ldr   r0, =_estack
 8002800:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002808:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800280c:	0800a750 	.word	0x0800a750
  ldr r2, =_sbss
 8002810:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002814:	200006fc 	.word	0x200006fc

08002818 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002818:	e7fe      	b.n	8002818 <ADC3_IRQHandler>

0800281a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002824:	2003      	movs	r0, #3
 8002826:	f002 f86f 	bl	8004908 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f80e 	bl	800284c <HAL_InitTick>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	71fb      	strb	r3, [r7, #7]
 800283a:	e001      	b.n	8002840 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800283c:	f7ff fc00 	bl	8002040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002840:	79fb      	ldrb	r3, [r7, #7]

}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002858:	4b16      	ldr	r3, [pc, #88]	@ (80028b4 <HAL_InitTick+0x68>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d022      	beq.n	80028a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002860:	4b15      	ldr	r3, [pc, #84]	@ (80028b8 <HAL_InitTick+0x6c>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b13      	ldr	r3, [pc, #76]	@ (80028b4 <HAL_InitTick+0x68>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800286c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	4618      	mov	r0, r3
 8002876:	f002 f87a 	bl	800496e <HAL_SYSTICK_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10f      	bne.n	80028a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b0f      	cmp	r3, #15
 8002884:	d809      	bhi.n	800289a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002886:	2200      	movs	r2, #0
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	f04f 30ff 	mov.w	r0, #4294967295
 800288e:	f002 f846 	bl	800491e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002892:	4a0a      	ldr	r2, [pc, #40]	@ (80028bc <HAL_InitTick+0x70>)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	e007      	b.n	80028aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	e004      	b.n	80028aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
 80028a4:	e001      	b.n	80028aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20000008 	.word	0x20000008
 80028b8:	20000000 	.word	0x20000000
 80028bc:	20000004 	.word	0x20000004

080028c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c4:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <HAL_IncTick+0x1c>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_IncTick+0x20>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4413      	add	r3, r2
 80028ce:	4a03      	ldr	r2, [pc, #12]	@ (80028dc <HAL_IncTick+0x1c>)
 80028d0:	6013      	str	r3, [r2, #0]
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	200005c0 	.word	0x200005c0
 80028e0:	20000008 	.word	0x20000008

080028e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return uwTick;
 80028e8:	4b03      	ldr	r3, [pc, #12]	@ (80028f8 <HAL_GetTick+0x14>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	200005c0 	.word	0x200005c0

080028fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	609a      	str	r2, [r3, #8]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	609a      	str	r2, [r3, #8]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3360      	adds	r3, #96	@ 0x60
 8002976:	461a      	mov	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <LL_ADC_SetOffset+0x44>)
 8002986:	4013      	ands	r3, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	4313      	orrs	r3, r2
 8002994:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800299c:	bf00      	nop
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	03fff000 	.word	0x03fff000

080029ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3360      	adds	r3, #96	@ 0x60
 80029ba:	461a      	mov	r2, r3
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3360      	adds	r3, #96	@ 0x60
 80029e8:	461a      	mov	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b087      	sub	sp, #28
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3360      	adds	r3, #96	@ 0x60
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a38:	bf00      	nop
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3360      	adds	r3, #96	@ 0x60
 8002a54:	461a      	mov	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	615a      	str	r2, [r3, #20]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b087      	sub	sp, #28
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3330      	adds	r3, #48	@ 0x30
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	4413      	add	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	211f      	movs	r1, #31
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	401a      	ands	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	f003 011f 	and.w	r1, r3, #31
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3314      	adds	r3, #20
 8002b54:	461a      	mov	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	0e5b      	lsrs	r3, r3, #25
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	4413      	add	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	0d1b      	lsrs	r3, r3, #20
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	2107      	movs	r1, #7
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	401a      	ands	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	0d1b      	lsrs	r3, r3, #20
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0318 	and.w	r3, r3, #24
 8002bbe:	4908      	ldr	r1, [pc, #32]	@ (8002be0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bc0:	40d9      	lsrs	r1, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	400b      	ands	r3, r1
 8002bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	0007ffff 	.word	0x0007ffff

08002be4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 031f 	and.w	r3, r3, #31
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002c2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6093      	str	r3, [r2, #8]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c54:	d101      	bne.n	8002c5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ca4:	d101      	bne.n	8002caa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ccc:	f043 0201 	orr.w	r2, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cf4:	f043 0202 	orr.w	r2, r3, #2
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <LL_ADC_IsEnabled+0x18>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <LL_ADC_IsEnabled+0x1a>
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d101      	bne.n	8002d46 <LL_ADC_IsDisableOngoing+0x18>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <LL_ADC_IsDisableOngoing+0x1a>
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d68:	f043 0204 	orr.w	r2, r3, #4
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d101      	bne.n	8002d94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d101      	bne.n	8002dba <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b089      	sub	sp, #36	@ 0x24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e1a9      	b.n	8003136 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff f949 	bl	8002088 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff19 	bl	8002c40 <LL_ADC_IsDeepPowerDownEnabled>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d004      	beq.n	8002e1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff feff 	bl	8002c1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ff34 	bl	8002c90 <LL_ADC_IsInternalRegulatorEnabled>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d115      	bne.n	8002e5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ff18 	bl	8002c68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e38:	4b9c      	ldr	r3, [pc, #624]	@ (80030ac <HAL_ADC_Init+0x2e4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	099b      	lsrs	r3, r3, #6
 8002e3e:	4a9c      	ldr	r2, [pc, #624]	@ (80030b0 <HAL_ADC_Init+0x2e8>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	099b      	lsrs	r3, r3, #6
 8002e46:	3301      	adds	r3, #1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e4c:	e002      	b.n	8002e54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f9      	bne.n	8002e4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff ff16 	bl	8002c90 <LL_ADC_IsInternalRegulatorEnabled>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6e:	f043 0210 	orr.w	r2, r3, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e7a:	f043 0201 	orr.w	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ff76 	bl	8002d7c <LL_ADC_REG_IsConversionOngoing>
 8002e90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 8142 	bne.w	8003124 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f040 813e 	bne.w	8003124 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002eb0:	f043 0202 	orr.w	r2, r3, #2
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff23 	bl	8002d08 <LL_ADC_IsEnabled>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d141      	bne.n	8002f4c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ed0:	d004      	beq.n	8002edc <HAL_ADC_Init+0x114>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a77      	ldr	r2, [pc, #476]	@ (80030b4 <HAL_ADC_Init+0x2ec>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d10f      	bne.n	8002efc <HAL_ADC_Init+0x134>
 8002edc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ee0:	f7ff ff12 	bl	8002d08 <LL_ADC_IsEnabled>
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	4873      	ldr	r0, [pc, #460]	@ (80030b4 <HAL_ADC_Init+0x2ec>)
 8002ee8:	f7ff ff0e 	bl	8002d08 <LL_ADC_IsEnabled>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4323      	orrs	r3, r4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	e012      	b.n	8002f22 <HAL_ADC_Init+0x15a>
 8002efc:	486e      	ldr	r0, [pc, #440]	@ (80030b8 <HAL_ADC_Init+0x2f0>)
 8002efe:	f7ff ff03 	bl	8002d08 <LL_ADC_IsEnabled>
 8002f02:	4604      	mov	r4, r0
 8002f04:	486d      	ldr	r0, [pc, #436]	@ (80030bc <HAL_ADC_Init+0x2f4>)
 8002f06:	f7ff feff 	bl	8002d08 <LL_ADC_IsEnabled>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	431c      	orrs	r4, r3
 8002f0e:	486c      	ldr	r0, [pc, #432]	@ (80030c0 <HAL_ADC_Init+0x2f8>)
 8002f10:	f7ff fefa 	bl	8002d08 <LL_ADC_IsEnabled>
 8002f14:	4603      	mov	r3, r0
 8002f16:	4323      	orrs	r3, r4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d012      	beq.n	8002f4c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f2e:	d004      	beq.n	8002f3a <HAL_ADC_Init+0x172>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a5f      	ldr	r2, [pc, #380]	@ (80030b4 <HAL_ADC_Init+0x2ec>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_Init+0x176>
 8002f3a:	4a62      	ldr	r2, [pc, #392]	@ (80030c4 <HAL_ADC_Init+0x2fc>)
 8002f3c:	e000      	b.n	8002f40 <HAL_ADC_Init+0x178>
 8002f3e:	4a62      	ldr	r2, [pc, #392]	@ (80030c8 <HAL_ADC_Init+0x300>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7ff fcd8 	bl	80028fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7f5b      	ldrb	r3, [r3, #29]
 8002f50:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f56:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002f5c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002f62:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f6a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d106      	bne.n	8002f88 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	045b      	lsls	r3, r3, #17
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d009      	beq.n	8002fa4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	4b48      	ldr	r3, [pc, #288]	@ (80030cc <HAL_ADC_Init+0x304>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	69b9      	ldr	r1, [r7, #24]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fee5 	bl	8002da2 <LL_ADC_INJ_IsConversionOngoing>
 8002fd8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d17f      	bne.n	80030e0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d17c      	bne.n	80030e0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ff2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003002:	f023 0302 	bic.w	r3, r3, #2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	69b9      	ldr	r1, [r7, #24]
 800300c:	430b      	orrs	r3, r1
 800300e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d017      	beq.n	8003048 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003026:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003030:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003034:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6911      	ldr	r1, [r2, #16]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	430b      	orrs	r3, r1
 8003042:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003046:	e013      	b.n	8003070 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003056:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003068:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800306c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003076:	2b01      	cmp	r3, #1
 8003078:	d12a      	bne.n	80030d0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003084:	f023 0304 	bic.w	r3, r3, #4
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003090:	4311      	orrs	r1, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003096:	4311      	orrs	r1, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800309c:	430a      	orrs	r2, r1
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	611a      	str	r2, [r3, #16]
 80030aa:	e019      	b.n	80030e0 <HAL_ADC_Init+0x318>
 80030ac:	20000000 	.word	0x20000000
 80030b0:	053e2d63 	.word	0x053e2d63
 80030b4:	50000100 	.word	0x50000100
 80030b8:	50000400 	.word	0x50000400
 80030bc:	50000500 	.word	0x50000500
 80030c0:	50000600 	.word	0x50000600
 80030c4:	50000300 	.word	0x50000300
 80030c8:	50000700 	.word	0x50000700
 80030cc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d10c      	bne.n	8003102 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	f023 010f 	bic.w	r1, r3, #15
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	1e5a      	subs	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003100:	e007      	b.n	8003112 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 020f 	bic.w	r2, r2, #15
 8003110:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003116:	f023 0303 	bic.w	r3, r3, #3
 800311a:	f043 0201 	orr.w	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003122:	e007      	b.n	8003134 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003128:	f043 0210 	orr.w	r2, r3, #16
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003134:	7ffb      	ldrb	r3, [r7, #31]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	@ 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd90      	pop	{r4, r7, pc}
 800313e:	bf00      	nop

08003140 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003154:	d004      	beq.n	8003160 <HAL_ADC_Start_DMA+0x20>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a5a      	ldr	r2, [pc, #360]	@ (80032c4 <HAL_ADC_Start_DMA+0x184>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_ADC_Start_DMA+0x24>
 8003160:	4b59      	ldr	r3, [pc, #356]	@ (80032c8 <HAL_ADC_Start_DMA+0x188>)
 8003162:	e000      	b.n	8003166 <HAL_ADC_Start_DMA+0x26>
 8003164:	4b59      	ldr	r3, [pc, #356]	@ (80032cc <HAL_ADC_Start_DMA+0x18c>)
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fd3c 	bl	8002be4 <LL_ADC_GetMultimode>
 800316c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fe02 	bl	8002d7c <LL_ADC_REG_IsConversionOngoing>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 809b 	bne.w	80032b6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_ADC_Start_DMA+0x4e>
 800318a:	2302      	movs	r3, #2
 800318c:	e096      	b.n	80032bc <HAL_ADC_Start_DMA+0x17c>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a4d      	ldr	r2, [pc, #308]	@ (80032d0 <HAL_ADC_Start_DMA+0x190>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d008      	beq.n	80031b2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	d002      	beq.n	80031b2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b09      	cmp	r3, #9
 80031b0:	d17a      	bne.n	80032a8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 ff60 	bl	8004078 <ADC_Enable>
 80031b8:	4603      	mov	r3, r0
 80031ba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d16d      	bne.n	800329e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a3a      	ldr	r2, [pc, #232]	@ (80032c4 <HAL_ADC_Start_DMA+0x184>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d009      	beq.n	80031f4 <HAL_ADC_Start_DMA+0xb4>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a3b      	ldr	r2, [pc, #236]	@ (80032d4 <HAL_ADC_Start_DMA+0x194>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d002      	beq.n	80031f0 <HAL_ADC_Start_DMA+0xb0>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	e003      	b.n	80031f8 <HAL_ADC_Start_DMA+0xb8>
 80031f0:	4b39      	ldr	r3, [pc, #228]	@ (80032d8 <HAL_ADC_Start_DMA+0x198>)
 80031f2:	e001      	b.n	80031f8 <HAL_ADC_Start_DMA+0xb8>
 80031f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d002      	beq.n	8003206 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003216:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003222:	f023 0206 	bic.w	r2, r3, #6
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	661a      	str	r2, [r3, #96]	@ 0x60
 800322a:	e002      	b.n	8003232 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003236:	4a29      	ldr	r2, [pc, #164]	@ (80032dc <HAL_ADC_Start_DMA+0x19c>)
 8003238:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323e:	4a28      	ldr	r2, [pc, #160]	@ (80032e0 <HAL_ADC_Start_DMA+0x1a0>)
 8003240:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003246:	4a27      	ldr	r2, [pc, #156]	@ (80032e4 <HAL_ADC_Start_DMA+0x1a4>)
 8003248:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	221c      	movs	r2, #28
 8003250:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0210 	orr.w	r2, r2, #16
 8003268:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3340      	adds	r3, #64	@ 0x40
 8003284:	4619      	mov	r1, r3
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f001 fc25 	bl	8004ad8 <HAL_DMA_Start_IT>
 800328e:	4603      	mov	r3, r0
 8003290:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fd5c 	bl	8002d54 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800329c:	e00d      	b.n	80032ba <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80032a6:	e008      	b.n	80032ba <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80032b4:	e001      	b.n	80032ba <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
 80032b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	50000100 	.word	0x50000100
 80032c8:	50000300 	.word	0x50000300
 80032cc:	50000700 	.word	0x50000700
 80032d0:	50000600 	.word	0x50000600
 80032d4:	50000500 	.word	0x50000500
 80032d8:	50000400 	.word	0x50000400
 80032dc:	08004263 	.word	0x08004263
 80032e0:	0800433b 	.word	0x0800433b
 80032e4:	08004357 	.word	0x08004357

080032e8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08a      	sub	sp, #40	@ 0x28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80032f0:	2300      	movs	r3, #0
 80032f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800330c:	d004      	beq.n	8003318 <HAL_ADC_IRQHandler+0x30>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a8e      	ldr	r2, [pc, #568]	@ (800354c <HAL_ADC_IRQHandler+0x264>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d101      	bne.n	800331c <HAL_ADC_IRQHandler+0x34>
 8003318:	4b8d      	ldr	r3, [pc, #564]	@ (8003550 <HAL_ADC_IRQHandler+0x268>)
 800331a:	e000      	b.n	800331e <HAL_ADC_IRQHandler+0x36>
 800331c:	4b8d      	ldr	r3, [pc, #564]	@ (8003554 <HAL_ADC_IRQHandler+0x26c>)
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fc60 	bl	8002be4 <LL_ADC_GetMultimode>
 8003324:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d017      	beq.n	8003360 <HAL_ADC_IRQHandler+0x78>
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d012      	beq.n	8003360 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b00      	cmp	r3, #0
 8003344:	d105      	bne.n	8003352 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f001 f8f6 	bl	8004544 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2202      	movs	r2, #2
 800335e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d004      	beq.n	8003374 <HAL_ADC_IRQHandler+0x8c>
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10b      	bne.n	800338c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 8094 	beq.w	80034a8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 808e 	beq.w	80034a8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fb79 	bl	8002aa0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d072      	beq.n	800349a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a64      	ldr	r2, [pc, #400]	@ (800354c <HAL_ADC_IRQHandler+0x264>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_ADC_IRQHandler+0xea>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a65      	ldr	r2, [pc, #404]	@ (8003558 <HAL_ADC_IRQHandler+0x270>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d002      	beq.n	80033ce <HAL_ADC_IRQHandler+0xe6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	e003      	b.n	80033d6 <HAL_ADC_IRQHandler+0xee>
 80033ce:	4b63      	ldr	r3, [pc, #396]	@ (800355c <HAL_ADC_IRQHandler+0x274>)
 80033d0:	e001      	b.n	80033d6 <HAL_ADC_IRQHandler+0xee>
 80033d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	4293      	cmp	r3, r2
 80033dc:	d008      	beq.n	80033f0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b05      	cmp	r3, #5
 80033e8:	d002      	beq.n	80033f0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b09      	cmp	r3, #9
 80033ee:	d104      	bne.n	80033fa <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	623b      	str	r3, [r7, #32]
 80033f8:	e014      	b.n	8003424 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a53      	ldr	r2, [pc, #332]	@ (800354c <HAL_ADC_IRQHandler+0x264>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d009      	beq.n	8003418 <HAL_ADC_IRQHandler+0x130>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a53      	ldr	r2, [pc, #332]	@ (8003558 <HAL_ADC_IRQHandler+0x270>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d002      	beq.n	8003414 <HAL_ADC_IRQHandler+0x12c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	e003      	b.n	800341c <HAL_ADC_IRQHandler+0x134>
 8003414:	4b51      	ldr	r3, [pc, #324]	@ (800355c <HAL_ADC_IRQHandler+0x274>)
 8003416:	e001      	b.n	800341c <HAL_ADC_IRQHandler+0x134>
 8003418:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800341c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d135      	bne.n	800349a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b08      	cmp	r3, #8
 800343a:	d12e      	bne.n	800349a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fc9b 	bl	8002d7c <LL_ADC_REG_IsConversionOngoing>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d11a      	bne.n	8003482 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 020c 	bic.w	r2, r2, #12
 800345a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003460:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d112      	bne.n	800349a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003478:	f043 0201 	orr.w	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003480:	e00b      	b.n	800349a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003486:	f043 0210 	orr.w	r2, r3, #16
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003492:	f043 0201 	orr.w	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f984 	bl	80037a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	220c      	movs	r2, #12
 80034a6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d004      	beq.n	80034bc <HAL_ADC_IRQHandler+0x1d4>
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10b      	bne.n	80034d4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 80b3 	beq.w	800362e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80ad 	beq.w	800362e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fb14 	bl	8002b1e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80034f6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff facf 	bl	8002aa0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003502:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a10      	ldr	r2, [pc, #64]	@ (800354c <HAL_ADC_IRQHandler+0x264>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_ADC_IRQHandler+0x23a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a11      	ldr	r2, [pc, #68]	@ (8003558 <HAL_ADC_IRQHandler+0x270>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d002      	beq.n	800351e <HAL_ADC_IRQHandler+0x236>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	e003      	b.n	8003526 <HAL_ADC_IRQHandler+0x23e>
 800351e:	4b0f      	ldr	r3, [pc, #60]	@ (800355c <HAL_ADC_IRQHandler+0x274>)
 8003520:	e001      	b.n	8003526 <HAL_ADC_IRQHandler+0x23e>
 8003522:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	4293      	cmp	r3, r2
 800352c:	d008      	beq.n	8003540 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2b06      	cmp	r3, #6
 8003538:	d002      	beq.n	8003540 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b07      	cmp	r3, #7
 800353e:	d10f      	bne.n	8003560 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	623b      	str	r3, [r7, #32]
 8003548:	e01f      	b.n	800358a <HAL_ADC_IRQHandler+0x2a2>
 800354a:	bf00      	nop
 800354c:	50000100 	.word	0x50000100
 8003550:	50000300 	.word	0x50000300
 8003554:	50000700 	.word	0x50000700
 8003558:	50000500 	.word	0x50000500
 800355c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a8b      	ldr	r2, [pc, #556]	@ (8003794 <HAL_ADC_IRQHandler+0x4ac>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d009      	beq.n	800357e <HAL_ADC_IRQHandler+0x296>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a8a      	ldr	r2, [pc, #552]	@ (8003798 <HAL_ADC_IRQHandler+0x4b0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d002      	beq.n	800357a <HAL_ADC_IRQHandler+0x292>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	e003      	b.n	8003582 <HAL_ADC_IRQHandler+0x29a>
 800357a:	4b88      	ldr	r3, [pc, #544]	@ (800379c <HAL_ADC_IRQHandler+0x4b4>)
 800357c:	e001      	b.n	8003582 <HAL_ADC_IRQHandler+0x29a>
 800357e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003582:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d047      	beq.n	8003620 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <HAL_ADC_IRQHandler+0x2c2>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d03f      	beq.n	8003620 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d13a      	bne.n	8003620 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b4:	2b40      	cmp	r3, #64	@ 0x40
 80035b6:	d133      	bne.n	8003620 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d12e      	bne.n	8003620 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fbeb 	bl	8002da2 <LL_ADC_INJ_IsConversionOngoing>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d11a      	bne.n	8003608 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035e0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d112      	bne.n	8003620 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fe:	f043 0201 	orr.w	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003606:	e00b      	b.n	8003620 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360c:	f043 0210 	orr.w	r2, r3, #16
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003618:	f043 0201 	orr.w	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 ff67 	bl	80044f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2260      	movs	r2, #96	@ 0x60
 800362c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003634:	2b00      	cmp	r3, #0
 8003636:	d011      	beq.n	800365c <HAL_ADC_IRQHandler+0x374>
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00c      	beq.n	800365c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003646:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f8be 	bl	80037d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2280      	movs	r2, #128	@ 0x80
 800365a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d012      	beq.n	800368c <HAL_ADC_IRQHandler+0x3a4>
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00d      	beq.n	800368c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003674:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 ff4d 	bl	800451c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800368a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003692:	2b00      	cmp	r3, #0
 8003694:	d012      	beq.n	80036bc <HAL_ADC_IRQHandler+0x3d4>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00d      	beq.n	80036bc <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 ff3f 	bl	8004530 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d043      	beq.n	800374e <HAL_ADC_IRQHandler+0x466>
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d03e      	beq.n	800374e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d102      	bne.n	80036de <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80036d8:	2301      	movs	r3, #1
 80036da:	627b      	str	r3, [r7, #36]	@ 0x24
 80036dc:	e021      	b.n	8003722 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d015      	beq.n	8003710 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ec:	d004      	beq.n	80036f8 <HAL_ADC_IRQHandler+0x410>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a28      	ldr	r2, [pc, #160]	@ (8003794 <HAL_ADC_IRQHandler+0x4ac>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d101      	bne.n	80036fc <HAL_ADC_IRQHandler+0x414>
 80036f8:	4b29      	ldr	r3, [pc, #164]	@ (80037a0 <HAL_ADC_IRQHandler+0x4b8>)
 80036fa:	e000      	b.n	80036fe <HAL_ADC_IRQHandler+0x416>
 80036fc:	4b29      	ldr	r3, [pc, #164]	@ (80037a4 <HAL_ADC_IRQHandler+0x4bc>)
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff fa7e 	bl	8002c00 <LL_ADC_GetMultiDMATransfer>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800370a:	2301      	movs	r3, #1
 800370c:	627b      	str	r3, [r7, #36]	@ 0x24
 800370e:	e008      	b.n	8003722 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800371e:	2301      	movs	r3, #1
 8003720:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	2b01      	cmp	r3, #1
 8003726:	d10e      	bne.n	8003746 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003738:	f043 0202 	orr.w	r2, r3, #2
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f84f 	bl	80037e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2210      	movs	r2, #16
 800374c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003754:	2b00      	cmp	r3, #0
 8003756:	d018      	beq.n	800378a <HAL_ADC_IRQHandler+0x4a2>
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375e:	2b00      	cmp	r3, #0
 8003760:	d013      	beq.n	800378a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003766:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003772:	f043 0208 	orr.w	r2, r3, #8
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003782:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 febf 	bl	8004508 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800378a:	bf00      	nop
 800378c:	3728      	adds	r7, #40	@ 0x28
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	50000100 	.word	0x50000100
 8003798:	50000500 	.word	0x50000500
 800379c:	50000400 	.word	0x50000400
 80037a0:	50000300 	.word	0x50000300
 80037a4:	50000700 	.word	0x50000700

080037a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b0b6      	sub	sp, #216	@ 0xd8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003812:	2b01      	cmp	r3, #1
 8003814:	d102      	bne.n	800381c <HAL_ADC_ConfigChannel+0x24>
 8003816:	2302      	movs	r3, #2
 8003818:	f000 bc13 	b.w	8004042 <HAL_ADC_ConfigChannel+0x84a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff faa7 	bl	8002d7c <LL_ADC_REG_IsConversionOngoing>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	f040 83f3 	bne.w	800401c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	f7ff f93f 	bl	8002ac6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fa95 	bl	8002d7c <LL_ADC_REG_IsConversionOngoing>
 8003852:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff faa1 	bl	8002da2 <LL_ADC_INJ_IsConversionOngoing>
 8003860:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003864:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003868:	2b00      	cmp	r3, #0
 800386a:	f040 81d9 	bne.w	8003c20 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800386e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003872:	2b00      	cmp	r3, #0
 8003874:	f040 81d4 	bne.w	8003c20 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003880:	d10f      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2200      	movs	r2, #0
 800388c:	4619      	mov	r1, r3
 800388e:	f7ff f959 	bl	8002b44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff f8ed 	bl	8002a7a <LL_ADC_SetSamplingTimeCommonConfig>
 80038a0:	e00e      	b.n	80038c0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6819      	ldr	r1, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f7ff f948 	bl	8002b44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff f8dd 	bl	8002a7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	08db      	lsrs	r3, r3, #3
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d022      	beq.n	8003928 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6919      	ldr	r1, [r3, #16]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038f2:	f7ff f837 	bl	8002964 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6919      	ldr	r1, [r3, #16]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	461a      	mov	r2, r3
 8003904:	f7ff f883 	bl	8002a0e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003914:	2b01      	cmp	r3, #1
 8003916:	d102      	bne.n	800391e <HAL_ADC_ConfigChannel+0x126>
 8003918:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800391c:	e000      	b.n	8003920 <HAL_ADC_ConfigChannel+0x128>
 800391e:	2300      	movs	r3, #0
 8003920:	461a      	mov	r2, r3
 8003922:	f7ff f88f 	bl	8002a44 <LL_ADC_SetOffsetSaturation>
 8003926:	e17b      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff f83c 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8003934:	4603      	mov	r3, r0
 8003936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10a      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x15c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff f831 	bl	80029ac <LL_ADC_GetOffsetChannel>
 800394a:	4603      	mov	r3, r0
 800394c:	0e9b      	lsrs	r3, r3, #26
 800394e:	f003 021f 	and.w	r2, r3, #31
 8003952:	e01e      	b.n	8003992 <HAL_ADC_ConfigChannel+0x19a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2100      	movs	r1, #0
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff f826 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8003960:	4603      	mov	r3, r0
 8003962:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003972:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003976:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800397a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003982:	2320      	movs	r3, #32
 8003984:	e004      	b.n	8003990 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003986:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800398a:	fab3 f383 	clz	r3, r3
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399a:	2b00      	cmp	r3, #0
 800399c:	d105      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x1b2>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	0e9b      	lsrs	r3, r3, #26
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	e018      	b.n	80039dc <HAL_ADC_ConfigChannel+0x1e4>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80039be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80039c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80039ce:	2320      	movs	r3, #32
 80039d0:	e004      	b.n	80039dc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80039d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039dc:	429a      	cmp	r2, r3
 80039de:	d106      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2200      	movs	r2, #0
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe fff5 	bl	80029d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fe ffd9 	bl	80029ac <LL_ADC_GetOffsetChannel>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x222>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe ffce 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8003a10:	4603      	mov	r3, r0
 8003a12:	0e9b      	lsrs	r3, r3, #26
 8003a14:	f003 021f 	and.w	r2, r3, #31
 8003a18:	e01e      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x260>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe ffc3 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003a38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003a40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003a48:	2320      	movs	r3, #32
 8003a4a:	e004      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003a4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a50:	fab3 f383 	clz	r3, r3
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d105      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x278>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	0e9b      	lsrs	r3, r3, #26
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	e018      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x2aa>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a7c:	fa93 f3a3 	rbit	r3, r3
 8003a80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003a84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003a94:	2320      	movs	r3, #32
 8003a96:	e004      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d106      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2101      	movs	r1, #1
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe ff92 	bl	80029d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2102      	movs	r1, #2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe ff76 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x2e8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2102      	movs	r1, #2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe ff6b 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	0e9b      	lsrs	r3, r3, #26
 8003ada:	f003 021f 	and.w	r2, r3, #31
 8003ade:	e01e      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x326>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fe ff60 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003afe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003b06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003b0e:	2320      	movs	r3, #32
 8003b10:	e004      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003b12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d105      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x33e>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	0e9b      	lsrs	r3, r3, #26
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	e016      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x36c>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003b48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003b4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003b56:	2320      	movs	r3, #32
 8003b58:	e004      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b5e:	fab3 f383 	clz	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d106      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2102      	movs	r1, #2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fe ff31 	bl	80029d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2103      	movs	r1, #3
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fe ff15 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x3aa>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2103      	movs	r1, #3
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe ff0a 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	0e9b      	lsrs	r3, r3, #26
 8003b9c:	f003 021f 	and.w	r2, r3, #31
 8003ba0:	e017      	b.n	8003bd2 <HAL_ADC_ConfigChannel+0x3da>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2103      	movs	r1, #3
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe feff 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003bba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bbc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003bbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	e003      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003bc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d105      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x3f2>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	0e9b      	lsrs	r3, r3, #26
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	e011      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x416>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003bf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003c02:	2320      	movs	r3, #32
 8003c04:	e003      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003c06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c08:	fab3 f383 	clz	r3, r3
 8003c0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d106      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	2103      	movs	r1, #3
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe fedc 	bl	80029d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff f86f 	bl	8002d08 <LL_ADC_IsEnabled>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f040 813d 	bne.w	8003eac <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6819      	ldr	r1, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f7fe ffac 	bl	8002b9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4aa2      	ldr	r2, [pc, #648]	@ (8003ed4 <HAL_ADC_ConfigChannel+0x6dc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	f040 812e 	bne.w	8003eac <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10b      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x480>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0e9b      	lsrs	r3, r3, #26
 8003c66:	3301      	adds	r3, #1
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	2b09      	cmp	r3, #9
 8003c6e:	bf94      	ite	ls
 8003c70:	2301      	movls	r3, #1
 8003c72:	2300      	movhi	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	e019      	b.n	8003cac <HAL_ADC_ConfigChannel+0x4b4>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c80:	fa93 f3a3 	rbit	r3, r3
 8003c84:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003c86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c88:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003c8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003c90:	2320      	movs	r3, #32
 8003c92:	e003      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003c94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c96:	fab3 f383 	clz	r3, r3
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f003 031f 	and.w	r3, r3, #31
 8003ca2:	2b09      	cmp	r3, #9
 8003ca4:	bf94      	ite	ls
 8003ca6:	2301      	movls	r3, #1
 8003ca8:	2300      	movhi	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d079      	beq.n	8003da4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d107      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x4d4>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	0e9b      	lsrs	r3, r3, #26
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	069b      	lsls	r3, r3, #26
 8003cc6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cca:	e015      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x500>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cdc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	e003      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cea:	fab3 f383 	clz	r3, r3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	069b      	lsls	r3, r3, #26
 8003cf4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d109      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x520>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	0e9b      	lsrs	r3, r3, #26
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2101      	movs	r1, #1
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	e017      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x550>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d20:	fa93 f3a3 	rbit	r3, r3
 8003d24:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d28:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003d2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003d30:	2320      	movs	r3, #32
 8003d32:	e003      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003d34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	2101      	movs	r1, #1
 8003d44:	fa01 f303 	lsl.w	r3, r1, r3
 8003d48:	ea42 0103 	orr.w	r1, r2, r3
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x576>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	0e9b      	lsrs	r3, r3, #26
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f003 021f 	and.w	r2, r3, #31
 8003d64:	4613      	mov	r3, r2
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4413      	add	r3, r2
 8003d6a:	051b      	lsls	r3, r3, #20
 8003d6c:	e018      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x5a8>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d76:	fa93 f3a3 	rbit	r3, r3
 8003d7a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003d86:	2320      	movs	r3, #32
 8003d88:	e003      	b.n	8003d92 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d8c:	fab3 f383 	clz	r3, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	3301      	adds	r3, #1
 8003d94:	f003 021f 	and.w	r2, r3, #31
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003da0:	430b      	orrs	r3, r1
 8003da2:	e07e      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d107      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x5c8>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	0e9b      	lsrs	r3, r3, #26
 8003db6:	3301      	adds	r3, #1
 8003db8:	069b      	lsls	r3, r3, #26
 8003dba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dbe:	e015      	b.n	8003dec <HAL_ADC_ConfigChannel+0x5f4>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc8:	fa93 f3a3 	rbit	r3, r3
 8003dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003dd8:	2320      	movs	r3, #32
 8003dda:	e003      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dde:	fab3 f383 	clz	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	3301      	adds	r3, #1
 8003de6:	069b      	lsls	r3, r3, #26
 8003de8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x614>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	0e9b      	lsrs	r3, r3, #26
 8003dfe:	3301      	adds	r3, #1
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	2101      	movs	r1, #1
 8003e06:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0a:	e017      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x644>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	fa93 f3a3 	rbit	r3, r3
 8003e18:	61fb      	str	r3, [r7, #28]
  return result;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003e24:	2320      	movs	r3, #32
 8003e26:	e003      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	fab3 f383 	clz	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	3301      	adds	r3, #1
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	2101      	movs	r1, #1
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	ea42 0103 	orr.w	r1, r2, r3
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10d      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x670>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	0e9b      	lsrs	r3, r3, #26
 8003e52:	3301      	adds	r3, #1
 8003e54:	f003 021f 	and.w	r2, r3, #31
 8003e58:	4613      	mov	r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3b1e      	subs	r3, #30
 8003e60:	051b      	lsls	r3, r3, #20
 8003e62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e66:	e01b      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x6a8>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	fa93 f3a3 	rbit	r3, r3
 8003e74:	613b      	str	r3, [r7, #16]
  return result;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003e80:	2320      	movs	r3, #32
 8003e82:	e003      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	f003 021f 	and.w	r2, r3, #31
 8003e92:	4613      	mov	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4413      	add	r3, r2
 8003e98:	3b1e      	subs	r3, #30
 8003e9a:	051b      	lsls	r3, r3, #20
 8003e9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ea0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	f7fe fe4c 	bl	8002b44 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <HAL_ADC_ConfigChannel+0x6e0>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 80be 	beq.w	8004036 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ec2:	d004      	beq.n	8003ece <HAL_ADC_ConfigChannel+0x6d6>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a04      	ldr	r2, [pc, #16]	@ (8003edc <HAL_ADC_ConfigChannel+0x6e4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d10a      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x6ec>
 8003ece:	4b04      	ldr	r3, [pc, #16]	@ (8003ee0 <HAL_ADC_ConfigChannel+0x6e8>)
 8003ed0:	e009      	b.n	8003ee6 <HAL_ADC_ConfigChannel+0x6ee>
 8003ed2:	bf00      	nop
 8003ed4:	407f0000 	.word	0x407f0000
 8003ed8:	80080000 	.word	0x80080000
 8003edc:	50000100 	.word	0x50000100
 8003ee0:	50000300 	.word	0x50000300
 8003ee4:	4b59      	ldr	r3, [pc, #356]	@ (800404c <HAL_ADC_ConfigChannel+0x854>)
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe fd2e 	bl	8002948 <LL_ADC_GetCommonPathInternalCh>
 8003eec:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a56      	ldr	r2, [pc, #344]	@ (8004050 <HAL_ADC_ConfigChannel+0x858>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_ADC_ConfigChannel+0x70c>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a55      	ldr	r2, [pc, #340]	@ (8004054 <HAL_ADC_ConfigChannel+0x85c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d13a      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d134      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f18:	d005      	beq.n	8003f26 <HAL_ADC_ConfigChannel+0x72e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a4e      	ldr	r2, [pc, #312]	@ (8004058 <HAL_ADC_ConfigChannel+0x860>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	f040 8085 	bne.w	8004030 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f2e:	d004      	beq.n	8003f3a <HAL_ADC_ConfigChannel+0x742>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a49      	ldr	r2, [pc, #292]	@ (800405c <HAL_ADC_ConfigChannel+0x864>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d101      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x746>
 8003f3a:	4a49      	ldr	r2, [pc, #292]	@ (8004060 <HAL_ADC_ConfigChannel+0x868>)
 8003f3c:	e000      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x748>
 8003f3e:	4a43      	ldr	r2, [pc, #268]	@ (800404c <HAL_ADC_ConfigChannel+0x854>)
 8003f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f7fe fce9 	bl	8002922 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f50:	4b44      	ldr	r3, [pc, #272]	@ (8004064 <HAL_ADC_ConfigChannel+0x86c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	099b      	lsrs	r3, r3, #6
 8003f56:	4a44      	ldr	r2, [pc, #272]	@ (8004068 <HAL_ADC_ConfigChannel+0x870>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	099b      	lsrs	r3, r3, #6
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f6a:	e002      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f9      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f78:	e05a      	b.n	8004030 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a3b      	ldr	r2, [pc, #236]	@ (800406c <HAL_ADC_ConfigChannel+0x874>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d125      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d11f      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a31      	ldr	r2, [pc, #196]	@ (800405c <HAL_ADC_ConfigChannel+0x864>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d104      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x7ac>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a34      	ldr	r2, [pc, #208]	@ (8004070 <HAL_ADC_ConfigChannel+0x878>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d047      	beq.n	8004034 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fac:	d004      	beq.n	8003fb8 <HAL_ADC_ConfigChannel+0x7c0>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800405c <HAL_ADC_ConfigChannel+0x864>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d101      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x7c4>
 8003fb8:	4a29      	ldr	r2, [pc, #164]	@ (8004060 <HAL_ADC_ConfigChannel+0x868>)
 8003fba:	e000      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x7c6>
 8003fbc:	4a23      	ldr	r2, [pc, #140]	@ (800404c <HAL_ADC_ConfigChannel+0x854>)
 8003fbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4610      	mov	r0, r2
 8003fca:	f7fe fcaa 	bl	8002922 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fce:	e031      	b.n	8004034 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a27      	ldr	r2, [pc, #156]	@ (8004074 <HAL_ADC_ConfigChannel+0x87c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d12d      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d127      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1c      	ldr	r2, [pc, #112]	@ (800405c <HAL_ADC_ConfigChannel+0x864>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d022      	beq.n	8004036 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ff8:	d004      	beq.n	8004004 <HAL_ADC_ConfigChannel+0x80c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a17      	ldr	r2, [pc, #92]	@ (800405c <HAL_ADC_ConfigChannel+0x864>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d101      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x810>
 8004004:	4a16      	ldr	r2, [pc, #88]	@ (8004060 <HAL_ADC_ConfigChannel+0x868>)
 8004006:	e000      	b.n	800400a <HAL_ADC_ConfigChannel+0x812>
 8004008:	4a10      	ldr	r2, [pc, #64]	@ (800404c <HAL_ADC_ConfigChannel+0x854>)
 800400a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800400e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f7fe fc84 	bl	8002922 <LL_ADC_SetCommonPathInternalCh>
 800401a:	e00c      	b.n	8004036 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004020:	f043 0220 	orr.w	r2, r3, #32
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800402e:	e002      	b.n	8004036 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004030:	bf00      	nop
 8004032:	e000      	b.n	8004036 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004034:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800403e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004042:	4618      	mov	r0, r3
 8004044:	37d8      	adds	r7, #216	@ 0xd8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	50000700 	.word	0x50000700
 8004050:	c3210000 	.word	0xc3210000
 8004054:	90c00010 	.word	0x90c00010
 8004058:	50000600 	.word	0x50000600
 800405c:	50000100 	.word	0x50000100
 8004060:	50000300 	.word	0x50000300
 8004064:	20000000 	.word	0x20000000
 8004068:	053e2d63 	.word	0x053e2d63
 800406c:	c7520000 	.word	0xc7520000
 8004070:	50000500 	.word	0x50000500
 8004074:	cb840000 	.word	0xcb840000

08004078 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004080:	2300      	movs	r3, #0
 8004082:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe fe3d 	bl	8002d08 <LL_ADC_IsEnabled>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d176      	bne.n	8004182 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	4b3c      	ldr	r3, [pc, #240]	@ (800418c <ADC_Enable+0x114>)
 800409c:	4013      	ands	r3, r2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00d      	beq.n	80040be <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a6:	f043 0210 	orr.w	r2, r3, #16
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b2:	f043 0201 	orr.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e062      	b.n	8004184 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe fdf8 	bl	8002cb8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040d0:	d004      	beq.n	80040dc <ADC_Enable+0x64>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004190 <ADC_Enable+0x118>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d101      	bne.n	80040e0 <ADC_Enable+0x68>
 80040dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004194 <ADC_Enable+0x11c>)
 80040de:	e000      	b.n	80040e2 <ADC_Enable+0x6a>
 80040e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004198 <ADC_Enable+0x120>)
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe fc30 	bl	8002948 <LL_ADC_GetCommonPathInternalCh>
 80040e8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80040ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d013      	beq.n	800411a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040f2:	4b2a      	ldr	r3, [pc, #168]	@ (800419c <ADC_Enable+0x124>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	099b      	lsrs	r3, r3, #6
 80040f8:	4a29      	ldr	r2, [pc, #164]	@ (80041a0 <ADC_Enable+0x128>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	099b      	lsrs	r3, r3, #6
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	4613      	mov	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800410c:	e002      	b.n	8004114 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	3b01      	subs	r3, #1
 8004112:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f9      	bne.n	800410e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800411a:	f7fe fbe3 	bl	80028e4 <HAL_GetTick>
 800411e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004120:	e028      	b.n	8004174 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fe fdee 	bl	8002d08 <LL_ADC_IsEnabled>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d104      	bne.n	800413c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe fdbe 	bl	8002cb8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800413c:	f7fe fbd2 	bl	80028e4 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d914      	bls.n	8004174 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b01      	cmp	r3, #1
 8004156:	d00d      	beq.n	8004174 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415c:	f043 0210 	orr.w	r2, r3, #16
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004168:	f043 0201 	orr.w	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e007      	b.n	8004184 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d1cf      	bne.n	8004122 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	8000003f 	.word	0x8000003f
 8004190:	50000100 	.word	0x50000100
 8004194:	50000300 	.word	0x50000300
 8004198:	50000700 	.word	0x50000700
 800419c:	20000000 	.word	0x20000000
 80041a0:	053e2d63 	.word	0x053e2d63

080041a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe fdbc 	bl	8002d2e <LL_ADC_IsDisableOngoing>
 80041b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fe fda3 	bl	8002d08 <LL_ADC_IsEnabled>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d047      	beq.n	8004258 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d144      	bne.n	8004258 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 030d 	and.w	r3, r3, #13
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d10c      	bne.n	80041f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fe fd7d 	bl	8002ce0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2203      	movs	r2, #3
 80041ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041ee:	f7fe fb79 	bl	80028e4 <HAL_GetTick>
 80041f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041f4:	e029      	b.n	800424a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fa:	f043 0210 	orr.w	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004206:	f043 0201 	orr.w	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e023      	b.n	800425a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004212:	f7fe fb67 	bl	80028e4 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d914      	bls.n	800424a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00d      	beq.n	800424a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004232:	f043 0210 	orr.w	r2, r3, #16
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423e:	f043 0201 	orr.w	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e007      	b.n	800425a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1dc      	bne.n	8004212 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004274:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004278:	2b00      	cmp	r3, #0
 800427a:	d14b      	bne.n	8004314 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004280:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d021      	beq.n	80042da <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe fc00 	bl	8002aa0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d032      	beq.n	800430c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d12b      	bne.n	800430c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d11f      	bne.n	800430c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d0:	f043 0201 	orr.w	r2, r3, #1
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042d8:	e018      	b.n	800430c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d111      	bne.n	800430c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d105      	bne.n	800430c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004304:	f043 0201 	orr.w	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f7ff fa4b 	bl	80037a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004312:	e00e      	b.n	8004332 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f7ff fa5f 	bl	80037e4 <HAL_ADC_ErrorCallback>
}
 8004326:	e004      	b.n	8004332 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004346:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff fa37 	bl	80037bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b084      	sub	sp, #16
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004362:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004368:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004374:	f043 0204 	orr.w	r2, r3, #4
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f7ff fa31 	bl	80037e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <LL_ADC_IsEnabled>:
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <LL_ADC_IsEnabled+0x18>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <LL_ADC_IsEnabled+0x1a>
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <LL_ADC_StartCalibration>:
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80043c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	609a      	str	r2, [r3, #8]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <LL_ADC_IsCalibrationOnGoing>:
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043f6:	d101      	bne.n	80043fc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <LL_ADC_IsCalibrationOnGoing+0x1c>
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <LL_ADC_REG_IsConversionOngoing>:
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b04      	cmp	r3, #4
 800441c:	d101      	bne.n	8004422 <LL_ADC_REG_IsConversionOngoing+0x18>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_ADCEx_Calibration_Start+0x1c>
 8004448:	2302      	movs	r3, #2
 800444a:	e04d      	b.n	80044e8 <HAL_ADCEx_Calibration_Start+0xb8>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff fea5 	bl	80041a4 <ADC_Disable>
 800445a:	4603      	mov	r3, r0
 800445c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d136      	bne.n	80044d2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004468:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800446c:	f023 0302 	bic.w	r3, r3, #2
 8004470:	f043 0202 	orr.w	r2, r3, #2
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6839      	ldr	r1, [r7, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff ff96 	bl	80043b0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004484:	e014      	b.n	80044b0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	3301      	adds	r3, #1
 800448a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4a18      	ldr	r2, [pc, #96]	@ (80044f0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d90d      	bls.n	80044b0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004498:	f023 0312 	bic.w	r3, r3, #18
 800449c:	f043 0210 	orr.w	r2, r3, #16
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e01b      	b.n	80044e8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff ff94 	bl	80043e2 <LL_ADC_IsCalibrationOnGoing>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e2      	bne.n	8004486 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c4:	f023 0303 	bic.w	r3, r3, #3
 80044c8:	f043 0201 	orr.w	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044d0:	e005      	b.n	80044de <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d6:	f043 0210 	orr.w	r2, r3, #16
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	0004de01 	.word	0x0004de01

080044f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004558:	b590      	push	{r4, r7, lr}
 800455a:	b0a1      	sub	sp, #132	@ 0x84
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004572:	2302      	movs	r3, #2
 8004574:	e0e7      	b.n	8004746 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800457e:	2300      	movs	r3, #0
 8004580:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004582:	2300      	movs	r3, #0
 8004584:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800458e:	d102      	bne.n	8004596 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004590:	4b6f      	ldr	r3, [pc, #444]	@ (8004750 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004592:	60bb      	str	r3, [r7, #8]
 8004594:	e009      	b.n	80045aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a6e      	ldr	r2, [pc, #440]	@ (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d102      	bne.n	80045a6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80045a0:	4b6d      	ldr	r3, [pc, #436]	@ (8004758 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	e001      	b.n	80045aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10b      	bne.n	80045c8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b4:	f043 0220 	orr.w	r2, r3, #32
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e0be      	b.n	8004746 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff ff1d 	bl	800440a <LL_ADC_REG_IsConversionOngoing>
 80045d0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff ff17 	bl	800440a <LL_ADC_REG_IsConversionOngoing>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f040 80a0 	bne.w	8004724 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80045e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f040 809c 	bne.w	8004724 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045f4:	d004      	beq.n	8004600 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a55      	ldr	r2, [pc, #340]	@ (8004750 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d101      	bne.n	8004604 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004600:	4b56      	ldr	r3, [pc, #344]	@ (800475c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004602:	e000      	b.n	8004606 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004604:	4b56      	ldr	r3, [pc, #344]	@ (8004760 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004606:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d04b      	beq.n	80046a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004610:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004622:	035b      	lsls	r3, r3, #13
 8004624:	430b      	orrs	r3, r1
 8004626:	431a      	orrs	r2, r3
 8004628:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800462a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004634:	d004      	beq.n	8004640 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a45      	ldr	r2, [pc, #276]	@ (8004750 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d10f      	bne.n	8004660 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004640:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004644:	f7ff fea1 	bl	800438a <LL_ADC_IsEnabled>
 8004648:	4604      	mov	r4, r0
 800464a:	4841      	ldr	r0, [pc, #260]	@ (8004750 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800464c:	f7ff fe9d 	bl	800438a <LL_ADC_IsEnabled>
 8004650:	4603      	mov	r3, r0
 8004652:	4323      	orrs	r3, r4
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf0c      	ite	eq
 8004658:	2301      	moveq	r3, #1
 800465a:	2300      	movne	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	e012      	b.n	8004686 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004660:	483c      	ldr	r0, [pc, #240]	@ (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004662:	f7ff fe92 	bl	800438a <LL_ADC_IsEnabled>
 8004666:	4604      	mov	r4, r0
 8004668:	483b      	ldr	r0, [pc, #236]	@ (8004758 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800466a:	f7ff fe8e 	bl	800438a <LL_ADC_IsEnabled>
 800466e:	4603      	mov	r3, r0
 8004670:	431c      	orrs	r4, r3
 8004672:	483c      	ldr	r0, [pc, #240]	@ (8004764 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004674:	f7ff fe89 	bl	800438a <LL_ADC_IsEnabled>
 8004678:	4603      	mov	r3, r0
 800467a:	4323      	orrs	r3, r4
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d056      	beq.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800468a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004692:	f023 030f 	bic.w	r3, r3, #15
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	6811      	ldr	r1, [r2, #0]
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	6892      	ldr	r2, [r2, #8]
 800469e:	430a      	orrs	r2, r1
 80046a0:	431a      	orrs	r2, r3
 80046a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046a4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80046a6:	e047      	b.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046bc:	d004      	beq.n	80046c8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a23      	ldr	r2, [pc, #140]	@ (8004750 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d10f      	bne.n	80046e8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80046c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80046cc:	f7ff fe5d 	bl	800438a <LL_ADC_IsEnabled>
 80046d0:	4604      	mov	r4, r0
 80046d2:	481f      	ldr	r0, [pc, #124]	@ (8004750 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046d4:	f7ff fe59 	bl	800438a <LL_ADC_IsEnabled>
 80046d8:	4603      	mov	r3, r0
 80046da:	4323      	orrs	r3, r4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bf0c      	ite	eq
 80046e0:	2301      	moveq	r3, #1
 80046e2:	2300      	movne	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	e012      	b.n	800470e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80046e8:	481a      	ldr	r0, [pc, #104]	@ (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80046ea:	f7ff fe4e 	bl	800438a <LL_ADC_IsEnabled>
 80046ee:	4604      	mov	r4, r0
 80046f0:	4819      	ldr	r0, [pc, #100]	@ (8004758 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80046f2:	f7ff fe4a 	bl	800438a <LL_ADC_IsEnabled>
 80046f6:	4603      	mov	r3, r0
 80046f8:	431c      	orrs	r4, r3
 80046fa:	481a      	ldr	r0, [pc, #104]	@ (8004764 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80046fc:	f7ff fe45 	bl	800438a <LL_ADC_IsEnabled>
 8004700:	4603      	mov	r3, r0
 8004702:	4323      	orrs	r3, r4
 8004704:	2b00      	cmp	r3, #0
 8004706:	bf0c      	ite	eq
 8004708:	2301      	moveq	r3, #1
 800470a:	2300      	movne	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d012      	beq.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004712:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800471a:	f023 030f 	bic.w	r3, r3, #15
 800471e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004720:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004722:	e009      	b.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004728:	f043 0220 	orr.w	r2, r3, #32
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004736:	e000      	b.n	800473a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004738:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004742:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004746:	4618      	mov	r0, r3
 8004748:	3784      	adds	r7, #132	@ 0x84
 800474a:	46bd      	mov	sp, r7
 800474c:	bd90      	pop	{r4, r7, pc}
 800474e:	bf00      	nop
 8004750:	50000100 	.word	0x50000100
 8004754:	50000400 	.word	0x50000400
 8004758:	50000500 	.word	0x50000500
 800475c:	50000300 	.word	0x50000300
 8004760:	50000700 	.word	0x50000700
 8004764:	50000600 	.word	0x50000600

08004768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004778:	4b0c      	ldr	r3, [pc, #48]	@ (80047ac <__NVIC_SetPriorityGrouping+0x44>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004784:	4013      	ands	r3, r2
 8004786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004790:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800479a:	4a04      	ldr	r2, [pc, #16]	@ (80047ac <__NVIC_SetPriorityGrouping+0x44>)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	60d3      	str	r3, [r2, #12]
}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	e000ed00 	.word	0xe000ed00

080047b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047b4:	4b04      	ldr	r3, [pc, #16]	@ (80047c8 <__NVIC_GetPriorityGrouping+0x18>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	0a1b      	lsrs	r3, r3, #8
 80047ba:	f003 0307 	and.w	r3, r3, #7
}
 80047be:	4618      	mov	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	e000ed00 	.word	0xe000ed00

080047cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	db0b      	blt.n	80047f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	f003 021f 	and.w	r2, r3, #31
 80047e4:	4907      	ldr	r1, [pc, #28]	@ (8004804 <__NVIC_EnableIRQ+0x38>)
 80047e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	2001      	movs	r0, #1
 80047ee:	fa00 f202 	lsl.w	r2, r0, r2
 80047f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	e000e100 	.word	0xe000e100

08004808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	4603      	mov	r3, r0
 8004810:	6039      	str	r1, [r7, #0]
 8004812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004818:	2b00      	cmp	r3, #0
 800481a:	db0a      	blt.n	8004832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	b2da      	uxtb	r2, r3
 8004820:	490c      	ldr	r1, [pc, #48]	@ (8004854 <__NVIC_SetPriority+0x4c>)
 8004822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004826:	0112      	lsls	r2, r2, #4
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	440b      	add	r3, r1
 800482c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004830:	e00a      	b.n	8004848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	b2da      	uxtb	r2, r3
 8004836:	4908      	ldr	r1, [pc, #32]	@ (8004858 <__NVIC_SetPriority+0x50>)
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	3b04      	subs	r3, #4
 8004840:	0112      	lsls	r2, r2, #4
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	440b      	add	r3, r1
 8004846:	761a      	strb	r2, [r3, #24]
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	e000e100 	.word	0xe000e100
 8004858:	e000ed00 	.word	0xe000ed00

0800485c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800485c:	b480      	push	{r7}
 800485e:	b089      	sub	sp, #36	@ 0x24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f1c3 0307 	rsb	r3, r3, #7
 8004876:	2b04      	cmp	r3, #4
 8004878:	bf28      	it	cs
 800487a:	2304      	movcs	r3, #4
 800487c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	3304      	adds	r3, #4
 8004882:	2b06      	cmp	r3, #6
 8004884:	d902      	bls.n	800488c <NVIC_EncodePriority+0x30>
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	3b03      	subs	r3, #3
 800488a:	e000      	b.n	800488e <NVIC_EncodePriority+0x32>
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004890:	f04f 32ff 	mov.w	r2, #4294967295
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43da      	mvns	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	401a      	ands	r2, r3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048a4:	f04f 31ff 	mov.w	r1, #4294967295
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	fa01 f303 	lsl.w	r3, r1, r3
 80048ae:	43d9      	mvns	r1, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b4:	4313      	orrs	r3, r2
         );
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3724      	adds	r7, #36	@ 0x24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048d4:	d301      	bcc.n	80048da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048d6:	2301      	movs	r3, #1
 80048d8:	e00f      	b.n	80048fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048da:	4a0a      	ldr	r2, [pc, #40]	@ (8004904 <SysTick_Config+0x40>)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3b01      	subs	r3, #1
 80048e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048e2:	210f      	movs	r1, #15
 80048e4:	f04f 30ff 	mov.w	r0, #4294967295
 80048e8:	f7ff ff8e 	bl	8004808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048ec:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <SysTick_Config+0x40>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048f2:	4b04      	ldr	r3, [pc, #16]	@ (8004904 <SysTick_Config+0x40>)
 80048f4:	2207      	movs	r2, #7
 80048f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	e000e010 	.word	0xe000e010

08004908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff ff29 	bl	8004768 <__NVIC_SetPriorityGrouping>
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b086      	sub	sp, #24
 8004922:	af00      	add	r7, sp, #0
 8004924:	4603      	mov	r3, r0
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
 800492a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800492c:	f7ff ff40 	bl	80047b0 <__NVIC_GetPriorityGrouping>
 8004930:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	6978      	ldr	r0, [r7, #20]
 8004938:	f7ff ff90 	bl	800485c <NVIC_EncodePriority>
 800493c:	4602      	mov	r2, r0
 800493e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004942:	4611      	mov	r1, r2
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff ff5f 	bl	8004808 <__NVIC_SetPriority>
}
 800494a:	bf00      	nop
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	4603      	mov	r3, r0
 800495a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800495c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff ff33 	bl	80047cc <__NVIC_EnableIRQ>
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff ffa4 	bl	80048c4 <SysTick_Config>
 800497c:	4603      	mov	r3, r0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e08d      	b.n	8004ab6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	4b47      	ldr	r3, [pc, #284]	@ (8004ac0 <HAL_DMA_Init+0x138>)
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d80f      	bhi.n	80049c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	4b45      	ldr	r3, [pc, #276]	@ (8004ac4 <HAL_DMA_Init+0x13c>)
 80049ae:	4413      	add	r3, r2
 80049b0:	4a45      	ldr	r2, [pc, #276]	@ (8004ac8 <HAL_DMA_Init+0x140>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	091b      	lsrs	r3, r3, #4
 80049b8:	009a      	lsls	r2, r3, #2
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a42      	ldr	r2, [pc, #264]	@ (8004acc <HAL_DMA_Init+0x144>)
 80049c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80049c4:	e00e      	b.n	80049e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	4b40      	ldr	r3, [pc, #256]	@ (8004ad0 <HAL_DMA_Init+0x148>)
 80049ce:	4413      	add	r3, r2
 80049d0:	4a3d      	ldr	r2, [pc, #244]	@ (8004ac8 <HAL_DMA_Init+0x140>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	009a      	lsls	r2, r3, #2
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ad4 <HAL_DMA_Init+0x14c>)
 80049e2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80049fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fa76 	bl	8004f28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a44:	d102      	bne.n	8004a4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a60:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d010      	beq.n	8004a8c <HAL_DMA_Init+0x104>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d80c      	bhi.n	8004a8c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fa96 	bl	8004fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a88:	605a      	str	r2, [r3, #4]
 8004a8a:	e008      	b.n	8004a9e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40020407 	.word	0x40020407
 8004ac4:	bffdfff8 	.word	0xbffdfff8
 8004ac8:	cccccccd 	.word	0xcccccccd
 8004acc:	40020000 	.word	0x40020000
 8004ad0:	bffdfbf8 	.word	0xbffdfbf8
 8004ad4:	40020400 	.word	0x40020400

08004ad8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_DMA_Start_IT+0x20>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e066      	b.n	8004bc6 <HAL_DMA_Start_IT+0xee>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d155      	bne.n	8004bb8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f9bb 	bl	8004eac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d008      	beq.n	8004b50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 020e 	orr.w	r2, r2, #14
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e00f      	b.n	8004b70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0204 	bic.w	r2, r2, #4
 8004b5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 020a 	orr.w	r2, r2, #10
 8004b6e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d007      	beq.n	8004b8e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b8c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d007      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ba4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0201 	orr.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	e005      	b.n	8004bc4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b085      	sub	sp, #20
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d005      	beq.n	8004bf2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2204      	movs	r2, #4
 8004bea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	73fb      	strb	r3, [r7, #15]
 8004bf0:	e037      	b.n	8004c62 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 020e 	bic.w	r2, r2, #14
 8004c00:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c10:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0201 	bic.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c26:	f003 021f 	and.w	r2, r3, #31
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	2101      	movs	r1, #1
 8004c30:	fa01 f202 	lsl.w	r2, r1, r2
 8004c34:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c3e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00c      	beq.n	8004c62 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c56:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c60:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d00d      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	73fb      	strb	r3, [r7, #15]
 8004cb2:	e047      	b.n	8004d44 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 020e 	bic.w	r2, r2, #14
 8004cc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0201 	bic.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ce2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce8:	f003 021f 	and.w	r2, r3, #31
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d00:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	4798      	blx	r3
    }
  }
  return status;
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	2204      	movs	r2, #4
 8004d70:	409a      	lsls	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4013      	ands	r3, r2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d026      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x7a>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d021      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d107      	bne.n	8004da2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0204 	bic.w	r2, r2, #4
 8004da0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da6:	f003 021f 	and.w	r2, r3, #31
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	2104      	movs	r1, #4
 8004db0:	fa01 f202 	lsl.w	r2, r1, r2
 8004db4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d071      	beq.n	8004ea2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004dc6:	e06c      	b.n	8004ea2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dcc:	f003 031f 	and.w	r3, r3, #31
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	409a      	lsls	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d02e      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d029      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 020a 	bic.w	r2, r2, #10
 8004e02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e10:	f003 021f 	and.w	r2, r3, #31
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e18:	2102      	movs	r1, #2
 8004e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d038      	beq.n	8004ea2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004e38:	e033      	b.n	8004ea2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	2208      	movs	r2, #8
 8004e44:	409a      	lsls	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d02a      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d025      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 020e 	bic.w	r2, r2, #14
 8004e66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6c:	f003 021f 	and.w	r2, r3, #31
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	2101      	movs	r1, #1
 8004e76:	fa01 f202 	lsl.w	r2, r1, r2
 8004e7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d004      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
}
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ec2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d004      	beq.n	8004ed6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ed4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eda:	f003 021f 	and.w	r2, r3, #31
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b10      	cmp	r3, #16
 8004ef8:	d108      	bne.n	8004f0c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f0a:	e007      	b.n	8004f1c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	60da      	str	r2, [r3, #12]
}
 8004f1c:	bf00      	nop
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	4b16      	ldr	r3, [pc, #88]	@ (8004f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d802      	bhi.n	8004f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004f3c:	4b15      	ldr	r3, [pc, #84]	@ (8004f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e001      	b.n	8004f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004f42:	4b15      	ldr	r3, [pc, #84]	@ (8004f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004f44:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	3b08      	subs	r3, #8
 8004f52:	4a12      	ldr	r2, [pc, #72]	@ (8004f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004f54:	fba2 2303 	umull	r2, r3, r2, r3
 8004f58:	091b      	lsrs	r3, r3, #4
 8004f5a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f60:	089b      	lsrs	r3, r3, #2
 8004f62:	009a      	lsls	r2, r3, #2
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4413      	add	r3, r2
 8004f68:	461a      	mov	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a0b      	ldr	r2, [pc, #44]	@ (8004fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004f72:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 031f 	and.w	r3, r3, #31
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	409a      	lsls	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40020407 	.word	0x40020407
 8004f94:	40020800 	.word	0x40020800
 8004f98:	40020820 	.word	0x40020820
 8004f9c:	cccccccd 	.word	0xcccccccd
 8004fa0:	40020880 	.word	0x40020880

08004fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004fb8:	4413      	add	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a08      	ldr	r2, [pc, #32]	@ (8004fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004fc6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	f003 031f 	and.w	r3, r3, #31
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004fd8:	bf00      	nop
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	1000823f 	.word	0x1000823f
 8004fe8:	40020940 	.word	0x40020940

08004fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ffa:	e15a      	b.n	80052b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	2101      	movs	r1, #1
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	fa01 f303 	lsl.w	r3, r1, r3
 8005008:	4013      	ands	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 814c 	beq.w	80052ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	2b01      	cmp	r3, #1
 800501e:	d005      	beq.n	800502c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005028:	2b02      	cmp	r3, #2
 800502a:	d130      	bne.n	800508e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	2203      	movs	r2, #3
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	43db      	mvns	r3, r3
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4013      	ands	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005062:	2201      	movs	r2, #1
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4013      	ands	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	091b      	lsrs	r3, r3, #4
 8005078:	f003 0201 	and.w	r2, r3, #1
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	2b03      	cmp	r3, #3
 8005098:	d017      	beq.n	80050ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	2203      	movs	r2, #3
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	43db      	mvns	r3, r3
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4013      	ands	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d123      	bne.n	800511e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	08da      	lsrs	r2, r3, #3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3208      	adds	r2, #8
 80050de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	220f      	movs	r2, #15
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4013      	ands	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	691a      	ldr	r2, [r3, #16]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	08da      	lsrs	r2, r3, #3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3208      	adds	r2, #8
 8005118:	6939      	ldr	r1, [r7, #16]
 800511a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	2203      	movs	r2, #3
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4013      	ands	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 0203 	and.w	r2, r3, #3
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 80a6 	beq.w	80052ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005160:	4b5b      	ldr	r3, [pc, #364]	@ (80052d0 <HAL_GPIO_Init+0x2e4>)
 8005162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005164:	4a5a      	ldr	r2, [pc, #360]	@ (80052d0 <HAL_GPIO_Init+0x2e4>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	6613      	str	r3, [r2, #96]	@ 0x60
 800516c:	4b58      	ldr	r3, [pc, #352]	@ (80052d0 <HAL_GPIO_Init+0x2e4>)
 800516e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005178:	4a56      	ldr	r2, [pc, #344]	@ (80052d4 <HAL_GPIO_Init+0x2e8>)
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	089b      	lsrs	r3, r3, #2
 800517e:	3302      	adds	r3, #2
 8005180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005184:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	220f      	movs	r2, #15
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	43db      	mvns	r3, r3
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4013      	ands	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80051a2:	d01f      	beq.n	80051e4 <HAL_GPIO_Init+0x1f8>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a4c      	ldr	r2, [pc, #304]	@ (80052d8 <HAL_GPIO_Init+0x2ec>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d019      	beq.n	80051e0 <HAL_GPIO_Init+0x1f4>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a4b      	ldr	r2, [pc, #300]	@ (80052dc <HAL_GPIO_Init+0x2f0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d013      	beq.n	80051dc <HAL_GPIO_Init+0x1f0>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a4a      	ldr	r2, [pc, #296]	@ (80052e0 <HAL_GPIO_Init+0x2f4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00d      	beq.n	80051d8 <HAL_GPIO_Init+0x1ec>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a49      	ldr	r2, [pc, #292]	@ (80052e4 <HAL_GPIO_Init+0x2f8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d007      	beq.n	80051d4 <HAL_GPIO_Init+0x1e8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a48      	ldr	r2, [pc, #288]	@ (80052e8 <HAL_GPIO_Init+0x2fc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d101      	bne.n	80051d0 <HAL_GPIO_Init+0x1e4>
 80051cc:	2305      	movs	r3, #5
 80051ce:	e00a      	b.n	80051e6 <HAL_GPIO_Init+0x1fa>
 80051d0:	2306      	movs	r3, #6
 80051d2:	e008      	b.n	80051e6 <HAL_GPIO_Init+0x1fa>
 80051d4:	2304      	movs	r3, #4
 80051d6:	e006      	b.n	80051e6 <HAL_GPIO_Init+0x1fa>
 80051d8:	2303      	movs	r3, #3
 80051da:	e004      	b.n	80051e6 <HAL_GPIO_Init+0x1fa>
 80051dc:	2302      	movs	r3, #2
 80051de:	e002      	b.n	80051e6 <HAL_GPIO_Init+0x1fa>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <HAL_GPIO_Init+0x1fa>
 80051e4:	2300      	movs	r3, #0
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	f002 0203 	and.w	r2, r2, #3
 80051ec:	0092      	lsls	r2, r2, #2
 80051ee:	4093      	lsls	r3, r2
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051f6:	4937      	ldr	r1, [pc, #220]	@ (80052d4 <HAL_GPIO_Init+0x2e8>)
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	089b      	lsrs	r3, r3, #2
 80051fc:	3302      	adds	r3, #2
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005204:	4b39      	ldr	r3, [pc, #228]	@ (80052ec <HAL_GPIO_Init+0x300>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	43db      	mvns	r3, r3
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4013      	ands	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005228:	4a30      	ldr	r2, [pc, #192]	@ (80052ec <HAL_GPIO_Init+0x300>)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800522e:	4b2f      	ldr	r3, [pc, #188]	@ (80052ec <HAL_GPIO_Init+0x300>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	43db      	mvns	r3, r3
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4013      	ands	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005252:	4a26      	ldr	r2, [pc, #152]	@ (80052ec <HAL_GPIO_Init+0x300>)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005258:	4b24      	ldr	r3, [pc, #144]	@ (80052ec <HAL_GPIO_Init+0x300>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	43db      	mvns	r3, r3
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4013      	ands	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800527c:	4a1b      	ldr	r2, [pc, #108]	@ (80052ec <HAL_GPIO_Init+0x300>)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005282:	4b1a      	ldr	r3, [pc, #104]	@ (80052ec <HAL_GPIO_Init+0x300>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	43db      	mvns	r3, r3
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4013      	ands	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80052a6:	4a11      	ldr	r2, [pc, #68]	@ (80052ec <HAL_GPIO_Init+0x300>)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	3301      	adds	r3, #1
 80052b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f47f ae9d 	bne.w	8004ffc <HAL_GPIO_Init+0x10>
  }
}
 80052c2:	bf00      	nop
 80052c4:	bf00      	nop
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	40021000 	.word	0x40021000
 80052d4:	40010000 	.word	0x40010000
 80052d8:	48000400 	.word	0x48000400
 80052dc:	48000800 	.word	0x48000800
 80052e0:	48000c00 	.word	0x48000c00
 80052e4:	48001000 	.word	0x48001000
 80052e8:	48001400 	.word	0x48001400
 80052ec:	40010400 	.word	0x40010400

080052f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	807b      	strh	r3, [r7, #2]
 80052fc:	4613      	mov	r3, r2
 80052fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005300:	787b      	ldrb	r3, [r7, #1]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005306:	887a      	ldrh	r2, [r7, #2]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800530c:	e002      	b.n	8005314 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800530e:	887a      	ldrh	r2, [r7, #2]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005332:	887a      	ldrh	r2, [r7, #2]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4013      	ands	r3, r2
 8005338:	041a      	lsls	r2, r3, #16
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	43d9      	mvns	r1, r3
 800533e:	887b      	ldrh	r3, [r7, #2]
 8005340:	400b      	ands	r3, r1
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	619a      	str	r2, [r3, #24]
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	4603      	mov	r3, r0
 800535c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800535e:	4b08      	ldr	r3, [pc, #32]	@ (8005380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005360:	695a      	ldr	r2, [r3, #20]
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	4013      	ands	r3, r2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d006      	beq.n	8005378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800536a:	4a05      	ldr	r2, [pc, #20]	@ (8005380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800536c:	88fb      	ldrh	r3, [r7, #6]
 800536e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	4618      	mov	r0, r3
 8005374:	f7fc fe3c 	bl	8001ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005378:	bf00      	nop
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40010400 	.word	0x40010400

08005384 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d141      	bne.n	8005416 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005392:	4b4b      	ldr	r3, [pc, #300]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800539a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800539e:	d131      	bne.n	8005404 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053a0:	4b47      	ldr	r3, [pc, #284]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053a6:	4a46      	ldr	r2, [pc, #280]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053b0:	4b43      	ldr	r3, [pc, #268]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053b8:	4a41      	ldr	r2, [pc, #260]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053c0:	4b40      	ldr	r3, [pc, #256]	@ (80054c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2232      	movs	r2, #50	@ 0x32
 80053c6:	fb02 f303 	mul.w	r3, r2, r3
 80053ca:	4a3f      	ldr	r2, [pc, #252]	@ (80054c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80053cc:	fba2 2303 	umull	r2, r3, r2, r3
 80053d0:	0c9b      	lsrs	r3, r3, #18
 80053d2:	3301      	adds	r3, #1
 80053d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053d6:	e002      	b.n	80053de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3b01      	subs	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053de:	4b38      	ldr	r3, [pc, #224]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ea:	d102      	bne.n	80053f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1f2      	bne.n	80053d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053f2:	4b33      	ldr	r3, [pc, #204]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053fe:	d158      	bne.n	80054b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e057      	b.n	80054b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005404:	4b2e      	ldr	r3, [pc, #184]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800540a:	4a2d      	ldr	r2, [pc, #180]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800540c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005410:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005414:	e04d      	b.n	80054b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800541c:	d141      	bne.n	80054a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800541e:	4b28      	ldr	r3, [pc, #160]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800542a:	d131      	bne.n	8005490 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800542c:	4b24      	ldr	r3, [pc, #144]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800542e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005432:	4a23      	ldr	r2, [pc, #140]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005438:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800543c:	4b20      	ldr	r3, [pc, #128]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005444:	4a1e      	ldr	r2, [pc, #120]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005446:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800544a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800544c:	4b1d      	ldr	r3, [pc, #116]	@ (80054c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2232      	movs	r2, #50	@ 0x32
 8005452:	fb02 f303 	mul.w	r3, r2, r3
 8005456:	4a1c      	ldr	r2, [pc, #112]	@ (80054c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005458:	fba2 2303 	umull	r2, r3, r2, r3
 800545c:	0c9b      	lsrs	r3, r3, #18
 800545e:	3301      	adds	r3, #1
 8005460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005462:	e002      	b.n	800546a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3b01      	subs	r3, #1
 8005468:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800546a:	4b15      	ldr	r3, [pc, #84]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005476:	d102      	bne.n	800547e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f2      	bne.n	8005464 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800547e:	4b10      	ldr	r3, [pc, #64]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800548a:	d112      	bne.n	80054b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e011      	b.n	80054b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005490:	4b0b      	ldr	r3, [pc, #44]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005496:	4a0a      	ldr	r2, [pc, #40]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800549c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80054a0:	e007      	b.n	80054b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054a2:	4b07      	ldr	r3, [pc, #28]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054aa:	4a05      	ldr	r2, [pc, #20]	@ (80054c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	40007000 	.word	0x40007000
 80054c4:	20000000 	.word	0x20000000
 80054c8:	431bde83 	.word	0x431bde83

080054cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80054d0:	4b05      	ldr	r3, [pc, #20]	@ (80054e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	4a04      	ldr	r2, [pc, #16]	@ (80054e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80054d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054da:	6093      	str	r3, [r2, #8]
}
 80054dc:	bf00      	nop
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40007000 	.word	0x40007000

080054ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e2fe      	b.n	8005afc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d075      	beq.n	80055f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800550a:	4b97      	ldr	r3, [pc, #604]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 030c 	and.w	r3, r3, #12
 8005512:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005514:	4b94      	ldr	r3, [pc, #592]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0303 	and.w	r3, r3, #3
 800551c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	2b0c      	cmp	r3, #12
 8005522:	d102      	bne.n	800552a <HAL_RCC_OscConfig+0x3e>
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2b03      	cmp	r3, #3
 8005528:	d002      	beq.n	8005530 <HAL_RCC_OscConfig+0x44>
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	2b08      	cmp	r3, #8
 800552e:	d10b      	bne.n	8005548 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005530:	4b8d      	ldr	r3, [pc, #564]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d05b      	beq.n	80055f4 <HAL_RCC_OscConfig+0x108>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d157      	bne.n	80055f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e2d9      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005550:	d106      	bne.n	8005560 <HAL_RCC_OscConfig+0x74>
 8005552:	4b85      	ldr	r3, [pc, #532]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a84      	ldr	r2, [pc, #528]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	e01d      	b.n	800559c <HAL_RCC_OscConfig+0xb0>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005568:	d10c      	bne.n	8005584 <HAL_RCC_OscConfig+0x98>
 800556a:	4b7f      	ldr	r3, [pc, #508]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a7e      	ldr	r2, [pc, #504]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	4b7c      	ldr	r3, [pc, #496]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a7b      	ldr	r2, [pc, #492]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 800557c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e00b      	b.n	800559c <HAL_RCC_OscConfig+0xb0>
 8005584:	4b78      	ldr	r3, [pc, #480]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a77      	ldr	r2, [pc, #476]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 800558a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	4b75      	ldr	r3, [pc, #468]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a74      	ldr	r2, [pc, #464]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800559a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d013      	beq.n	80055cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a4:	f7fd f99e 	bl	80028e4 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055ac:	f7fd f99a 	bl	80028e4 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b64      	cmp	r3, #100	@ 0x64
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e29e      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055be:	4b6a      	ldr	r3, [pc, #424]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCC_OscConfig+0xc0>
 80055ca:	e014      	b.n	80055f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055cc:	f7fd f98a 	bl	80028e4 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055d4:	f7fd f986 	bl	80028e4 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b64      	cmp	r3, #100	@ 0x64
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e28a      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055e6:	4b60      	ldr	r3, [pc, #384]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1f0      	bne.n	80055d4 <HAL_RCC_OscConfig+0xe8>
 80055f2:	e000      	b.n	80055f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d075      	beq.n	80056ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005602:	4b59      	ldr	r3, [pc, #356]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 030c 	and.w	r3, r3, #12
 800560a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800560c:	4b56      	ldr	r3, [pc, #344]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	2b0c      	cmp	r3, #12
 800561a:	d102      	bne.n	8005622 <HAL_RCC_OscConfig+0x136>
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d002      	beq.n	8005628 <HAL_RCC_OscConfig+0x13c>
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	2b04      	cmp	r3, #4
 8005626:	d11f      	bne.n	8005668 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005628:	4b4f      	ldr	r3, [pc, #316]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <HAL_RCC_OscConfig+0x154>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e25d      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005640:	4b49      	ldr	r3, [pc, #292]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	061b      	lsls	r3, r3, #24
 800564e:	4946      	ldr	r1, [pc, #280]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005650:	4313      	orrs	r3, r2
 8005652:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005654:	4b45      	ldr	r3, [pc, #276]	@ (800576c <HAL_RCC_OscConfig+0x280>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f7fd f8f7 	bl	800284c <HAL_InitTick>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d043      	beq.n	80056ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e249      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d023      	beq.n	80056b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005670:	4b3d      	ldr	r3, [pc, #244]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a3c      	ldr	r2, [pc, #240]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800567a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fd f932 	bl	80028e4 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005684:	f7fd f92e 	bl	80028e4 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e232      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005696:	4b34      	ldr	r3, [pc, #208]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0f0      	beq.n	8005684 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a2:	4b31      	ldr	r3, [pc, #196]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	061b      	lsls	r3, r3, #24
 80056b0:	492d      	ldr	r1, [pc, #180]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	604b      	str	r3, [r1, #4]
 80056b6:	e01a      	b.n	80056ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 80056be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fd f90e 	bl	80028e4 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056cc:	f7fd f90a 	bl	80028e4 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e20e      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056de:	4b22      	ldr	r3, [pc, #136]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x1e0>
 80056ea:	e000      	b.n	80056ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d041      	beq.n	800577e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d01c      	beq.n	800573c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005702:	4b19      	ldr	r3, [pc, #100]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005708:	4a17      	ldr	r2, [pc, #92]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 800570a:	f043 0301 	orr.w	r3, r3, #1
 800570e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005712:	f7fd f8e7 	bl	80028e4 <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005718:	e008      	b.n	800572c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800571a:	f7fd f8e3 	bl	80028e4 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e1e7      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800572c:	4b0e      	ldr	r3, [pc, #56]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 800572e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0ef      	beq.n	800571a <HAL_RCC_OscConfig+0x22e>
 800573a:	e020      	b.n	800577e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800573c:	4b0a      	ldr	r3, [pc, #40]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 800573e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005742:	4a09      	ldr	r2, [pc, #36]	@ (8005768 <HAL_RCC_OscConfig+0x27c>)
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574c:	f7fd f8ca 	bl	80028e4 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005752:	e00d      	b.n	8005770 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005754:	f7fd f8c6 	bl	80028e4 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d906      	bls.n	8005770 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e1ca      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
 8005766:	bf00      	nop
 8005768:	40021000 	.word	0x40021000
 800576c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005770:	4b8c      	ldr	r3, [pc, #560]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 8005772:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1ea      	bne.n	8005754 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 80a6 	beq.w	80058d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800578c:	2300      	movs	r3, #0
 800578e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005790:	4b84      	ldr	r3, [pc, #528]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 8005792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_RCC_OscConfig+0x2b4>
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <HAL_RCC_OscConfig+0x2b6>
 80057a0:	2300      	movs	r3, #0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a6:	4b7f      	ldr	r3, [pc, #508]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 80057a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057aa:	4a7e      	ldr	r2, [pc, #504]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 80057ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80057b2:	4b7c      	ldr	r3, [pc, #496]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80057be:	2301      	movs	r3, #1
 80057c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057c2:	4b79      	ldr	r3, [pc, #484]	@ (80059a8 <HAL_RCC_OscConfig+0x4bc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d118      	bne.n	8005800 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057ce:	4b76      	ldr	r3, [pc, #472]	@ (80059a8 <HAL_RCC_OscConfig+0x4bc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a75      	ldr	r2, [pc, #468]	@ (80059a8 <HAL_RCC_OscConfig+0x4bc>)
 80057d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057da:	f7fd f883 	bl	80028e4 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e2:	f7fd f87f 	bl	80028e4 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e183      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057f4:	4b6c      	ldr	r3, [pc, #432]	@ (80059a8 <HAL_RCC_OscConfig+0x4bc>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f0      	beq.n	80057e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d108      	bne.n	800581a <HAL_RCC_OscConfig+0x32e>
 8005808:	4b66      	ldr	r3, [pc, #408]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 800580a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580e:	4a65      	ldr	r2, [pc, #404]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 8005810:	f043 0301 	orr.w	r3, r3, #1
 8005814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005818:	e024      	b.n	8005864 <HAL_RCC_OscConfig+0x378>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b05      	cmp	r3, #5
 8005820:	d110      	bne.n	8005844 <HAL_RCC_OscConfig+0x358>
 8005822:	4b60      	ldr	r3, [pc, #384]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005828:	4a5e      	ldr	r2, [pc, #376]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 800582a:	f043 0304 	orr.w	r3, r3, #4
 800582e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005832:	4b5c      	ldr	r3, [pc, #368]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 8005834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005838:	4a5a      	ldr	r2, [pc, #360]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005842:	e00f      	b.n	8005864 <HAL_RCC_OscConfig+0x378>
 8005844:	4b57      	ldr	r3, [pc, #348]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800584a:	4a56      	ldr	r2, [pc, #344]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 800584c:	f023 0301 	bic.w	r3, r3, #1
 8005850:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005854:	4b53      	ldr	r3, [pc, #332]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 8005856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585a:	4a52      	ldr	r2, [pc, #328]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 800585c:	f023 0304 	bic.w	r3, r3, #4
 8005860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d016      	beq.n	800589a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586c:	f7fd f83a 	bl	80028e4 <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005872:	e00a      	b.n	800588a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005874:	f7fd f836 	bl	80028e4 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e138      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800588a:	4b46      	ldr	r3, [pc, #280]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 800588c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0ed      	beq.n	8005874 <HAL_RCC_OscConfig+0x388>
 8005898:	e015      	b.n	80058c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589a:	f7fd f823 	bl	80028e4 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058a0:	e00a      	b.n	80058b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a2:	f7fd f81f 	bl	80028e4 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e121      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058b8:	4b3a      	ldr	r3, [pc, #232]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1ed      	bne.n	80058a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058c6:	7ffb      	ldrb	r3, [r7, #31]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d105      	bne.n	80058d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058cc:	4b35      	ldr	r3, [pc, #212]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 80058ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d0:	4a34      	ldr	r2, [pc, #208]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 80058d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d03c      	beq.n	800595e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d01c      	beq.n	8005926 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058ec:	4b2d      	ldr	r3, [pc, #180]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 80058ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058f2:	4a2c      	ldr	r2, [pc, #176]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fc:	f7fc fff2 	bl	80028e4 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005904:	f7fc ffee 	bl	80028e4 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e0f2      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005916:	4b23      	ldr	r3, [pc, #140]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 8005918:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0ef      	beq.n	8005904 <HAL_RCC_OscConfig+0x418>
 8005924:	e01b      	b.n	800595e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005926:	4b1f      	ldr	r3, [pc, #124]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 8005928:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800592c:	4a1d      	ldr	r2, [pc, #116]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 800592e:	f023 0301 	bic.w	r3, r3, #1
 8005932:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005936:	f7fc ffd5 	bl	80028e4 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800593c:	e008      	b.n	8005950 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800593e:	f7fc ffd1 	bl	80028e4 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e0d5      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005950:	4b14      	ldr	r3, [pc, #80]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 8005952:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1ef      	bne.n	800593e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 80c9 	beq.w	8005afa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005968:	4b0e      	ldr	r3, [pc, #56]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 030c 	and.w	r3, r3, #12
 8005970:	2b0c      	cmp	r3, #12
 8005972:	f000 8083 	beq.w	8005a7c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	2b02      	cmp	r3, #2
 800597c:	d15e      	bne.n	8005a3c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800597e:	4b09      	ldr	r3, [pc, #36]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a08      	ldr	r2, [pc, #32]	@ (80059a4 <HAL_RCC_OscConfig+0x4b8>)
 8005984:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598a:	f7fc ffab 	bl	80028e4 <HAL_GetTick>
 800598e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005990:	e00c      	b.n	80059ac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005992:	f7fc ffa7 	bl	80028e4 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d905      	bls.n	80059ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e0ab      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
 80059a4:	40021000 	.word	0x40021000
 80059a8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059ac:	4b55      	ldr	r3, [pc, #340]	@ (8005b04 <HAL_RCC_OscConfig+0x618>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1ec      	bne.n	8005992 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059b8:	4b52      	ldr	r3, [pc, #328]	@ (8005b04 <HAL_RCC_OscConfig+0x618>)
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	4b52      	ldr	r3, [pc, #328]	@ (8005b08 <HAL_RCC_OscConfig+0x61c>)
 80059be:	4013      	ands	r3, r2
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6a11      	ldr	r1, [r2, #32]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059c8:	3a01      	subs	r2, #1
 80059ca:	0112      	lsls	r2, r2, #4
 80059cc:	4311      	orrs	r1, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80059d2:	0212      	lsls	r2, r2, #8
 80059d4:	4311      	orrs	r1, r2
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80059da:	0852      	lsrs	r2, r2, #1
 80059dc:	3a01      	subs	r2, #1
 80059de:	0552      	lsls	r2, r2, #21
 80059e0:	4311      	orrs	r1, r2
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059e6:	0852      	lsrs	r2, r2, #1
 80059e8:	3a01      	subs	r2, #1
 80059ea:	0652      	lsls	r2, r2, #25
 80059ec:	4311      	orrs	r1, r2
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80059f2:	06d2      	lsls	r2, r2, #27
 80059f4:	430a      	orrs	r2, r1
 80059f6:	4943      	ldr	r1, [pc, #268]	@ (8005b04 <HAL_RCC_OscConfig+0x618>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059fc:	4b41      	ldr	r3, [pc, #260]	@ (8005b04 <HAL_RCC_OscConfig+0x618>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a40      	ldr	r2, [pc, #256]	@ (8005b04 <HAL_RCC_OscConfig+0x618>)
 8005a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a08:	4b3e      	ldr	r3, [pc, #248]	@ (8005b04 <HAL_RCC_OscConfig+0x618>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4a3d      	ldr	r2, [pc, #244]	@ (8005b04 <HAL_RCC_OscConfig+0x618>)
 8005a0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a14:	f7fc ff66 	bl	80028e4 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a1c:	f7fc ff62 	bl	80028e4 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e066      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a2e:	4b35      	ldr	r3, [pc, #212]	@ (8005b04 <HAL_RCC_OscConfig+0x618>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0f0      	beq.n	8005a1c <HAL_RCC_OscConfig+0x530>
 8005a3a:	e05e      	b.n	8005afa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a3c:	4b31      	ldr	r3, [pc, #196]	@ (8005b04 <HAL_RCC_OscConfig+0x618>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a30      	ldr	r2, [pc, #192]	@ (8005b04 <HAL_RCC_OscConfig+0x618>)
 8005a42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a48:	f7fc ff4c 	bl	80028e4 <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a4e:	e008      	b.n	8005a62 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a50:	f7fc ff48 	bl	80028e4 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e04c      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a62:	4b28      	ldr	r3, [pc, #160]	@ (8005b04 <HAL_RCC_OscConfig+0x618>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1f0      	bne.n	8005a50 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005a6e:	4b25      	ldr	r3, [pc, #148]	@ (8005b04 <HAL_RCC_OscConfig+0x618>)
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	4924      	ldr	r1, [pc, #144]	@ (8005b04 <HAL_RCC_OscConfig+0x618>)
 8005a74:	4b25      	ldr	r3, [pc, #148]	@ (8005b0c <HAL_RCC_OscConfig+0x620>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	60cb      	str	r3, [r1, #12]
 8005a7a:	e03e      	b.n	8005afa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e039      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005a88:	4b1e      	ldr	r3, [pc, #120]	@ (8005b04 <HAL_RCC_OscConfig+0x618>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f003 0203 	and.w	r2, r3, #3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d12c      	bne.n	8005af6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d123      	bne.n	8005af6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d11b      	bne.n	8005af6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d113      	bne.n	8005af6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	3b01      	subs	r3, #1
 8005adc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d109      	bne.n	8005af6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aec:	085b      	lsrs	r3, r3, #1
 8005aee:	3b01      	subs	r3, #1
 8005af0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d001      	beq.n	8005afa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3720      	adds	r7, #32
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40021000 	.word	0x40021000
 8005b08:	019f800c 	.word	0x019f800c
 8005b0c:	feeefffc 	.word	0xfeeefffc

08005b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e11e      	b.n	8005d66 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b28:	4b91      	ldr	r3, [pc, #580]	@ (8005d70 <HAL_RCC_ClockConfig+0x260>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d910      	bls.n	8005b58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b36:	4b8e      	ldr	r3, [pc, #568]	@ (8005d70 <HAL_RCC_ClockConfig+0x260>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f023 020f 	bic.w	r2, r3, #15
 8005b3e:	498c      	ldr	r1, [pc, #560]	@ (8005d70 <HAL_RCC_ClockConfig+0x260>)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b46:	4b8a      	ldr	r3, [pc, #552]	@ (8005d70 <HAL_RCC_ClockConfig+0x260>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d001      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e106      	b.n	8005d66 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d073      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d129      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b6c:	4b81      	ldr	r3, [pc, #516]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0f4      	b.n	8005d66 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005b7c:	f000 f99e 	bl	8005ebc <RCC_GetSysClockFreqFromPLLSource>
 8005b80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4a7c      	ldr	r2, [pc, #496]	@ (8005d78 <HAL_RCC_ClockConfig+0x268>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d93f      	bls.n	8005c0a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d009      	beq.n	8005baa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d033      	beq.n	8005c0a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d12f      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005baa:	4b72      	ldr	r3, [pc, #456]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bb2:	4a70      	ldr	r2, [pc, #448]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005bba:	2380      	movs	r3, #128	@ 0x80
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	e024      	b.n	8005c0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d107      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d109      	bne.n	8005be8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0c6      	b.n	8005d66 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bd8:	4b66      	ldr	r3, [pc, #408]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e0be      	b.n	8005d66 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005be8:	f000 f8ce 	bl	8005d88 <HAL_RCC_GetSysClockFreq>
 8005bec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	4a61      	ldr	r2, [pc, #388]	@ (8005d78 <HAL_RCC_ClockConfig+0x268>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d909      	bls.n	8005c0a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bf6:	4b5f      	ldr	r3, [pc, #380]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bfe:	4a5d      	ldr	r2, [pc, #372]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005c06:	2380      	movs	r3, #128	@ 0x80
 8005c08:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c0a:	4b5a      	ldr	r3, [pc, #360]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f023 0203 	bic.w	r2, r3, #3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4957      	ldr	r1, [pc, #348]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c1c:	f7fc fe62 	bl	80028e4 <HAL_GetTick>
 8005c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c22:	e00a      	b.n	8005c3a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c24:	f7fc fe5e 	bl	80028e4 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e095      	b.n	8005d66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3a:	4b4e      	ldr	r3, [pc, #312]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 020c 	and.w	r2, r3, #12
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d1eb      	bne.n	8005c24 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d023      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c64:	4b43      	ldr	r3, [pc, #268]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	4a42      	ldr	r2, [pc, #264]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005c6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c6e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d007      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c84:	4a3b      	ldr	r2, [pc, #236]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005c86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c8c:	4b39      	ldr	r3, [pc, #228]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4936      	ldr	r1, [pc, #216]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	608b      	str	r3, [r1, #8]
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2b80      	cmp	r3, #128	@ 0x80
 8005ca4:	d105      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005ca6:	4b33      	ldr	r3, [pc, #204]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	4a32      	ldr	r2, [pc, #200]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005cac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cb0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8005d70 <HAL_RCC_ClockConfig+0x260>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d21d      	bcs.n	8005cfc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8005d70 <HAL_RCC_ClockConfig+0x260>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f023 020f 	bic.w	r2, r3, #15
 8005cc8:	4929      	ldr	r1, [pc, #164]	@ (8005d70 <HAL_RCC_ClockConfig+0x260>)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005cd0:	f7fc fe08 	bl	80028e4 <HAL_GetTick>
 8005cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd6:	e00a      	b.n	8005cee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd8:	f7fc fe04 	bl	80028e4 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e03b      	b.n	8005d66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cee:	4b20      	ldr	r3, [pc, #128]	@ (8005d70 <HAL_RCC_ClockConfig+0x260>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d1ed      	bne.n	8005cd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d08:	4b1a      	ldr	r3, [pc, #104]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	4917      	ldr	r1, [pc, #92]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d26:	4b13      	ldr	r3, [pc, #76]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	490f      	ldr	r1, [pc, #60]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d3a:	f000 f825 	bl	8005d88 <HAL_RCC_GetSysClockFreq>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	4b0c      	ldr	r3, [pc, #48]	@ (8005d74 <HAL_RCC_ClockConfig+0x264>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	490c      	ldr	r1, [pc, #48]	@ (8005d7c <HAL_RCC_ClockConfig+0x26c>)
 8005d4c:	5ccb      	ldrb	r3, [r1, r3]
 8005d4e:	f003 031f 	and.w	r3, r3, #31
 8005d52:	fa22 f303 	lsr.w	r3, r2, r3
 8005d56:	4a0a      	ldr	r2, [pc, #40]	@ (8005d80 <HAL_RCC_ClockConfig+0x270>)
 8005d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d84 <HAL_RCC_ClockConfig+0x274>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fc fd74 	bl	800284c <HAL_InitTick>
 8005d64:	4603      	mov	r3, r0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	40022000 	.word	0x40022000
 8005d74:	40021000 	.word	0x40021000
 8005d78:	04c4b400 	.word	0x04c4b400
 8005d7c:	0800a6f0 	.word	0x0800a6f0
 8005d80:	20000000 	.word	0x20000000
 8005d84:	20000004 	.word	0x20000004

08005d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 030c 	and.w	r3, r3, #12
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d102      	bne.n	8005da0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8005e44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	e047      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005da0:	4b27      	ldr	r3, [pc, #156]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 030c 	and.w	r3, r3, #12
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d102      	bne.n	8005db2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005dac:	4b26      	ldr	r3, [pc, #152]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005dae:	613b      	str	r3, [r7, #16]
 8005db0:	e03e      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005db2:	4b23      	ldr	r3, [pc, #140]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 030c 	and.w	r3, r3, #12
 8005dba:	2b0c      	cmp	r3, #12
 8005dbc:	d136      	bne.n	8005e2c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dbe:	4b20      	ldr	r3, [pc, #128]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	091b      	lsrs	r3, r3, #4
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d10c      	bne.n	8005df6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de4:	4a16      	ldr	r2, [pc, #88]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005de6:	68d2      	ldr	r2, [r2, #12]
 8005de8:	0a12      	lsrs	r2, r2, #8
 8005dea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005dee:	fb02 f303 	mul.w	r3, r2, r3
 8005df2:	617b      	str	r3, [r7, #20]
      break;
 8005df4:	e00c      	b.n	8005e10 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005df6:	4a13      	ldr	r2, [pc, #76]	@ (8005e44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfe:	4a10      	ldr	r2, [pc, #64]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e00:	68d2      	ldr	r2, [r2, #12]
 8005e02:	0a12      	lsrs	r2, r2, #8
 8005e04:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e08:	fb02 f303 	mul.w	r3, r2, r3
 8005e0c:	617b      	str	r3, [r7, #20]
      break;
 8005e0e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e10:	4b0b      	ldr	r3, [pc, #44]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	0e5b      	lsrs	r3, r3, #25
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e28:	613b      	str	r3, [r7, #16]
 8005e2a:	e001      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e30:	693b      	ldr	r3, [r7, #16]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40021000 	.word	0x40021000
 8005e44:	00f42400 	.word	0x00f42400
 8005e48:	016e3600 	.word	0x016e3600

08005e4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e50:	4b03      	ldr	r3, [pc, #12]	@ (8005e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e52:	681b      	ldr	r3, [r3, #0]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	20000000 	.word	0x20000000

08005e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e68:	f7ff fff0 	bl	8005e4c <HAL_RCC_GetHCLKFreq>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	4b06      	ldr	r3, [pc, #24]	@ (8005e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	4904      	ldr	r1, [pc, #16]	@ (8005e8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e7a:	5ccb      	ldrb	r3, [r1, r3]
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	0800a700 	.word	0x0800a700

08005e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e94:	f7ff ffda 	bl	8005e4c <HAL_RCC_GetHCLKFreq>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	4b06      	ldr	r3, [pc, #24]	@ (8005eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	0adb      	lsrs	r3, r3, #11
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	4904      	ldr	r1, [pc, #16]	@ (8005eb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ea6:	5ccb      	ldrb	r3, [r1, r3]
 8005ea8:	f003 031f 	and.w	r3, r3, #31
 8005eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	0800a700 	.word	0x0800a700

08005ebc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8005f3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8005f3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	091b      	lsrs	r3, r3, #4
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d10c      	bne.n	8005efa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ee0:	4a17      	ldr	r2, [pc, #92]	@ (8005f40 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee8:	4a14      	ldr	r2, [pc, #80]	@ (8005f3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005eea:	68d2      	ldr	r2, [r2, #12]
 8005eec:	0a12      	lsrs	r2, r2, #8
 8005eee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ef2:	fb02 f303 	mul.w	r3, r2, r3
 8005ef6:	617b      	str	r3, [r7, #20]
    break;
 8005ef8:	e00c      	b.n	8005f14 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005efa:	4a12      	ldr	r2, [pc, #72]	@ (8005f44 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f02:	4a0e      	ldr	r2, [pc, #56]	@ (8005f3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f04:	68d2      	ldr	r2, [r2, #12]
 8005f06:	0a12      	lsrs	r2, r2, #8
 8005f08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005f0c:	fb02 f303 	mul.w	r3, r2, r3
 8005f10:	617b      	str	r3, [r7, #20]
    break;
 8005f12:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f14:	4b09      	ldr	r3, [pc, #36]	@ (8005f3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	0e5b      	lsrs	r3, r3, #25
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	3301      	adds	r3, #1
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005f2e:	687b      	ldr	r3, [r7, #4]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	40021000 	.word	0x40021000
 8005f40:	016e3600 	.word	0x016e3600
 8005f44:	00f42400 	.word	0x00f42400

08005f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f50:	2300      	movs	r3, #0
 8005f52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f54:	2300      	movs	r3, #0
 8005f56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8098 	beq.w	8006096 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f66:	2300      	movs	r3, #0
 8005f68:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f6a:	4b43      	ldr	r3, [pc, #268]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10d      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f76:	4b40      	ldr	r3, [pc, #256]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f7a:	4a3f      	ldr	r2, [pc, #252]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f82:	4b3d      	ldr	r3, [pc, #244]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f8a:	60bb      	str	r3, [r7, #8]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f92:	4b3a      	ldr	r3, [pc, #232]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a39      	ldr	r2, [pc, #228]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f9e:	f7fc fca1 	bl	80028e4 <HAL_GetTick>
 8005fa2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fa4:	e009      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa6:	f7fc fc9d 	bl	80028e4 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d902      	bls.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	74fb      	strb	r3, [r7, #19]
        break;
 8005fb8:	e005      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fba:	4b30      	ldr	r3, [pc, #192]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0ef      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005fc6:	7cfb      	ldrb	r3, [r7, #19]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d159      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fd6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d01e      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d019      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fe8:	4b23      	ldr	r3, [pc, #140]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ff2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ff4:	4b20      	ldr	r3, [pc, #128]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006004:	4b1c      	ldr	r3, [pc, #112]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800600a:	4a1b      	ldr	r2, [pc, #108]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800600c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006014:	4a18      	ldr	r2, [pc, #96]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d016      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006026:	f7fc fc5d 	bl	80028e4 <HAL_GetTick>
 800602a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800602c:	e00b      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800602e:	f7fc fc59 	bl	80028e4 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800603c:	4293      	cmp	r3, r2
 800603e:	d902      	bls.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	74fb      	strb	r3, [r7, #19]
            break;
 8006044:	e006      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006046:	4b0c      	ldr	r3, [pc, #48]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0ec      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006054:	7cfb      	ldrb	r3, [r7, #19]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10b      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800605a:	4b07      	ldr	r3, [pc, #28]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800605c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006060:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006068:	4903      	ldr	r1, [pc, #12]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006070:	e008      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006072:	7cfb      	ldrb	r3, [r7, #19]
 8006074:	74bb      	strb	r3, [r7, #18]
 8006076:	e005      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006078:	40021000 	.word	0x40021000
 800607c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006080:	7cfb      	ldrb	r3, [r7, #19]
 8006082:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006084:	7c7b      	ldrb	r3, [r7, #17]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d105      	bne.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800608a:	4ba7      	ldr	r3, [pc, #668]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608e:	4aa6      	ldr	r2, [pc, #664]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006094:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060a2:	4ba1      	ldr	r3, [pc, #644]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a8:	f023 0203 	bic.w	r2, r3, #3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	499d      	ldr	r1, [pc, #628]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060c4:	4b98      	ldr	r3, [pc, #608]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ca:	f023 020c 	bic.w	r2, r3, #12
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	4995      	ldr	r1, [pc, #596]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060e6:	4b90      	ldr	r3, [pc, #576]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	498c      	ldr	r1, [pc, #560]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006108:	4b87      	ldr	r3, [pc, #540]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800610a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800610e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	4984      	ldr	r1, [pc, #528]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800612a:	4b7f      	ldr	r3, [pc, #508]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800612c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006130:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	497b      	ldr	r1, [pc, #492]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800614c:	4b76      	ldr	r3, [pc, #472]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800614e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006152:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	4973      	ldr	r1, [pc, #460]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800616e:	4b6e      	ldr	r3, [pc, #440]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006174:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	496a      	ldr	r1, [pc, #424]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006190:	4b65      	ldr	r3, [pc, #404]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006196:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	4962      	ldr	r1, [pc, #392]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061b2:	4b5d      	ldr	r3, [pc, #372]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c0:	4959      	ldr	r1, [pc, #356]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061d4:	4b54      	ldr	r3, [pc, #336]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061da:	f023 0203 	bic.w	r2, r3, #3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e2:	4951      	ldr	r1, [pc, #324]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006204:	4948      	ldr	r1, [pc, #288]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006214:	2b00      	cmp	r3, #0
 8006216:	d015      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006218:	4b43      	ldr	r3, [pc, #268]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006226:	4940      	ldr	r1, [pc, #256]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006232:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006236:	d105      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006238:	4b3b      	ldr	r3, [pc, #236]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	4a3a      	ldr	r2, [pc, #232]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800623e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006242:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800624c:	2b00      	cmp	r3, #0
 800624e:	d015      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006250:	4b35      	ldr	r3, [pc, #212]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006256:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800625e:	4932      	ldr	r1, [pc, #200]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006260:	4313      	orrs	r3, r2
 8006262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800626a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800626e:	d105      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006270:	4b2d      	ldr	r3, [pc, #180]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	4a2c      	ldr	r2, [pc, #176]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800627a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d015      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006288:	4b27      	ldr	r3, [pc, #156]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800628e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006296:	4924      	ldr	r1, [pc, #144]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006298:	4313      	orrs	r3, r2
 800629a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062a6:	d105      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062a8:	4b1f      	ldr	r3, [pc, #124]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d015      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062c0:	4b19      	ldr	r3, [pc, #100]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ce:	4916      	ldr	r1, [pc, #88]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062de:	d105      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062e0:	4b11      	ldr	r3, [pc, #68]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	4a10      	ldr	r2, [pc, #64]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d019      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006306:	4908      	ldr	r1, [pc, #32]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006312:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006316:	d109      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006318:	4b03      	ldr	r3, [pc, #12]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	4a02      	ldr	r2, [pc, #8]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800631e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006322:	60d3      	str	r3, [r2, #12]
 8006324:	e002      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006326:	bf00      	nop
 8006328:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d015      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006338:	4b29      	ldr	r3, [pc, #164]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800633a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800633e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006346:	4926      	ldr	r1, [pc, #152]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006348:	4313      	orrs	r3, r2
 800634a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006352:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006356:	d105      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006358:	4b21      	ldr	r3, [pc, #132]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	4a20      	ldr	r2, [pc, #128]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800635e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006362:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d015      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006370:	4b1b      	ldr	r3, [pc, #108]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006376:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800637e:	4918      	ldr	r1, [pc, #96]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006380:	4313      	orrs	r3, r2
 8006382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800638e:	d105      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006390:	4b13      	ldr	r3, [pc, #76]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	4a12      	ldr	r2, [pc, #72]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800639a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d015      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063a8:	4b0d      	ldr	r3, [pc, #52]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063b6:	490a      	ldr	r1, [pc, #40]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063c6:	d105      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063c8:	4b05      	ldr	r3, [pc, #20]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	4a04      	ldr	r2, [pc, #16]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80063d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	40021000 	.word	0x40021000

080063e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e049      	b.n	800648a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7fc f890 	bl	8002530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3304      	adds	r3, #4
 8006420:	4619      	mov	r1, r3
 8006422:	4610      	mov	r0, r2
 8006424:	f000 ff68 	bl	80072f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d001      	beq.n	80064ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e04c      	b.n	8006546 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a26      	ldr	r2, [pc, #152]	@ (8006554 <HAL_TIM_Base_Start+0xc0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d022      	beq.n	8006504 <HAL_TIM_Base_Start+0x70>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c6:	d01d      	beq.n	8006504 <HAL_TIM_Base_Start+0x70>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a22      	ldr	r2, [pc, #136]	@ (8006558 <HAL_TIM_Base_Start+0xc4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d018      	beq.n	8006504 <HAL_TIM_Base_Start+0x70>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a21      	ldr	r2, [pc, #132]	@ (800655c <HAL_TIM_Base_Start+0xc8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d013      	beq.n	8006504 <HAL_TIM_Base_Start+0x70>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006560 <HAL_TIM_Base_Start+0xcc>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00e      	beq.n	8006504 <HAL_TIM_Base_Start+0x70>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006564 <HAL_TIM_Base_Start+0xd0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d009      	beq.n	8006504 <HAL_TIM_Base_Start+0x70>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006568 <HAL_TIM_Base_Start+0xd4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d004      	beq.n	8006504 <HAL_TIM_Base_Start+0x70>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1b      	ldr	r2, [pc, #108]	@ (800656c <HAL_TIM_Base_Start+0xd8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d115      	bne.n	8006530 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	4b19      	ldr	r3, [pc, #100]	@ (8006570 <HAL_TIM_Base_Start+0xdc>)
 800650c:	4013      	ands	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b06      	cmp	r3, #6
 8006514:	d015      	beq.n	8006542 <HAL_TIM_Base_Start+0xae>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800651c:	d011      	beq.n	8006542 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f042 0201 	orr.w	r2, r2, #1
 800652c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652e:	e008      	b.n	8006542 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 0201 	orr.w	r2, r2, #1
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	e000      	b.n	8006544 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006542:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40012c00 	.word	0x40012c00
 8006558:	40000400 	.word	0x40000400
 800655c:	40000800 	.word	0x40000800
 8006560:	40000c00 	.word	0x40000c00
 8006564:	40013400 	.word	0x40013400
 8006568:	40014000 	.word	0x40014000
 800656c:	40015000 	.word	0x40015000
 8006570:	00010007 	.word	0x00010007

08006574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b01      	cmp	r3, #1
 8006586:	d001      	beq.n	800658c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e054      	b.n	8006636 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0201 	orr.w	r2, r2, #1
 80065a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a26      	ldr	r2, [pc, #152]	@ (8006644 <HAL_TIM_Base_Start_IT+0xd0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d022      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x80>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b6:	d01d      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x80>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a22      	ldr	r2, [pc, #136]	@ (8006648 <HAL_TIM_Base_Start_IT+0xd4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d018      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x80>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a21      	ldr	r2, [pc, #132]	@ (800664c <HAL_TIM_Base_Start_IT+0xd8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d013      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x80>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006650 <HAL_TIM_Base_Start_IT+0xdc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00e      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x80>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a1e      	ldr	r2, [pc, #120]	@ (8006654 <HAL_TIM_Base_Start_IT+0xe0>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d009      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x80>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006658 <HAL_TIM_Base_Start_IT+0xe4>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d004      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x80>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1b      	ldr	r2, [pc, #108]	@ (800665c <HAL_TIM_Base_Start_IT+0xe8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d115      	bne.n	8006620 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	4b19      	ldr	r3, [pc, #100]	@ (8006660 <HAL_TIM_Base_Start_IT+0xec>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b06      	cmp	r3, #6
 8006604:	d015      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0xbe>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800660c:	d011      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0201 	orr.w	r2, r2, #1
 800661c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800661e:	e008      	b.n	8006632 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0201 	orr.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	e000      	b.n	8006634 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006632:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	40012c00 	.word	0x40012c00
 8006648:	40000400 	.word	0x40000400
 800664c:	40000800 	.word	0x40000800
 8006650:	40000c00 	.word	0x40000c00
 8006654:	40013400 	.word	0x40013400
 8006658:	40014000 	.word	0x40014000
 800665c:	40015000 	.word	0x40015000
 8006660:	00010007 	.word	0x00010007

08006664 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e049      	b.n	800670a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d106      	bne.n	8006690 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f841 	bl	8006712 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3304      	adds	r3, #4
 80066a0:	4619      	mov	r1, r3
 80066a2:	4610      	mov	r0, r2
 80066a4:	f000 fe28 	bl	80072f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
	...

08006728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d109      	bne.n	800674c <HAL_TIM_PWM_Start+0x24>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b01      	cmp	r3, #1
 8006742:	bf14      	ite	ne
 8006744:	2301      	movne	r3, #1
 8006746:	2300      	moveq	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	e03c      	b.n	80067c6 <HAL_TIM_PWM_Start+0x9e>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b04      	cmp	r3, #4
 8006750:	d109      	bne.n	8006766 <HAL_TIM_PWM_Start+0x3e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b01      	cmp	r3, #1
 800675c:	bf14      	ite	ne
 800675e:	2301      	movne	r3, #1
 8006760:	2300      	moveq	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	e02f      	b.n	80067c6 <HAL_TIM_PWM_Start+0x9e>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b08      	cmp	r3, #8
 800676a:	d109      	bne.n	8006780 <HAL_TIM_PWM_Start+0x58>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b01      	cmp	r3, #1
 8006776:	bf14      	ite	ne
 8006778:	2301      	movne	r3, #1
 800677a:	2300      	moveq	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	e022      	b.n	80067c6 <HAL_TIM_PWM_Start+0x9e>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b0c      	cmp	r3, #12
 8006784:	d109      	bne.n	800679a <HAL_TIM_PWM_Start+0x72>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b01      	cmp	r3, #1
 8006790:	bf14      	ite	ne
 8006792:	2301      	movne	r3, #1
 8006794:	2300      	moveq	r3, #0
 8006796:	b2db      	uxtb	r3, r3
 8006798:	e015      	b.n	80067c6 <HAL_TIM_PWM_Start+0x9e>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b10      	cmp	r3, #16
 800679e:	d109      	bne.n	80067b4 <HAL_TIM_PWM_Start+0x8c>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	bf14      	ite	ne
 80067ac:	2301      	movne	r3, #1
 80067ae:	2300      	moveq	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	e008      	b.n	80067c6 <HAL_TIM_PWM_Start+0x9e>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	bf14      	ite	ne
 80067c0:	2301      	movne	r3, #1
 80067c2:	2300      	moveq	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e0a6      	b.n	800691c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d104      	bne.n	80067de <HAL_TIM_PWM_Start+0xb6>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067dc:	e023      	b.n	8006826 <HAL_TIM_PWM_Start+0xfe>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d104      	bne.n	80067ee <HAL_TIM_PWM_Start+0xc6>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067ec:	e01b      	b.n	8006826 <HAL_TIM_PWM_Start+0xfe>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	d104      	bne.n	80067fe <HAL_TIM_PWM_Start+0xd6>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067fc:	e013      	b.n	8006826 <HAL_TIM_PWM_Start+0xfe>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b0c      	cmp	r3, #12
 8006802:	d104      	bne.n	800680e <HAL_TIM_PWM_Start+0xe6>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800680c:	e00b      	b.n	8006826 <HAL_TIM_PWM_Start+0xfe>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b10      	cmp	r3, #16
 8006812:	d104      	bne.n	800681e <HAL_TIM_PWM_Start+0xf6>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800681c:	e003      	b.n	8006826 <HAL_TIM_PWM_Start+0xfe>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2202      	movs	r2, #2
 8006822:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2201      	movs	r2, #1
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f001 f9dc 	bl	8007bec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a3a      	ldr	r2, [pc, #232]	@ (8006924 <HAL_TIM_PWM_Start+0x1fc>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d018      	beq.n	8006870 <HAL_TIM_PWM_Start+0x148>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a39      	ldr	r2, [pc, #228]	@ (8006928 <HAL_TIM_PWM_Start+0x200>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d013      	beq.n	8006870 <HAL_TIM_PWM_Start+0x148>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a37      	ldr	r2, [pc, #220]	@ (800692c <HAL_TIM_PWM_Start+0x204>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00e      	beq.n	8006870 <HAL_TIM_PWM_Start+0x148>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a36      	ldr	r2, [pc, #216]	@ (8006930 <HAL_TIM_PWM_Start+0x208>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d009      	beq.n	8006870 <HAL_TIM_PWM_Start+0x148>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a34      	ldr	r2, [pc, #208]	@ (8006934 <HAL_TIM_PWM_Start+0x20c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <HAL_TIM_PWM_Start+0x148>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a33      	ldr	r2, [pc, #204]	@ (8006938 <HAL_TIM_PWM_Start+0x210>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d101      	bne.n	8006874 <HAL_TIM_PWM_Start+0x14c>
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <HAL_TIM_PWM_Start+0x14e>
 8006874:	2300      	movs	r3, #0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006888:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a25      	ldr	r2, [pc, #148]	@ (8006924 <HAL_TIM_PWM_Start+0x1fc>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d022      	beq.n	80068da <HAL_TIM_PWM_Start+0x1b2>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800689c:	d01d      	beq.n	80068da <HAL_TIM_PWM_Start+0x1b2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a26      	ldr	r2, [pc, #152]	@ (800693c <HAL_TIM_PWM_Start+0x214>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d018      	beq.n	80068da <HAL_TIM_PWM_Start+0x1b2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a24      	ldr	r2, [pc, #144]	@ (8006940 <HAL_TIM_PWM_Start+0x218>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d013      	beq.n	80068da <HAL_TIM_PWM_Start+0x1b2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a23      	ldr	r2, [pc, #140]	@ (8006944 <HAL_TIM_PWM_Start+0x21c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00e      	beq.n	80068da <HAL_TIM_PWM_Start+0x1b2>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a19      	ldr	r2, [pc, #100]	@ (8006928 <HAL_TIM_PWM_Start+0x200>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d009      	beq.n	80068da <HAL_TIM_PWM_Start+0x1b2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a18      	ldr	r2, [pc, #96]	@ (800692c <HAL_TIM_PWM_Start+0x204>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d004      	beq.n	80068da <HAL_TIM_PWM_Start+0x1b2>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a18      	ldr	r2, [pc, #96]	@ (8006938 <HAL_TIM_PWM_Start+0x210>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d115      	bne.n	8006906 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	4b19      	ldr	r3, [pc, #100]	@ (8006948 <HAL_TIM_PWM_Start+0x220>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b06      	cmp	r3, #6
 80068ea:	d015      	beq.n	8006918 <HAL_TIM_PWM_Start+0x1f0>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f2:	d011      	beq.n	8006918 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0201 	orr.w	r2, r2, #1
 8006902:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006904:	e008      	b.n	8006918 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0201 	orr.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	e000      	b.n	800691a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006918:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40012c00 	.word	0x40012c00
 8006928:	40013400 	.word	0x40013400
 800692c:	40014000 	.word	0x40014000
 8006930:	40014400 	.word	0x40014400
 8006934:	40014800 	.word	0x40014800
 8006938:	40015000 	.word	0x40015000
 800693c:	40000400 	.word	0x40000400
 8006940:	40000800 	.word	0x40000800
 8006944:	40000c00 	.word	0x40000c00
 8006948:	00010007 	.word	0x00010007

0800694c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e097      	b.n	8006a90 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d106      	bne.n	800697a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7fb fd97 	bl	80024a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6812      	ldr	r2, [r2, #0]
 800698c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006990:	f023 0307 	bic.w	r3, r3, #7
 8006994:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3304      	adds	r3, #4
 800699e:	4619      	mov	r1, r3
 80069a0:	4610      	mov	r0, r2
 80069a2:	f000 fca9 	bl	80072f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ce:	f023 0303 	bic.w	r3, r3, #3
 80069d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	4313      	orrs	r3, r2
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80069ec:	f023 030c 	bic.w	r3, r3, #12
 80069f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	011a      	lsls	r2, r3, #4
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	031b      	lsls	r3, r3, #12
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006a2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006a32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006aa8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ab0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ab8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ac0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d110      	bne.n	8006aea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d102      	bne.n	8006ad4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ace:	7b7b      	ldrb	r3, [r7, #13]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d001      	beq.n	8006ad8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e069      	b.n	8006bac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ae8:	e031      	b.n	8006b4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d110      	bne.n	8006b12 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d102      	bne.n	8006afc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006af6:	7b3b      	ldrb	r3, [r7, #12]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d001      	beq.n	8006b00 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e055      	b.n	8006bac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b10:	e01d      	b.n	8006b4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d108      	bne.n	8006b2a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d105      	bne.n	8006b2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b1e:	7b7b      	ldrb	r3, [r7, #13]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d102      	bne.n	8006b2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b24:	7b3b      	ldrb	r3, [r7, #12]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d001      	beq.n	8006b2e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e03e      	b.n	8006bac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2202      	movs	r2, #2
 8006b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2202      	movs	r2, #2
 8006b42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <HAL_TIM_Encoder_Start+0xc4>
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d008      	beq.n	8006b6c <HAL_TIM_Encoder_Start+0xd4>
 8006b5a:	e00f      	b.n	8006b7c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2201      	movs	r2, #1
 8006b62:	2100      	movs	r1, #0
 8006b64:	4618      	mov	r0, r3
 8006b66:	f001 f841 	bl	8007bec <TIM_CCxChannelCmd>
      break;
 8006b6a:	e016      	b.n	8006b9a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2201      	movs	r2, #1
 8006b72:	2104      	movs	r1, #4
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 f839 	bl	8007bec <TIM_CCxChannelCmd>
      break;
 8006b7a:	e00e      	b.n	8006b9a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2201      	movs	r2, #1
 8006b82:	2100      	movs	r1, #0
 8006b84:	4618      	mov	r0, r3
 8006b86:	f001 f831 	bl	8007bec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	2104      	movs	r1, #4
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 f82a 	bl	8007bec <TIM_CCxChannelCmd>
      break;
 8006b98:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f042 0201 	orr.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d020      	beq.n	8006c18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01b      	beq.n	8006c18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0202 	mvn.w	r2, #2
 8006be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fb5c 	bl	80072bc <HAL_TIM_IC_CaptureCallback>
 8006c04:	e005      	b.n	8006c12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fb4e 	bl	80072a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fb5f 	bl	80072d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d020      	beq.n	8006c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01b      	beq.n	8006c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f06f 0204 	mvn.w	r2, #4
 8006c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fb36 	bl	80072bc <HAL_TIM_IC_CaptureCallback>
 8006c50:	e005      	b.n	8006c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fb28 	bl	80072a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fb39 	bl	80072d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d020      	beq.n	8006cb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f003 0308 	and.w	r3, r3, #8
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d01b      	beq.n	8006cb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f06f 0208 	mvn.w	r2, #8
 8006c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2204      	movs	r2, #4
 8006c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fb10 	bl	80072bc <HAL_TIM_IC_CaptureCallback>
 8006c9c:	e005      	b.n	8006caa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fb02 	bl	80072a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fb13 	bl	80072d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f003 0310 	and.w	r3, r3, #16
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d020      	beq.n	8006cfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f003 0310 	and.w	r3, r3, #16
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01b      	beq.n	8006cfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f06f 0210 	mvn.w	r2, #16
 8006ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 faea 	bl	80072bc <HAL_TIM_IC_CaptureCallback>
 8006ce8:	e005      	b.n	8006cf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fadc 	bl	80072a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 faed 	bl	80072d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00c      	beq.n	8006d20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f06f 0201 	mvn.w	r2, #1
 8006d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fa fd14 	bl	8001748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00c      	beq.n	8006d4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d007      	beq.n	8006d4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 f815 	bl	8007d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00c      	beq.n	8006d72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d007      	beq.n	8006d72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 f80d 	bl	8007d8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00c      	beq.n	8006d96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d007      	beq.n	8006d96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 faa7 	bl	80072e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f003 0320 	and.w	r3, r3, #32
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00c      	beq.n	8006dba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d007      	beq.n	8006dba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f06f 0220 	mvn.w	r2, #32
 8006db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 ffd5 	bl	8007d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00c      	beq.n	8006dde <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d007      	beq.n	8006dde <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 ffe1 	bl	8007da0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00c      	beq.n	8006e02 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d007      	beq.n	8006e02 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 ffd9 	bl	8007db4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00c      	beq.n	8006e26 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d007      	beq.n	8006e26 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 ffd1 	bl	8007dc8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00c      	beq.n	8006e4a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d007      	beq.n	8006e4a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 ffc9 	bl	8007ddc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d101      	bne.n	8006e72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e6e:	2302      	movs	r3, #2
 8006e70:	e0ff      	b.n	8007072 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b14      	cmp	r3, #20
 8006e7e:	f200 80f0 	bhi.w	8007062 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e82:	a201      	add	r2, pc, #4	@ (adr r2, 8006e88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006edd 	.word	0x08006edd
 8006e8c:	08007063 	.word	0x08007063
 8006e90:	08007063 	.word	0x08007063
 8006e94:	08007063 	.word	0x08007063
 8006e98:	08006f1d 	.word	0x08006f1d
 8006e9c:	08007063 	.word	0x08007063
 8006ea0:	08007063 	.word	0x08007063
 8006ea4:	08007063 	.word	0x08007063
 8006ea8:	08006f5f 	.word	0x08006f5f
 8006eac:	08007063 	.word	0x08007063
 8006eb0:	08007063 	.word	0x08007063
 8006eb4:	08007063 	.word	0x08007063
 8006eb8:	08006f9f 	.word	0x08006f9f
 8006ebc:	08007063 	.word	0x08007063
 8006ec0:	08007063 	.word	0x08007063
 8006ec4:	08007063 	.word	0x08007063
 8006ec8:	08006fe1 	.word	0x08006fe1
 8006ecc:	08007063 	.word	0x08007063
 8006ed0:	08007063 	.word	0x08007063
 8006ed4:	08007063 	.word	0x08007063
 8006ed8:	08007021 	.word	0x08007021
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68b9      	ldr	r1, [r7, #8]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 fabc 	bl	8007460 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699a      	ldr	r2, [r3, #24]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0208 	orr.w	r2, r2, #8
 8006ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699a      	ldr	r2, [r3, #24]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0204 	bic.w	r2, r2, #4
 8006f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6999      	ldr	r1, [r3, #24]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	691a      	ldr	r2, [r3, #16]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	619a      	str	r2, [r3, #24]
      break;
 8006f1a:	e0a5      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fb36 	bl	8007594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699a      	ldr	r2, [r3, #24]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6999      	ldr	r1, [r3, #24]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	021a      	lsls	r2, r3, #8
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	619a      	str	r2, [r3, #24]
      break;
 8006f5c:	e084      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68b9      	ldr	r1, [r7, #8]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 fba9 	bl	80076bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69da      	ldr	r2, [r3, #28]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f042 0208 	orr.w	r2, r2, #8
 8006f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69da      	ldr	r2, [r3, #28]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0204 	bic.w	r2, r2, #4
 8006f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69d9      	ldr	r1, [r3, #28]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	61da      	str	r2, [r3, #28]
      break;
 8006f9c:	e064      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 fc1b 	bl	80077e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69da      	ldr	r2, [r3, #28]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69da      	ldr	r2, [r3, #28]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69d9      	ldr	r1, [r3, #28]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	021a      	lsls	r2, r3, #8
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	61da      	str	r2, [r3, #28]
      break;
 8006fde:	e043      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 fc8e 	bl	8007908 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0208 	orr.w	r2, r2, #8
 8006ffa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0204 	bic.w	r2, r2, #4
 800700a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	691a      	ldr	r2, [r3, #16]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800701e:	e023      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68b9      	ldr	r1, [r7, #8]
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fcd8 	bl	80079dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800703a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800704a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	021a      	lsls	r2, r3, #8
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007060:	e002      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	75fb      	strb	r3, [r7, #23]
      break;
 8007066:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007070:	7dfb      	ldrb	r3, [r7, #23]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop

0800707c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007090:	2b01      	cmp	r3, #1
 8007092:	d101      	bne.n	8007098 <HAL_TIM_ConfigClockSource+0x1c>
 8007094:	2302      	movs	r3, #2
 8007096:	e0f6      	b.n	8007286 <HAL_TIM_ConfigClockSource+0x20a>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80070b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80070ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a6f      	ldr	r2, [pc, #444]	@ (8007290 <HAL_TIM_ConfigClockSource+0x214>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	f000 80c1 	beq.w	800725a <HAL_TIM_ConfigClockSource+0x1de>
 80070d8:	4a6d      	ldr	r2, [pc, #436]	@ (8007290 <HAL_TIM_ConfigClockSource+0x214>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	f200 80c6 	bhi.w	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 80070e0:	4a6c      	ldr	r2, [pc, #432]	@ (8007294 <HAL_TIM_ConfigClockSource+0x218>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	f000 80b9 	beq.w	800725a <HAL_TIM_ConfigClockSource+0x1de>
 80070e8:	4a6a      	ldr	r2, [pc, #424]	@ (8007294 <HAL_TIM_ConfigClockSource+0x218>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	f200 80be 	bhi.w	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 80070f0:	4a69      	ldr	r2, [pc, #420]	@ (8007298 <HAL_TIM_ConfigClockSource+0x21c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	f000 80b1 	beq.w	800725a <HAL_TIM_ConfigClockSource+0x1de>
 80070f8:	4a67      	ldr	r2, [pc, #412]	@ (8007298 <HAL_TIM_ConfigClockSource+0x21c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	f200 80b6 	bhi.w	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 8007100:	4a66      	ldr	r2, [pc, #408]	@ (800729c <HAL_TIM_ConfigClockSource+0x220>)
 8007102:	4293      	cmp	r3, r2
 8007104:	f000 80a9 	beq.w	800725a <HAL_TIM_ConfigClockSource+0x1de>
 8007108:	4a64      	ldr	r2, [pc, #400]	@ (800729c <HAL_TIM_ConfigClockSource+0x220>)
 800710a:	4293      	cmp	r3, r2
 800710c:	f200 80ae 	bhi.w	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 8007110:	4a63      	ldr	r2, [pc, #396]	@ (80072a0 <HAL_TIM_ConfigClockSource+0x224>)
 8007112:	4293      	cmp	r3, r2
 8007114:	f000 80a1 	beq.w	800725a <HAL_TIM_ConfigClockSource+0x1de>
 8007118:	4a61      	ldr	r2, [pc, #388]	@ (80072a0 <HAL_TIM_ConfigClockSource+0x224>)
 800711a:	4293      	cmp	r3, r2
 800711c:	f200 80a6 	bhi.w	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 8007120:	4a60      	ldr	r2, [pc, #384]	@ (80072a4 <HAL_TIM_ConfigClockSource+0x228>)
 8007122:	4293      	cmp	r3, r2
 8007124:	f000 8099 	beq.w	800725a <HAL_TIM_ConfigClockSource+0x1de>
 8007128:	4a5e      	ldr	r2, [pc, #376]	@ (80072a4 <HAL_TIM_ConfigClockSource+0x228>)
 800712a:	4293      	cmp	r3, r2
 800712c:	f200 809e 	bhi.w	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 8007130:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007134:	f000 8091 	beq.w	800725a <HAL_TIM_ConfigClockSource+0x1de>
 8007138:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800713c:	f200 8096 	bhi.w	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 8007140:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007144:	f000 8089 	beq.w	800725a <HAL_TIM_ConfigClockSource+0x1de>
 8007148:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800714c:	f200 808e 	bhi.w	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 8007150:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007154:	d03e      	beq.n	80071d4 <HAL_TIM_ConfigClockSource+0x158>
 8007156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800715a:	f200 8087 	bhi.w	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 800715e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007162:	f000 8086 	beq.w	8007272 <HAL_TIM_ConfigClockSource+0x1f6>
 8007166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800716a:	d87f      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 800716c:	2b70      	cmp	r3, #112	@ 0x70
 800716e:	d01a      	beq.n	80071a6 <HAL_TIM_ConfigClockSource+0x12a>
 8007170:	2b70      	cmp	r3, #112	@ 0x70
 8007172:	d87b      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 8007174:	2b60      	cmp	r3, #96	@ 0x60
 8007176:	d050      	beq.n	800721a <HAL_TIM_ConfigClockSource+0x19e>
 8007178:	2b60      	cmp	r3, #96	@ 0x60
 800717a:	d877      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 800717c:	2b50      	cmp	r3, #80	@ 0x50
 800717e:	d03c      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x17e>
 8007180:	2b50      	cmp	r3, #80	@ 0x50
 8007182:	d873      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 8007184:	2b40      	cmp	r3, #64	@ 0x40
 8007186:	d058      	beq.n	800723a <HAL_TIM_ConfigClockSource+0x1be>
 8007188:	2b40      	cmp	r3, #64	@ 0x40
 800718a:	d86f      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 800718c:	2b30      	cmp	r3, #48	@ 0x30
 800718e:	d064      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x1de>
 8007190:	2b30      	cmp	r3, #48	@ 0x30
 8007192:	d86b      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 8007194:	2b20      	cmp	r3, #32
 8007196:	d060      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x1de>
 8007198:	2b20      	cmp	r3, #32
 800719a:	d867      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x1f0>
 800719c:	2b00      	cmp	r3, #0
 800719e:	d05c      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x1de>
 80071a0:	2b10      	cmp	r3, #16
 80071a2:	d05a      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x1de>
 80071a4:	e062      	b.n	800726c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071b6:	f000 fcf9 	bl	8007bac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80071c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	609a      	str	r2, [r3, #8]
      break;
 80071d2:	e04f      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071e4:	f000 fce2 	bl	8007bac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071f6:	609a      	str	r2, [r3, #8]
      break;
 80071f8:	e03c      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007206:	461a      	mov	r2, r3
 8007208:	f000 fc54 	bl	8007ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2150      	movs	r1, #80	@ 0x50
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fcad 	bl	8007b72 <TIM_ITRx_SetConfig>
      break;
 8007218:	e02c      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007226:	461a      	mov	r2, r3
 8007228:	f000 fc73 	bl	8007b12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2160      	movs	r1, #96	@ 0x60
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fc9d 	bl	8007b72 <TIM_ITRx_SetConfig>
      break;
 8007238:	e01c      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007246:	461a      	mov	r2, r3
 8007248:	f000 fc34 	bl	8007ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2140      	movs	r1, #64	@ 0x40
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fc8d 	bl	8007b72 <TIM_ITRx_SetConfig>
      break;
 8007258:	e00c      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f000 fc84 	bl	8007b72 <TIM_ITRx_SetConfig>
      break;
 800726a:	e003      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	73fb      	strb	r3, [r7, #15]
      break;
 8007270:	e000      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	00100070 	.word	0x00100070
 8007294:	00100060 	.word	0x00100060
 8007298:	00100050 	.word	0x00100050
 800729c:	00100040 	.word	0x00100040
 80072a0:	00100030 	.word	0x00100030
 80072a4:	00100020 	.word	0x00100020

080072a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a4c      	ldr	r2, [pc, #304]	@ (800743c <TIM_Base_SetConfig+0x144>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d017      	beq.n	8007340 <TIM_Base_SetConfig+0x48>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007316:	d013      	beq.n	8007340 <TIM_Base_SetConfig+0x48>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a49      	ldr	r2, [pc, #292]	@ (8007440 <TIM_Base_SetConfig+0x148>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00f      	beq.n	8007340 <TIM_Base_SetConfig+0x48>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a48      	ldr	r2, [pc, #288]	@ (8007444 <TIM_Base_SetConfig+0x14c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00b      	beq.n	8007340 <TIM_Base_SetConfig+0x48>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a47      	ldr	r2, [pc, #284]	@ (8007448 <TIM_Base_SetConfig+0x150>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d007      	beq.n	8007340 <TIM_Base_SetConfig+0x48>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a46      	ldr	r2, [pc, #280]	@ (800744c <TIM_Base_SetConfig+0x154>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d003      	beq.n	8007340 <TIM_Base_SetConfig+0x48>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a45      	ldr	r2, [pc, #276]	@ (8007450 <TIM_Base_SetConfig+0x158>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d108      	bne.n	8007352 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a39      	ldr	r2, [pc, #228]	@ (800743c <TIM_Base_SetConfig+0x144>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d023      	beq.n	80073a2 <TIM_Base_SetConfig+0xaa>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007360:	d01f      	beq.n	80073a2 <TIM_Base_SetConfig+0xaa>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a36      	ldr	r2, [pc, #216]	@ (8007440 <TIM_Base_SetConfig+0x148>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d01b      	beq.n	80073a2 <TIM_Base_SetConfig+0xaa>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a35      	ldr	r2, [pc, #212]	@ (8007444 <TIM_Base_SetConfig+0x14c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d017      	beq.n	80073a2 <TIM_Base_SetConfig+0xaa>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a34      	ldr	r2, [pc, #208]	@ (8007448 <TIM_Base_SetConfig+0x150>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d013      	beq.n	80073a2 <TIM_Base_SetConfig+0xaa>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a33      	ldr	r2, [pc, #204]	@ (800744c <TIM_Base_SetConfig+0x154>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00f      	beq.n	80073a2 <TIM_Base_SetConfig+0xaa>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a33      	ldr	r2, [pc, #204]	@ (8007454 <TIM_Base_SetConfig+0x15c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00b      	beq.n	80073a2 <TIM_Base_SetConfig+0xaa>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a32      	ldr	r2, [pc, #200]	@ (8007458 <TIM_Base_SetConfig+0x160>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d007      	beq.n	80073a2 <TIM_Base_SetConfig+0xaa>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a31      	ldr	r2, [pc, #196]	@ (800745c <TIM_Base_SetConfig+0x164>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d003      	beq.n	80073a2 <TIM_Base_SetConfig+0xaa>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a2c      	ldr	r2, [pc, #176]	@ (8007450 <TIM_Base_SetConfig+0x158>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d108      	bne.n	80073b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	4313      	orrs	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a18      	ldr	r2, [pc, #96]	@ (800743c <TIM_Base_SetConfig+0x144>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d013      	beq.n	8007408 <TIM_Base_SetConfig+0x110>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a1a      	ldr	r2, [pc, #104]	@ (800744c <TIM_Base_SetConfig+0x154>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00f      	beq.n	8007408 <TIM_Base_SetConfig+0x110>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007454 <TIM_Base_SetConfig+0x15c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00b      	beq.n	8007408 <TIM_Base_SetConfig+0x110>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a19      	ldr	r2, [pc, #100]	@ (8007458 <TIM_Base_SetConfig+0x160>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d007      	beq.n	8007408 <TIM_Base_SetConfig+0x110>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a18      	ldr	r2, [pc, #96]	@ (800745c <TIM_Base_SetConfig+0x164>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d003      	beq.n	8007408 <TIM_Base_SetConfig+0x110>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a13      	ldr	r2, [pc, #76]	@ (8007450 <TIM_Base_SetConfig+0x158>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d103      	bne.n	8007410 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b01      	cmp	r3, #1
 8007420:	d105      	bne.n	800742e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f023 0201 	bic.w	r2, r3, #1
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	611a      	str	r2, [r3, #16]
  }
}
 800742e:	bf00      	nop
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	40012c00 	.word	0x40012c00
 8007440:	40000400 	.word	0x40000400
 8007444:	40000800 	.word	0x40000800
 8007448:	40000c00 	.word	0x40000c00
 800744c:	40013400 	.word	0x40013400
 8007450:	40015000 	.word	0x40015000
 8007454:	40014000 	.word	0x40014000
 8007458:	40014400 	.word	0x40014400
 800745c:	40014800 	.word	0x40014800

08007460 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	f023 0201 	bic.w	r2, r3, #1
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800748e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0303 	bic.w	r3, r3, #3
 800749a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f023 0302 	bic.w	r3, r3, #2
 80074ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a30      	ldr	r2, [pc, #192]	@ (800757c <TIM_OC1_SetConfig+0x11c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d013      	beq.n	80074e8 <TIM_OC1_SetConfig+0x88>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a2f      	ldr	r2, [pc, #188]	@ (8007580 <TIM_OC1_SetConfig+0x120>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d00f      	beq.n	80074e8 <TIM_OC1_SetConfig+0x88>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a2e      	ldr	r2, [pc, #184]	@ (8007584 <TIM_OC1_SetConfig+0x124>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d00b      	beq.n	80074e8 <TIM_OC1_SetConfig+0x88>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a2d      	ldr	r2, [pc, #180]	@ (8007588 <TIM_OC1_SetConfig+0x128>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d007      	beq.n	80074e8 <TIM_OC1_SetConfig+0x88>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a2c      	ldr	r2, [pc, #176]	@ (800758c <TIM_OC1_SetConfig+0x12c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d003      	beq.n	80074e8 <TIM_OC1_SetConfig+0x88>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a2b      	ldr	r2, [pc, #172]	@ (8007590 <TIM_OC1_SetConfig+0x130>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d10c      	bne.n	8007502 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f023 0308 	bic.w	r3, r3, #8
 80074ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f023 0304 	bic.w	r3, r3, #4
 8007500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a1d      	ldr	r2, [pc, #116]	@ (800757c <TIM_OC1_SetConfig+0x11c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d013      	beq.n	8007532 <TIM_OC1_SetConfig+0xd2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a1c      	ldr	r2, [pc, #112]	@ (8007580 <TIM_OC1_SetConfig+0x120>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00f      	beq.n	8007532 <TIM_OC1_SetConfig+0xd2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a1b      	ldr	r2, [pc, #108]	@ (8007584 <TIM_OC1_SetConfig+0x124>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d00b      	beq.n	8007532 <TIM_OC1_SetConfig+0xd2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a1a      	ldr	r2, [pc, #104]	@ (8007588 <TIM_OC1_SetConfig+0x128>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d007      	beq.n	8007532 <TIM_OC1_SetConfig+0xd2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a19      	ldr	r2, [pc, #100]	@ (800758c <TIM_OC1_SetConfig+0x12c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d003      	beq.n	8007532 <TIM_OC1_SetConfig+0xd2>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a18      	ldr	r2, [pc, #96]	@ (8007590 <TIM_OC1_SetConfig+0x130>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d111      	bne.n	8007556 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	4313      	orrs	r3, r2
 800754a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	621a      	str	r2, [r3, #32]
}
 8007570:	bf00      	nop
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	40012c00 	.word	0x40012c00
 8007580:	40013400 	.word	0x40013400
 8007584:	40014000 	.word	0x40014000
 8007588:	40014400 	.word	0x40014400
 800758c:	40014800 	.word	0x40014800
 8007590:	40015000 	.word	0x40015000

08007594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	f023 0210 	bic.w	r2, r3, #16
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	4313      	orrs	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f023 0320 	bic.w	r3, r3, #32
 80075e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	011b      	lsls	r3, r3, #4
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a2c      	ldr	r2, [pc, #176]	@ (80076a4 <TIM_OC2_SetConfig+0x110>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d007      	beq.n	8007608 <TIM_OC2_SetConfig+0x74>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a2b      	ldr	r2, [pc, #172]	@ (80076a8 <TIM_OC2_SetConfig+0x114>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d003      	beq.n	8007608 <TIM_OC2_SetConfig+0x74>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a2a      	ldr	r2, [pc, #168]	@ (80076ac <TIM_OC2_SetConfig+0x118>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d10d      	bne.n	8007624 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800760e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007622:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a1f      	ldr	r2, [pc, #124]	@ (80076a4 <TIM_OC2_SetConfig+0x110>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d013      	beq.n	8007654 <TIM_OC2_SetConfig+0xc0>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a1e      	ldr	r2, [pc, #120]	@ (80076a8 <TIM_OC2_SetConfig+0x114>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d00f      	beq.n	8007654 <TIM_OC2_SetConfig+0xc0>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a1e      	ldr	r2, [pc, #120]	@ (80076b0 <TIM_OC2_SetConfig+0x11c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00b      	beq.n	8007654 <TIM_OC2_SetConfig+0xc0>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a1d      	ldr	r2, [pc, #116]	@ (80076b4 <TIM_OC2_SetConfig+0x120>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d007      	beq.n	8007654 <TIM_OC2_SetConfig+0xc0>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a1c      	ldr	r2, [pc, #112]	@ (80076b8 <TIM_OC2_SetConfig+0x124>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d003      	beq.n	8007654 <TIM_OC2_SetConfig+0xc0>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a17      	ldr	r2, [pc, #92]	@ (80076ac <TIM_OC2_SetConfig+0x118>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d113      	bne.n	800767c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800765a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	4313      	orrs	r3, r2
 800766e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	4313      	orrs	r3, r2
 800767a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	621a      	str	r2, [r3, #32]
}
 8007696:	bf00      	nop
 8007698:	371c      	adds	r7, #28
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40012c00 	.word	0x40012c00
 80076a8:	40013400 	.word	0x40013400
 80076ac:	40015000 	.word	0x40015000
 80076b0:	40014000 	.word	0x40014000
 80076b4:	40014400 	.word	0x40014400
 80076b8:	40014800 	.word	0x40014800

080076bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0303 	bic.w	r3, r3, #3
 80076f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	021b      	lsls	r3, r3, #8
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	4313      	orrs	r3, r2
 8007714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a2b      	ldr	r2, [pc, #172]	@ (80077c8 <TIM_OC3_SetConfig+0x10c>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d007      	beq.n	800772e <TIM_OC3_SetConfig+0x72>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a2a      	ldr	r2, [pc, #168]	@ (80077cc <TIM_OC3_SetConfig+0x110>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d003      	beq.n	800772e <TIM_OC3_SetConfig+0x72>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a29      	ldr	r2, [pc, #164]	@ (80077d0 <TIM_OC3_SetConfig+0x114>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d10d      	bne.n	800774a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	021b      	lsls	r3, r3, #8
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	4313      	orrs	r3, r2
 8007740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a1e      	ldr	r2, [pc, #120]	@ (80077c8 <TIM_OC3_SetConfig+0x10c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d013      	beq.n	800777a <TIM_OC3_SetConfig+0xbe>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a1d      	ldr	r2, [pc, #116]	@ (80077cc <TIM_OC3_SetConfig+0x110>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00f      	beq.n	800777a <TIM_OC3_SetConfig+0xbe>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a1d      	ldr	r2, [pc, #116]	@ (80077d4 <TIM_OC3_SetConfig+0x118>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00b      	beq.n	800777a <TIM_OC3_SetConfig+0xbe>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a1c      	ldr	r2, [pc, #112]	@ (80077d8 <TIM_OC3_SetConfig+0x11c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d007      	beq.n	800777a <TIM_OC3_SetConfig+0xbe>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a1b      	ldr	r2, [pc, #108]	@ (80077dc <TIM_OC3_SetConfig+0x120>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d003      	beq.n	800777a <TIM_OC3_SetConfig+0xbe>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a16      	ldr	r2, [pc, #88]	@ (80077d0 <TIM_OC3_SetConfig+0x114>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d113      	bne.n	80077a2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	011b      	lsls	r3, r3, #4
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	4313      	orrs	r3, r2
 8007794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	621a      	str	r2, [r3, #32]
}
 80077bc:	bf00      	nop
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	40012c00 	.word	0x40012c00
 80077cc:	40013400 	.word	0x40013400
 80077d0:	40015000 	.word	0x40015000
 80077d4:	40014000 	.word	0x40014000
 80077d8:	40014400 	.word	0x40014400
 80077dc:	40014800 	.word	0x40014800

080077e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a1b      	ldr	r3, [r3, #32]
 80077f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800780e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800781a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	021b      	lsls	r3, r3, #8
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	4313      	orrs	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800782e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	031b      	lsls	r3, r3, #12
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	4313      	orrs	r3, r2
 800783a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a2c      	ldr	r2, [pc, #176]	@ (80078f0 <TIM_OC4_SetConfig+0x110>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d007      	beq.n	8007854 <TIM_OC4_SetConfig+0x74>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a2b      	ldr	r2, [pc, #172]	@ (80078f4 <TIM_OC4_SetConfig+0x114>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <TIM_OC4_SetConfig+0x74>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a2a      	ldr	r2, [pc, #168]	@ (80078f8 <TIM_OC4_SetConfig+0x118>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d10d      	bne.n	8007870 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800785a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	031b      	lsls	r3, r3, #12
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800786e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a1f      	ldr	r2, [pc, #124]	@ (80078f0 <TIM_OC4_SetConfig+0x110>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d013      	beq.n	80078a0 <TIM_OC4_SetConfig+0xc0>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a1e      	ldr	r2, [pc, #120]	@ (80078f4 <TIM_OC4_SetConfig+0x114>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00f      	beq.n	80078a0 <TIM_OC4_SetConfig+0xc0>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a1e      	ldr	r2, [pc, #120]	@ (80078fc <TIM_OC4_SetConfig+0x11c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d00b      	beq.n	80078a0 <TIM_OC4_SetConfig+0xc0>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a1d      	ldr	r2, [pc, #116]	@ (8007900 <TIM_OC4_SetConfig+0x120>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d007      	beq.n	80078a0 <TIM_OC4_SetConfig+0xc0>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a1c      	ldr	r2, [pc, #112]	@ (8007904 <TIM_OC4_SetConfig+0x124>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d003      	beq.n	80078a0 <TIM_OC4_SetConfig+0xc0>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a17      	ldr	r2, [pc, #92]	@ (80078f8 <TIM_OC4_SetConfig+0x118>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d113      	bne.n	80078c8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80078ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	019b      	lsls	r3, r3, #6
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	019b      	lsls	r3, r3, #6
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	621a      	str	r2, [r3, #32]
}
 80078e2:	bf00      	nop
 80078e4:	371c      	adds	r7, #28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	40012c00 	.word	0x40012c00
 80078f4:	40013400 	.word	0x40013400
 80078f8:	40015000 	.word	0x40015000
 80078fc:	40014000 	.word	0x40014000
 8007900:	40014400 	.word	0x40014400
 8007904:	40014800 	.word	0x40014800

08007908 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800792e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800793a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	4313      	orrs	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800794c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	041b      	lsls	r3, r3, #16
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	4313      	orrs	r3, r2
 8007958:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a19      	ldr	r2, [pc, #100]	@ (80079c4 <TIM_OC5_SetConfig+0xbc>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d013      	beq.n	800798a <TIM_OC5_SetConfig+0x82>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a18      	ldr	r2, [pc, #96]	@ (80079c8 <TIM_OC5_SetConfig+0xc0>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d00f      	beq.n	800798a <TIM_OC5_SetConfig+0x82>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a17      	ldr	r2, [pc, #92]	@ (80079cc <TIM_OC5_SetConfig+0xc4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00b      	beq.n	800798a <TIM_OC5_SetConfig+0x82>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a16      	ldr	r2, [pc, #88]	@ (80079d0 <TIM_OC5_SetConfig+0xc8>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d007      	beq.n	800798a <TIM_OC5_SetConfig+0x82>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a15      	ldr	r2, [pc, #84]	@ (80079d4 <TIM_OC5_SetConfig+0xcc>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d003      	beq.n	800798a <TIM_OC5_SetConfig+0x82>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a14      	ldr	r2, [pc, #80]	@ (80079d8 <TIM_OC5_SetConfig+0xd0>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d109      	bne.n	800799e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007990:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	021b      	lsls	r3, r3, #8
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	4313      	orrs	r3, r2
 800799c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	621a      	str	r2, [r3, #32]
}
 80079b8:	bf00      	nop
 80079ba:	371c      	adds	r7, #28
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	40012c00 	.word	0x40012c00
 80079c8:	40013400 	.word	0x40013400
 80079cc:	40014000 	.word	0x40014000
 80079d0:	40014400 	.word	0x40014400
 80079d4:	40014800 	.word	0x40014800
 80079d8:	40015000 	.word	0x40015000

080079dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079dc:	b480      	push	{r7}
 80079de:	b087      	sub	sp, #28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	021b      	lsls	r3, r3, #8
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	051b      	lsls	r3, r3, #20
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a1a      	ldr	r2, [pc, #104]	@ (8007a9c <TIM_OC6_SetConfig+0xc0>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d013      	beq.n	8007a60 <TIM_OC6_SetConfig+0x84>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a19      	ldr	r2, [pc, #100]	@ (8007aa0 <TIM_OC6_SetConfig+0xc4>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d00f      	beq.n	8007a60 <TIM_OC6_SetConfig+0x84>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a18      	ldr	r2, [pc, #96]	@ (8007aa4 <TIM_OC6_SetConfig+0xc8>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d00b      	beq.n	8007a60 <TIM_OC6_SetConfig+0x84>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a17      	ldr	r2, [pc, #92]	@ (8007aa8 <TIM_OC6_SetConfig+0xcc>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d007      	beq.n	8007a60 <TIM_OC6_SetConfig+0x84>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a16      	ldr	r2, [pc, #88]	@ (8007aac <TIM_OC6_SetConfig+0xd0>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d003      	beq.n	8007a60 <TIM_OC6_SetConfig+0x84>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a15      	ldr	r2, [pc, #84]	@ (8007ab0 <TIM_OC6_SetConfig+0xd4>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d109      	bne.n	8007a74 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	029b      	lsls	r3, r3, #10
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	621a      	str	r2, [r3, #32]
}
 8007a8e:	bf00      	nop
 8007a90:	371c      	adds	r7, #28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	40012c00 	.word	0x40012c00
 8007aa0:	40013400 	.word	0x40013400
 8007aa4:	40014000 	.word	0x40014000
 8007aa8:	40014400 	.word	0x40014400
 8007aac:	40014800 	.word	0x40014800
 8007ab0:	40015000 	.word	0x40015000

08007ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	f023 0201 	bic.w	r2, r3, #1
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	011b      	lsls	r3, r3, #4
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f023 030a 	bic.w	r3, r3, #10
 8007af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	621a      	str	r2, [r3, #32]
}
 8007b06:	bf00      	nop
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b087      	sub	sp, #28
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	60f8      	str	r0, [r7, #12]
 8007b1a:	60b9      	str	r1, [r7, #8]
 8007b1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	f023 0210 	bic.w	r2, r3, #16
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	031b      	lsls	r3, r3, #12
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	011b      	lsls	r3, r3, #4
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	621a      	str	r2, [r3, #32]
}
 8007b66:	bf00      	nop
 8007b68:	371c      	adds	r7, #28
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b085      	sub	sp, #20
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f043 0307 	orr.w	r3, r3, #7
 8007b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	609a      	str	r2, [r3, #8]
}
 8007ba0:	bf00      	nop
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	021a      	lsls	r2, r3, #8
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	609a      	str	r2, [r3, #8]
}
 8007be0:	bf00      	nop
 8007be2:	371c      	adds	r7, #28
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f003 031f 	and.w	r3, r3, #31
 8007bfe:	2201      	movs	r2, #1
 8007c00:	fa02 f303 	lsl.w	r3, r2, r3
 8007c04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6a1a      	ldr	r2, [r3, #32]
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	43db      	mvns	r3, r3
 8007c0e:	401a      	ands	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6a1a      	ldr	r2, [r3, #32]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f003 031f 	and.w	r3, r3, #31
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	fa01 f303 	lsl.w	r3, r1, r3
 8007c24:	431a      	orrs	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	621a      	str	r2, [r3, #32]
}
 8007c2a:	bf00      	nop
 8007c2c:	371c      	adds	r7, #28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
	...

08007c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d101      	bne.n	8007c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	e074      	b.n	8007d3a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a34      	ldr	r2, [pc, #208]	@ (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d009      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a33      	ldr	r2, [pc, #204]	@ (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d004      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a31      	ldr	r2, [pc, #196]	@ (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d108      	bne.n	8007ca0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007caa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a21      	ldr	r2, [pc, #132]	@ (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d022      	beq.n	8007d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cd0:	d01d      	beq.n	8007d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d018      	beq.n	8007d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8007d58 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d013      	beq.n	8007d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a1c      	ldr	r2, [pc, #112]	@ (8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d00e      	beq.n	8007d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a15      	ldr	r2, [pc, #84]	@ (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d009      	beq.n	8007d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a18      	ldr	r2, [pc, #96]	@ (8007d60 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d004      	beq.n	8007d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a11      	ldr	r2, [pc, #68]	@ (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d10c      	bne.n	8007d28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	40012c00 	.word	0x40012c00
 8007d4c:	40013400 	.word	0x40013400
 8007d50:	40015000 	.word	0x40015000
 8007d54:	40000400 	.word	0x40000400
 8007d58:	40000800 	.word	0x40000800
 8007d5c:	40000c00 	.word	0x40000c00
 8007d60:	40014000 	.word	0x40014000

08007d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e042      	b.n	8007e88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d106      	bne.n	8007e1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7fa f9c1 	bl	800219c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2224      	movs	r2, #36	@ 0x24
 8007e1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0201 	bic.w	r2, r2, #1
 8007e30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 ff48 	bl	8008cd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fc49 	bl	80086d8 <UART_SetConfig>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d101      	bne.n	8007e50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e01b      	b.n	8007e88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689a      	ldr	r2, [r3, #8]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0201 	orr.w	r2, r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 ffc7 	bl	8008e14 <UART_CheckIdleState>
 8007e86:	4603      	mov	r3, r0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b091      	sub	sp, #68	@ 0x44
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ea4:	2b20      	cmp	r3, #32
 8007ea6:	d178      	bne.n	8007f9a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <HAL_UART_Transmit_IT+0x24>
 8007eae:	88fb      	ldrh	r3, [r7, #6]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e071      	b.n	8007f9c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	88fa      	ldrh	r2, [r7, #6]
 8007ec2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	88fa      	ldrh	r2, [r7, #6]
 8007eca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2221      	movs	r2, #33	@ 0x21
 8007ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ee8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eec:	d12a      	bne.n	8007f44 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ef6:	d107      	bne.n	8007f08 <HAL_UART_Transmit_IT+0x78>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d103      	bne.n	8007f08 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4a29      	ldr	r2, [pc, #164]	@ (8007fa8 <HAL_UART_Transmit_IT+0x118>)
 8007f04:	679a      	str	r2, [r3, #120]	@ 0x78
 8007f06:	e002      	b.n	8007f0e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4a28      	ldr	r2, [pc, #160]	@ (8007fac <HAL_UART_Transmit_IT+0x11c>)
 8007f0c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3308      	adds	r3, #8
 8007f14:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f18:	e853 3f00 	ldrex	r3, [r3]
 8007f1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f2e:	637a      	str	r2, [r7, #52]	@ 0x34
 8007f30:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e5      	bne.n	8007f0e <HAL_UART_Transmit_IT+0x7e>
 8007f42:	e028      	b.n	8007f96 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f4c:	d107      	bne.n	8007f5e <HAL_UART_Transmit_IT+0xce>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d103      	bne.n	8007f5e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4a15      	ldr	r2, [pc, #84]	@ (8007fb0 <HAL_UART_Transmit_IT+0x120>)
 8007f5a:	679a      	str	r2, [r3, #120]	@ 0x78
 8007f5c:	e002      	b.n	8007f64 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4a14      	ldr	r2, [pc, #80]	@ (8007fb4 <HAL_UART_Transmit_IT+0x124>)
 8007f62:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	613b      	str	r3, [r7, #16]
   return(result);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f82:	623b      	str	r3, [r7, #32]
 8007f84:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f86:	69f9      	ldr	r1, [r7, #28]
 8007f88:	6a3a      	ldr	r2, [r7, #32]
 8007f8a:	e841 2300 	strex	r3, r2, [r1]
 8007f8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1e6      	bne.n	8007f64 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	e000      	b.n	8007f9c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007f9a:	2302      	movs	r3, #2
  }
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3744      	adds	r7, #68	@ 0x44
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	080095db 	.word	0x080095db
 8007fac:	080094fb 	.word	0x080094fb
 8007fb0:	08009439 	.word	0x08009439
 8007fb4:	08009381 	.word	0x08009381

08007fb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08a      	sub	sp, #40	@ 0x28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fcc:	2b20      	cmp	r3, #32
 8007fce:	d137      	bne.n	8008040 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <HAL_UART_Receive_IT+0x24>
 8007fd6:	88fb      	ldrh	r3, [r7, #6]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e030      	b.n	8008042 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a18      	ldr	r2, [pc, #96]	@ (800804c <HAL_UART_Receive_IT+0x94>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d01f      	beq.n	8008030 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d018      	beq.n	8008030 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	613b      	str	r3, [r7, #16]
   return(result);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008012:	627b      	str	r3, [r7, #36]	@ 0x24
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	461a      	mov	r2, r3
 800801a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801c:	623b      	str	r3, [r7, #32]
 800801e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	69f9      	ldr	r1, [r7, #28]
 8008022:	6a3a      	ldr	r2, [r7, #32]
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	61bb      	str	r3, [r7, #24]
   return(result);
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e6      	bne.n	8007ffe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008030:	88fb      	ldrh	r3, [r7, #6]
 8008032:	461a      	mov	r2, r3
 8008034:	68b9      	ldr	r1, [r7, #8]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f001 f804 	bl	8009044 <UART_Start_Receive_IT>
 800803c:	4603      	mov	r3, r0
 800803e:	e000      	b.n	8008042 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008040:	2302      	movs	r3, #2
  }
}
 8008042:	4618      	mov	r0, r3
 8008044:	3728      	adds	r7, #40	@ 0x28
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	40008000 	.word	0x40008000

08008050 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b0ba      	sub	sp, #232	@ 0xe8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008076:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800807a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800807e:	4013      	ands	r3, r2
 8008080:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008088:	2b00      	cmp	r3, #0
 800808a:	d11b      	bne.n	80080c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800808c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	d015      	beq.n	80080c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800809c:	f003 0320 	and.w	r3, r3, #32
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d105      	bne.n	80080b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d009      	beq.n	80080c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 82e3 	beq.w	8008680 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	4798      	blx	r3
      }
      return;
 80080c2:	e2dd      	b.n	8008680 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 8123 	beq.w	8008314 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80080d2:	4b8d      	ldr	r3, [pc, #564]	@ (8008308 <HAL_UART_IRQHandler+0x2b8>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d106      	bne.n	80080e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80080da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80080de:	4b8b      	ldr	r3, [pc, #556]	@ (800830c <HAL_UART_IRQHandler+0x2bc>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 8116 	beq.w	8008314 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d011      	beq.n	8008118 <HAL_UART_IRQHandler+0xc8>
 80080f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2201      	movs	r2, #1
 8008106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800810e:	f043 0201 	orr.w	r2, r3, #1
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d011      	beq.n	8008148 <HAL_UART_IRQHandler+0xf8>
 8008124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2202      	movs	r2, #2
 8008136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800813e:	f043 0204 	orr.w	r2, r3, #4
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d011      	beq.n	8008178 <HAL_UART_IRQHandler+0x128>
 8008154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2204      	movs	r2, #4
 8008166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800816e:	f043 0202 	orr.w	r2, r3, #2
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800817c:	f003 0308 	and.w	r3, r3, #8
 8008180:	2b00      	cmp	r3, #0
 8008182:	d017      	beq.n	80081b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d105      	bne.n	800819c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008190:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008194:	4b5c      	ldr	r3, [pc, #368]	@ (8008308 <HAL_UART_IRQHandler+0x2b8>)
 8008196:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00b      	beq.n	80081b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2208      	movs	r2, #8
 80081a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081aa:	f043 0208 	orr.w	r2, r3, #8
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d012      	beq.n	80081e6 <HAL_UART_IRQHandler+0x196>
 80081c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00c      	beq.n	80081e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081dc:	f043 0220 	orr.w	r2, r3, #32
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 8249 	beq.w	8008684 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081f6:	f003 0320 	and.w	r3, r3, #32
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d013      	beq.n	8008226 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008202:	f003 0320 	and.w	r3, r3, #32
 8008206:	2b00      	cmp	r3, #0
 8008208:	d105      	bne.n	8008216 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800820a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800820e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d007      	beq.n	8008226 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800822c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800823a:	2b40      	cmp	r3, #64	@ 0x40
 800823c:	d005      	beq.n	800824a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800823e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008242:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008246:	2b00      	cmp	r3, #0
 8008248:	d054      	beq.n	80082f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 f81c 	bl	8009288 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800825a:	2b40      	cmp	r3, #64	@ 0x40
 800825c:	d146      	bne.n	80082ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3308      	adds	r3, #8
 8008264:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008268:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800826c:	e853 3f00 	ldrex	r3, [r3]
 8008270:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008274:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008278:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800827c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3308      	adds	r3, #8
 8008286:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800828a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800828e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008292:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008296:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80082a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1d9      	bne.n	800825e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d017      	beq.n	80082e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ba:	4a15      	ldr	r2, [pc, #84]	@ (8008310 <HAL_UART_IRQHandler+0x2c0>)
 80082bc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fc fcdb 	bl	8004c80 <HAL_DMA_Abort_IT>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d019      	beq.n	8008304 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80082de:	4610      	mov	r0, r2
 80082e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e2:	e00f      	b.n	8008304 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f9e1 	bl	80086ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ea:	e00b      	b.n	8008304 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f9dd 	bl	80086ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f2:	e007      	b.n	8008304 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f9d9 	bl	80086ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008302:	e1bf      	b.n	8008684 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008304:	bf00      	nop
    return;
 8008306:	e1bd      	b.n	8008684 <HAL_UART_IRQHandler+0x634>
 8008308:	10000001 	.word	0x10000001
 800830c:	04000120 	.word	0x04000120
 8008310:	08009355 	.word	0x08009355

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008318:	2b01      	cmp	r3, #1
 800831a:	f040 8153 	bne.w	80085c4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800831e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008322:	f003 0310 	and.w	r3, r3, #16
 8008326:	2b00      	cmp	r3, #0
 8008328:	f000 814c 	beq.w	80085c4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800832c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 8145 	beq.w	80085c4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2210      	movs	r2, #16
 8008340:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800834c:	2b40      	cmp	r3, #64	@ 0x40
 800834e:	f040 80bb 	bne.w	80084c8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008360:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 818f 	beq.w	8008688 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008370:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008374:	429a      	cmp	r2, r3
 8008376:	f080 8187 	bcs.w	8008688 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008380:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0320 	and.w	r3, r3, #32
 8008392:	2b00      	cmp	r3, #0
 8008394:	f040 8087 	bne.w	80084a6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80083ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	461a      	mov	r2, r3
 80083be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80083c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80083ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80083da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1da      	bne.n	8008398 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3308      	adds	r3, #8
 80083e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80083f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80083f4:	f023 0301 	bic.w	r3, r3, #1
 80083f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3308      	adds	r3, #8
 8008402:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008406:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800840a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800840e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008418:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e1      	bne.n	80083e2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3308      	adds	r3, #8
 8008424:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008428:	e853 3f00 	ldrex	r3, [r3]
 800842c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800842e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008434:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3308      	adds	r3, #8
 800843e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008442:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008444:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008448:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e3      	bne.n	800841e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008474:	f023 0310 	bic.w	r3, r3, #16
 8008478:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	461a      	mov	r2, r3
 8008482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008486:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008488:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800848c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800848e:	e841 2300 	strex	r3, r2, [r1]
 8008492:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1e4      	bne.n	8008464 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fc fb94 	bl	8004bce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2202      	movs	r2, #2
 80084aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	b29b      	uxth	r3, r3
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f8fd 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084c6:	e0df      	b.n	8008688 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 80d1 	beq.w	800868c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80084ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f000 80cc 	beq.w	800868c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008504:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008508:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008516:	647b      	str	r3, [r7, #68]	@ 0x44
 8008518:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800851c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800851e:	e841 2300 	strex	r3, r2, [r1]
 8008522:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1e4      	bne.n	80084f4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3308      	adds	r3, #8
 8008530:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008534:	e853 3f00 	ldrex	r3, [r3]
 8008538:	623b      	str	r3, [r7, #32]
   return(result);
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008540:	f023 0301 	bic.w	r3, r3, #1
 8008544:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3308      	adds	r3, #8
 800854e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008552:	633a      	str	r2, [r7, #48]	@ 0x30
 8008554:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e1      	bne.n	800852a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2220      	movs	r2, #32
 800856a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	60fb      	str	r3, [r7, #12]
   return(result);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0310 	bic.w	r3, r3, #16
 800858e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800859c:	61fb      	str	r3, [r7, #28]
 800859e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a0:	69b9      	ldr	r1, [r7, #24]
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	e841 2300 	strex	r3, r2, [r1]
 80085a8:	617b      	str	r3, [r7, #20]
   return(result);
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e4      	bne.n	800857a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f87f 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085c2:	e063      	b.n	800868c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00e      	beq.n	80085ee <HAL_UART_IRQHandler+0x59e>
 80085d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d008      	beq.n	80085ee <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80085e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f001 fdb4 	bl	800a154 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085ec:	e051      	b.n	8008692 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d014      	beq.n	8008624 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008602:	2b00      	cmp	r3, #0
 8008604:	d105      	bne.n	8008612 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800860a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d008      	beq.n	8008624 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008616:	2b00      	cmp	r3, #0
 8008618:	d03a      	beq.n	8008690 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	4798      	blx	r3
    }
    return;
 8008622:	e035      	b.n	8008690 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800862c:	2b00      	cmp	r3, #0
 800862e:	d009      	beq.n	8008644 <HAL_UART_IRQHandler+0x5f4>
 8008630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008638:	2b00      	cmp	r3, #0
 800863a:	d003      	beq.n	8008644 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f001 f841 	bl	80096c4 <UART_EndTransmit_IT>
    return;
 8008642:	e026      	b.n	8008692 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008648:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d009      	beq.n	8008664 <HAL_UART_IRQHandler+0x614>
 8008650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008654:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d003      	beq.n	8008664 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 fd8d 	bl	800a17c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008662:	e016      	b.n	8008692 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008668:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d010      	beq.n	8008692 <HAL_UART_IRQHandler+0x642>
 8008670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008674:	2b00      	cmp	r3, #0
 8008676:	da0c      	bge.n	8008692 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 fd75 	bl	800a168 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800867e:	e008      	b.n	8008692 <HAL_UART_IRQHandler+0x642>
      return;
 8008680:	bf00      	nop
 8008682:	e006      	b.n	8008692 <HAL_UART_IRQHandler+0x642>
    return;
 8008684:	bf00      	nop
 8008686:	e004      	b.n	8008692 <HAL_UART_IRQHandler+0x642>
      return;
 8008688:	bf00      	nop
 800868a:	e002      	b.n	8008692 <HAL_UART_IRQHandler+0x642>
      return;
 800868c:	bf00      	nop
 800868e:	e000      	b.n	8008692 <HAL_UART_IRQHandler+0x642>
    return;
 8008690:	bf00      	nop
  }
}
 8008692:	37e8      	adds	r7, #232	@ 0xe8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086dc:	b08c      	sub	sp, #48	@ 0x30
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	431a      	orrs	r2, r3
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	431a      	orrs	r2, r3
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	4baa      	ldr	r3, [pc, #680]	@ (80089b0 <UART_SetConfig+0x2d8>)
 8008708:	4013      	ands	r3, r2
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	6812      	ldr	r2, [r2, #0]
 800870e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008710:	430b      	orrs	r3, r1
 8008712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	430a      	orrs	r2, r1
 8008728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a9f      	ldr	r2, [pc, #636]	@ (80089b4 <UART_SetConfig+0x2dc>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d004      	beq.n	8008744 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008740:	4313      	orrs	r3, r2
 8008742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800874e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	6812      	ldr	r2, [r2, #0]
 8008756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008758:	430b      	orrs	r3, r1
 800875a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008762:	f023 010f 	bic.w	r1, r3, #15
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	430a      	orrs	r2, r1
 8008770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a90      	ldr	r2, [pc, #576]	@ (80089b8 <UART_SetConfig+0x2e0>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d125      	bne.n	80087c8 <UART_SetConfig+0xf0>
 800877c:	4b8f      	ldr	r3, [pc, #572]	@ (80089bc <UART_SetConfig+0x2e4>)
 800877e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	2b03      	cmp	r3, #3
 8008788:	d81a      	bhi.n	80087c0 <UART_SetConfig+0xe8>
 800878a:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <UART_SetConfig+0xb8>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	080087a1 	.word	0x080087a1
 8008794:	080087b1 	.word	0x080087b1
 8008798:	080087a9 	.word	0x080087a9
 800879c:	080087b9 	.word	0x080087b9
 80087a0:	2301      	movs	r3, #1
 80087a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087a6:	e116      	b.n	80089d6 <UART_SetConfig+0x2fe>
 80087a8:	2302      	movs	r3, #2
 80087aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ae:	e112      	b.n	80089d6 <UART_SetConfig+0x2fe>
 80087b0:	2304      	movs	r3, #4
 80087b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087b6:	e10e      	b.n	80089d6 <UART_SetConfig+0x2fe>
 80087b8:	2308      	movs	r3, #8
 80087ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087be:	e10a      	b.n	80089d6 <UART_SetConfig+0x2fe>
 80087c0:	2310      	movs	r3, #16
 80087c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087c6:	e106      	b.n	80089d6 <UART_SetConfig+0x2fe>
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a7c      	ldr	r2, [pc, #496]	@ (80089c0 <UART_SetConfig+0x2e8>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d138      	bne.n	8008844 <UART_SetConfig+0x16c>
 80087d2:	4b7a      	ldr	r3, [pc, #488]	@ (80089bc <UART_SetConfig+0x2e4>)
 80087d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d8:	f003 030c 	and.w	r3, r3, #12
 80087dc:	2b0c      	cmp	r3, #12
 80087de:	d82d      	bhi.n	800883c <UART_SetConfig+0x164>
 80087e0:	a201      	add	r2, pc, #4	@ (adr r2, 80087e8 <UART_SetConfig+0x110>)
 80087e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e6:	bf00      	nop
 80087e8:	0800881d 	.word	0x0800881d
 80087ec:	0800883d 	.word	0x0800883d
 80087f0:	0800883d 	.word	0x0800883d
 80087f4:	0800883d 	.word	0x0800883d
 80087f8:	0800882d 	.word	0x0800882d
 80087fc:	0800883d 	.word	0x0800883d
 8008800:	0800883d 	.word	0x0800883d
 8008804:	0800883d 	.word	0x0800883d
 8008808:	08008825 	.word	0x08008825
 800880c:	0800883d 	.word	0x0800883d
 8008810:	0800883d 	.word	0x0800883d
 8008814:	0800883d 	.word	0x0800883d
 8008818:	08008835 	.word	0x08008835
 800881c:	2300      	movs	r3, #0
 800881e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008822:	e0d8      	b.n	80089d6 <UART_SetConfig+0x2fe>
 8008824:	2302      	movs	r3, #2
 8008826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800882a:	e0d4      	b.n	80089d6 <UART_SetConfig+0x2fe>
 800882c:	2304      	movs	r3, #4
 800882e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008832:	e0d0      	b.n	80089d6 <UART_SetConfig+0x2fe>
 8008834:	2308      	movs	r3, #8
 8008836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800883a:	e0cc      	b.n	80089d6 <UART_SetConfig+0x2fe>
 800883c:	2310      	movs	r3, #16
 800883e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008842:	e0c8      	b.n	80089d6 <UART_SetConfig+0x2fe>
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a5e      	ldr	r2, [pc, #376]	@ (80089c4 <UART_SetConfig+0x2ec>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d125      	bne.n	800889a <UART_SetConfig+0x1c2>
 800884e:	4b5b      	ldr	r3, [pc, #364]	@ (80089bc <UART_SetConfig+0x2e4>)
 8008850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008854:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008858:	2b30      	cmp	r3, #48	@ 0x30
 800885a:	d016      	beq.n	800888a <UART_SetConfig+0x1b2>
 800885c:	2b30      	cmp	r3, #48	@ 0x30
 800885e:	d818      	bhi.n	8008892 <UART_SetConfig+0x1ba>
 8008860:	2b20      	cmp	r3, #32
 8008862:	d00a      	beq.n	800887a <UART_SetConfig+0x1a2>
 8008864:	2b20      	cmp	r3, #32
 8008866:	d814      	bhi.n	8008892 <UART_SetConfig+0x1ba>
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <UART_SetConfig+0x19a>
 800886c:	2b10      	cmp	r3, #16
 800886e:	d008      	beq.n	8008882 <UART_SetConfig+0x1aa>
 8008870:	e00f      	b.n	8008892 <UART_SetConfig+0x1ba>
 8008872:	2300      	movs	r3, #0
 8008874:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008878:	e0ad      	b.n	80089d6 <UART_SetConfig+0x2fe>
 800887a:	2302      	movs	r3, #2
 800887c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008880:	e0a9      	b.n	80089d6 <UART_SetConfig+0x2fe>
 8008882:	2304      	movs	r3, #4
 8008884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008888:	e0a5      	b.n	80089d6 <UART_SetConfig+0x2fe>
 800888a:	2308      	movs	r3, #8
 800888c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008890:	e0a1      	b.n	80089d6 <UART_SetConfig+0x2fe>
 8008892:	2310      	movs	r3, #16
 8008894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008898:	e09d      	b.n	80089d6 <UART_SetConfig+0x2fe>
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a4a      	ldr	r2, [pc, #296]	@ (80089c8 <UART_SetConfig+0x2f0>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d125      	bne.n	80088f0 <UART_SetConfig+0x218>
 80088a4:	4b45      	ldr	r3, [pc, #276]	@ (80089bc <UART_SetConfig+0x2e4>)
 80088a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80088ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80088b0:	d016      	beq.n	80088e0 <UART_SetConfig+0x208>
 80088b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80088b4:	d818      	bhi.n	80088e8 <UART_SetConfig+0x210>
 80088b6:	2b80      	cmp	r3, #128	@ 0x80
 80088b8:	d00a      	beq.n	80088d0 <UART_SetConfig+0x1f8>
 80088ba:	2b80      	cmp	r3, #128	@ 0x80
 80088bc:	d814      	bhi.n	80088e8 <UART_SetConfig+0x210>
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <UART_SetConfig+0x1f0>
 80088c2:	2b40      	cmp	r3, #64	@ 0x40
 80088c4:	d008      	beq.n	80088d8 <UART_SetConfig+0x200>
 80088c6:	e00f      	b.n	80088e8 <UART_SetConfig+0x210>
 80088c8:	2300      	movs	r3, #0
 80088ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ce:	e082      	b.n	80089d6 <UART_SetConfig+0x2fe>
 80088d0:	2302      	movs	r3, #2
 80088d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088d6:	e07e      	b.n	80089d6 <UART_SetConfig+0x2fe>
 80088d8:	2304      	movs	r3, #4
 80088da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088de:	e07a      	b.n	80089d6 <UART_SetConfig+0x2fe>
 80088e0:	2308      	movs	r3, #8
 80088e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088e6:	e076      	b.n	80089d6 <UART_SetConfig+0x2fe>
 80088e8:	2310      	movs	r3, #16
 80088ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ee:	e072      	b.n	80089d6 <UART_SetConfig+0x2fe>
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a35      	ldr	r2, [pc, #212]	@ (80089cc <UART_SetConfig+0x2f4>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d12a      	bne.n	8008950 <UART_SetConfig+0x278>
 80088fa:	4b30      	ldr	r3, [pc, #192]	@ (80089bc <UART_SetConfig+0x2e4>)
 80088fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008900:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008908:	d01a      	beq.n	8008940 <UART_SetConfig+0x268>
 800890a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800890e:	d81b      	bhi.n	8008948 <UART_SetConfig+0x270>
 8008910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008914:	d00c      	beq.n	8008930 <UART_SetConfig+0x258>
 8008916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800891a:	d815      	bhi.n	8008948 <UART_SetConfig+0x270>
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <UART_SetConfig+0x250>
 8008920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008924:	d008      	beq.n	8008938 <UART_SetConfig+0x260>
 8008926:	e00f      	b.n	8008948 <UART_SetConfig+0x270>
 8008928:	2300      	movs	r3, #0
 800892a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800892e:	e052      	b.n	80089d6 <UART_SetConfig+0x2fe>
 8008930:	2302      	movs	r3, #2
 8008932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008936:	e04e      	b.n	80089d6 <UART_SetConfig+0x2fe>
 8008938:	2304      	movs	r3, #4
 800893a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800893e:	e04a      	b.n	80089d6 <UART_SetConfig+0x2fe>
 8008940:	2308      	movs	r3, #8
 8008942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008946:	e046      	b.n	80089d6 <UART_SetConfig+0x2fe>
 8008948:	2310      	movs	r3, #16
 800894a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800894e:	e042      	b.n	80089d6 <UART_SetConfig+0x2fe>
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a17      	ldr	r2, [pc, #92]	@ (80089b4 <UART_SetConfig+0x2dc>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d13a      	bne.n	80089d0 <UART_SetConfig+0x2f8>
 800895a:	4b18      	ldr	r3, [pc, #96]	@ (80089bc <UART_SetConfig+0x2e4>)
 800895c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008960:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008964:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008968:	d01a      	beq.n	80089a0 <UART_SetConfig+0x2c8>
 800896a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800896e:	d81b      	bhi.n	80089a8 <UART_SetConfig+0x2d0>
 8008970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008974:	d00c      	beq.n	8008990 <UART_SetConfig+0x2b8>
 8008976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800897a:	d815      	bhi.n	80089a8 <UART_SetConfig+0x2d0>
 800897c:	2b00      	cmp	r3, #0
 800897e:	d003      	beq.n	8008988 <UART_SetConfig+0x2b0>
 8008980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008984:	d008      	beq.n	8008998 <UART_SetConfig+0x2c0>
 8008986:	e00f      	b.n	80089a8 <UART_SetConfig+0x2d0>
 8008988:	2300      	movs	r3, #0
 800898a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800898e:	e022      	b.n	80089d6 <UART_SetConfig+0x2fe>
 8008990:	2302      	movs	r3, #2
 8008992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008996:	e01e      	b.n	80089d6 <UART_SetConfig+0x2fe>
 8008998:	2304      	movs	r3, #4
 800899a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800899e:	e01a      	b.n	80089d6 <UART_SetConfig+0x2fe>
 80089a0:	2308      	movs	r3, #8
 80089a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089a6:	e016      	b.n	80089d6 <UART_SetConfig+0x2fe>
 80089a8:	2310      	movs	r3, #16
 80089aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ae:	e012      	b.n	80089d6 <UART_SetConfig+0x2fe>
 80089b0:	cfff69f3 	.word	0xcfff69f3
 80089b4:	40008000 	.word	0x40008000
 80089b8:	40013800 	.word	0x40013800
 80089bc:	40021000 	.word	0x40021000
 80089c0:	40004400 	.word	0x40004400
 80089c4:	40004800 	.word	0x40004800
 80089c8:	40004c00 	.word	0x40004c00
 80089cc:	40005000 	.word	0x40005000
 80089d0:	2310      	movs	r3, #16
 80089d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4aae      	ldr	r2, [pc, #696]	@ (8008c94 <UART_SetConfig+0x5bc>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	f040 8097 	bne.w	8008b10 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80089e6:	2b08      	cmp	r3, #8
 80089e8:	d823      	bhi.n	8008a32 <UART_SetConfig+0x35a>
 80089ea:	a201      	add	r2, pc, #4	@ (adr r2, 80089f0 <UART_SetConfig+0x318>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a15 	.word	0x08008a15
 80089f4:	08008a33 	.word	0x08008a33
 80089f8:	08008a1d 	.word	0x08008a1d
 80089fc:	08008a33 	.word	0x08008a33
 8008a00:	08008a23 	.word	0x08008a23
 8008a04:	08008a33 	.word	0x08008a33
 8008a08:	08008a33 	.word	0x08008a33
 8008a0c:	08008a33 	.word	0x08008a33
 8008a10:	08008a2b 	.word	0x08008a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a14:	f7fd fa26 	bl	8005e64 <HAL_RCC_GetPCLK1Freq>
 8008a18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a1a:	e010      	b.n	8008a3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a1c:	4b9e      	ldr	r3, [pc, #632]	@ (8008c98 <UART_SetConfig+0x5c0>)
 8008a1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a20:	e00d      	b.n	8008a3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a22:	f7fd f9b1 	bl	8005d88 <HAL_RCC_GetSysClockFreq>
 8008a26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a28:	e009      	b.n	8008a3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a30:	e005      	b.n	8008a3e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 8130 	beq.w	8008ca6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a4a:	4a94      	ldr	r2, [pc, #592]	@ (8008c9c <UART_SetConfig+0x5c4>)
 8008a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a50:	461a      	mov	r2, r3
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	4413      	add	r3, r2
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d305      	bcc.n	8008a76 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d903      	bls.n	8008a7e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a7c:	e113      	b.n	8008ca6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a80:	2200      	movs	r2, #0
 8008a82:	60bb      	str	r3, [r7, #8]
 8008a84:	60fa      	str	r2, [r7, #12]
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a8a:	4a84      	ldr	r2, [pc, #528]	@ (8008c9c <UART_SetConfig+0x5c4>)
 8008a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	2200      	movs	r2, #0
 8008a94:	603b      	str	r3, [r7, #0]
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008aa0:	f7f8 f86e 	bl	8000b80 <__aeabi_uldivmod>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	4619      	mov	r1, r3
 8008aac:	f04f 0200 	mov.w	r2, #0
 8008ab0:	f04f 0300 	mov.w	r3, #0
 8008ab4:	020b      	lsls	r3, r1, #8
 8008ab6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008aba:	0202      	lsls	r2, r0, #8
 8008abc:	6979      	ldr	r1, [r7, #20]
 8008abe:	6849      	ldr	r1, [r1, #4]
 8008ac0:	0849      	lsrs	r1, r1, #1
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	eb12 0804 	adds.w	r8, r2, r4
 8008acc:	eb43 0905 	adc.w	r9, r3, r5
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	469a      	mov	sl, r3
 8008ad8:	4693      	mov	fp, r2
 8008ada:	4652      	mov	r2, sl
 8008adc:	465b      	mov	r3, fp
 8008ade:	4640      	mov	r0, r8
 8008ae0:	4649      	mov	r1, r9
 8008ae2:	f7f8 f84d 	bl	8000b80 <__aeabi_uldivmod>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4613      	mov	r3, r2
 8008aec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008af4:	d308      	bcc.n	8008b08 <UART_SetConfig+0x430>
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008afc:	d204      	bcs.n	8008b08 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6a3a      	ldr	r2, [r7, #32]
 8008b04:	60da      	str	r2, [r3, #12]
 8008b06:	e0ce      	b.n	8008ca6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b0e:	e0ca      	b.n	8008ca6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b18:	d166      	bne.n	8008be8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008b1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b1e:	2b08      	cmp	r3, #8
 8008b20:	d827      	bhi.n	8008b72 <UART_SetConfig+0x49a>
 8008b22:	a201      	add	r2, pc, #4	@ (adr r2, 8008b28 <UART_SetConfig+0x450>)
 8008b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b28:	08008b4d 	.word	0x08008b4d
 8008b2c:	08008b55 	.word	0x08008b55
 8008b30:	08008b5d 	.word	0x08008b5d
 8008b34:	08008b73 	.word	0x08008b73
 8008b38:	08008b63 	.word	0x08008b63
 8008b3c:	08008b73 	.word	0x08008b73
 8008b40:	08008b73 	.word	0x08008b73
 8008b44:	08008b73 	.word	0x08008b73
 8008b48:	08008b6b 	.word	0x08008b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b4c:	f7fd f98a 	bl	8005e64 <HAL_RCC_GetPCLK1Freq>
 8008b50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b52:	e014      	b.n	8008b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b54:	f7fd f99c 	bl	8005e90 <HAL_RCC_GetPCLK2Freq>
 8008b58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b5a:	e010      	b.n	8008b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b5c:	4b4e      	ldr	r3, [pc, #312]	@ (8008c98 <UART_SetConfig+0x5c0>)
 8008b5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b60:	e00d      	b.n	8008b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b62:	f7fd f911 	bl	8005d88 <HAL_RCC_GetSysClockFreq>
 8008b66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b68:	e009      	b.n	8008b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b70:	e005      	b.n	8008b7e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 8090 	beq.w	8008ca6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8a:	4a44      	ldr	r2, [pc, #272]	@ (8008c9c <UART_SetConfig+0x5c4>)
 8008b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b90:	461a      	mov	r2, r3
 8008b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b98:	005a      	lsls	r2, r3, #1
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	085b      	lsrs	r3, r3, #1
 8008ba0:	441a      	add	r2, r3
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008baa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	2b0f      	cmp	r3, #15
 8008bb0:	d916      	bls.n	8008be0 <UART_SetConfig+0x508>
 8008bb2:	6a3b      	ldr	r3, [r7, #32]
 8008bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bb8:	d212      	bcs.n	8008be0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	f023 030f 	bic.w	r3, r3, #15
 8008bc2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	085b      	lsrs	r3, r3, #1
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	f003 0307 	and.w	r3, r3, #7
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	8bfb      	ldrh	r3, [r7, #30]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	8bfa      	ldrh	r2, [r7, #30]
 8008bdc:	60da      	str	r2, [r3, #12]
 8008bde:	e062      	b.n	8008ca6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008be6:	e05e      	b.n	8008ca6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008be8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008bec:	2b08      	cmp	r3, #8
 8008bee:	d828      	bhi.n	8008c42 <UART_SetConfig+0x56a>
 8008bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf8 <UART_SetConfig+0x520>)
 8008bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf6:	bf00      	nop
 8008bf8:	08008c1d 	.word	0x08008c1d
 8008bfc:	08008c25 	.word	0x08008c25
 8008c00:	08008c2d 	.word	0x08008c2d
 8008c04:	08008c43 	.word	0x08008c43
 8008c08:	08008c33 	.word	0x08008c33
 8008c0c:	08008c43 	.word	0x08008c43
 8008c10:	08008c43 	.word	0x08008c43
 8008c14:	08008c43 	.word	0x08008c43
 8008c18:	08008c3b 	.word	0x08008c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c1c:	f7fd f922 	bl	8005e64 <HAL_RCC_GetPCLK1Freq>
 8008c20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c22:	e014      	b.n	8008c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c24:	f7fd f934 	bl	8005e90 <HAL_RCC_GetPCLK2Freq>
 8008c28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c2a:	e010      	b.n	8008c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8008c98 <UART_SetConfig+0x5c0>)
 8008c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c30:	e00d      	b.n	8008c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c32:	f7fd f8a9 	bl	8005d88 <HAL_RCC_GetSysClockFreq>
 8008c36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c38:	e009      	b.n	8008c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c40:	e005      	b.n	8008c4e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c4c:	bf00      	nop
    }

    if (pclk != 0U)
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d028      	beq.n	8008ca6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c58:	4a10      	ldr	r2, [pc, #64]	@ (8008c9c <UART_SetConfig+0x5c4>)
 8008c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c62:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	085b      	lsrs	r3, r3, #1
 8008c6c:	441a      	add	r2, r3
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c78:	6a3b      	ldr	r3, [r7, #32]
 8008c7a:	2b0f      	cmp	r3, #15
 8008c7c:	d910      	bls.n	8008ca0 <UART_SetConfig+0x5c8>
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c84:	d20c      	bcs.n	8008ca0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	60da      	str	r2, [r3, #12]
 8008c90:	e009      	b.n	8008ca6 <UART_SetConfig+0x5ce>
 8008c92:	bf00      	nop
 8008c94:	40008000 	.word	0x40008000
 8008c98:	00f42400 	.word	0x00f42400
 8008c9c:	0800a708 	.word	0x0800a708
      }
      else
      {
        ret = HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008cc2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3730      	adds	r7, #48	@ 0x30
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cdc:	f003 0308 	and.w	r3, r3, #8
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00a      	beq.n	8008cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00a      	beq.n	8008d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d20:	f003 0302 	and.w	r3, r3, #2
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00a      	beq.n	8008d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	430a      	orrs	r2, r1
 8008d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d42:	f003 0304 	and.w	r3, r3, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	430a      	orrs	r2, r1
 8008d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d64:	f003 0310 	and.w	r3, r3, #16
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00a      	beq.n	8008d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00a      	beq.n	8008da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	430a      	orrs	r2, r1
 8008da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d01a      	beq.n	8008de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dce:	d10a      	bne.n	8008de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00a      	beq.n	8008e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	430a      	orrs	r2, r1
 8008e06:	605a      	str	r2, [r3, #4]
  }
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b098      	sub	sp, #96	@ 0x60
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e24:	f7f9 fd5e 	bl	80028e4 <HAL_GetTick>
 8008e28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0308 	and.w	r3, r3, #8
 8008e34:	2b08      	cmp	r3, #8
 8008e36:	d12f      	bne.n	8008e98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e40:	2200      	movs	r2, #0
 8008e42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f88e 	bl	8008f68 <UART_WaitOnFlagUntilTimeout>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d022      	beq.n	8008e98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5a:	e853 3f00 	ldrex	r3, [r3]
 8008e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e66:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e78:	e841 2300 	strex	r3, r2, [r1]
 8008e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1e6      	bne.n	8008e52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2220      	movs	r2, #32
 8008e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e063      	b.n	8008f60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0304 	and.w	r3, r3, #4
 8008ea2:	2b04      	cmp	r3, #4
 8008ea4:	d149      	bne.n	8008f3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ea6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f857 	bl	8008f68 <UART_WaitOnFlagUntilTimeout>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d03c      	beq.n	8008f3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	e853 3f00 	ldrex	r3, [r3]
 8008ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	461a      	mov	r2, r3
 8008edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ede:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ee6:	e841 2300 	strex	r3, r2, [r1]
 8008eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1e6      	bne.n	8008ec0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	e853 3f00 	ldrex	r3, [r3]
 8008f00:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f023 0301 	bic.w	r3, r3, #1
 8008f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3308      	adds	r3, #8
 8008f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f12:	61fa      	str	r2, [r7, #28]
 8008f14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f16:	69b9      	ldr	r1, [r7, #24]
 8008f18:	69fa      	ldr	r2, [r7, #28]
 8008f1a:	e841 2300 	strex	r3, r2, [r1]
 8008f1e:	617b      	str	r3, [r7, #20]
   return(result);
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1e5      	bne.n	8008ef2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e012      	b.n	8008f60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2220      	movs	r2, #32
 8008f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3758      	adds	r7, #88	@ 0x58
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	603b      	str	r3, [r7, #0]
 8008f74:	4613      	mov	r3, r2
 8008f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f78:	e04f      	b.n	800901a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f80:	d04b      	beq.n	800901a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f82:	f7f9 fcaf 	bl	80028e4 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	69ba      	ldr	r2, [r7, #24]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d302      	bcc.n	8008f98 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e04e      	b.n	800903a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0304 	and.w	r3, r3, #4
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d037      	beq.n	800901a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b80      	cmp	r3, #128	@ 0x80
 8008fae:	d034      	beq.n	800901a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b40      	cmp	r3, #64	@ 0x40
 8008fb4:	d031      	beq.n	800901a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	f003 0308 	and.w	r3, r3, #8
 8008fc0:	2b08      	cmp	r3, #8
 8008fc2:	d110      	bne.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2208      	movs	r2, #8
 8008fca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 f95b 	bl	8009288 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2208      	movs	r2, #8
 8008fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e029      	b.n	800903a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ff4:	d111      	bne.n	800901a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 f941 	bl	8009288 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2220      	movs	r2, #32
 800900a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e00f      	b.n	800903a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	69da      	ldr	r2, [r3, #28]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4013      	ands	r3, r2
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	429a      	cmp	r2, r3
 8009028:	bf0c      	ite	eq
 800902a:	2301      	moveq	r3, #1
 800902c:	2300      	movne	r3, #0
 800902e:	b2db      	uxtb	r3, r3
 8009030:	461a      	mov	r2, r3
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	429a      	cmp	r2, r3
 8009036:	d0a0      	beq.n	8008f7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009044:	b480      	push	{r7}
 8009046:	b0a3      	sub	sp, #140	@ 0x8c
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	4613      	mov	r3, r2
 8009050:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	88fa      	ldrh	r2, [r7, #6]
 800905c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	88fa      	ldrh	r2, [r7, #6]
 8009064:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009076:	d10e      	bne.n	8009096 <UART_Start_Receive_IT+0x52>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d105      	bne.n	800908c <UART_Start_Receive_IT+0x48>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009086:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800908a:	e02d      	b.n	80090e8 <UART_Start_Receive_IT+0xa4>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	22ff      	movs	r2, #255	@ 0xff
 8009090:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009094:	e028      	b.n	80090e8 <UART_Start_Receive_IT+0xa4>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10d      	bne.n	80090ba <UART_Start_Receive_IT+0x76>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d104      	bne.n	80090b0 <UART_Start_Receive_IT+0x6c>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	22ff      	movs	r2, #255	@ 0xff
 80090aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80090ae:	e01b      	b.n	80090e8 <UART_Start_Receive_IT+0xa4>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	227f      	movs	r2, #127	@ 0x7f
 80090b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80090b8:	e016      	b.n	80090e8 <UART_Start_Receive_IT+0xa4>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090c2:	d10d      	bne.n	80090e0 <UART_Start_Receive_IT+0x9c>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d104      	bne.n	80090d6 <UART_Start_Receive_IT+0x92>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	227f      	movs	r2, #127	@ 0x7f
 80090d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80090d4:	e008      	b.n	80090e8 <UART_Start_Receive_IT+0xa4>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	223f      	movs	r2, #63	@ 0x3f
 80090da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80090de:	e003      	b.n	80090e8 <UART_Start_Receive_IT+0xa4>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2222      	movs	r2, #34	@ 0x22
 80090f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3308      	adds	r3, #8
 80090fe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009108:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800910a:	f043 0301 	orr.w	r3, r3, #1
 800910e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3308      	adds	r3, #8
 8009118:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800911c:	673a      	str	r2, [r7, #112]	@ 0x70
 800911e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009120:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009122:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009124:	e841 2300 	strex	r3, r2, [r1]
 8009128:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800912a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e3      	bne.n	80090f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009138:	d14f      	bne.n	80091da <UART_Start_Receive_IT+0x196>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009140:	88fa      	ldrh	r2, [r7, #6]
 8009142:	429a      	cmp	r2, r3
 8009144:	d349      	bcc.n	80091da <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800914e:	d107      	bne.n	8009160 <UART_Start_Receive_IT+0x11c>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d103      	bne.n	8009160 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	4a47      	ldr	r2, [pc, #284]	@ (8009278 <UART_Start_Receive_IT+0x234>)
 800915c:	675a      	str	r2, [r3, #116]	@ 0x74
 800915e:	e002      	b.n	8009166 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4a46      	ldr	r2, [pc, #280]	@ (800927c <UART_Start_Receive_IT+0x238>)
 8009164:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d01a      	beq.n	80091a4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009176:	e853 3f00 	ldrex	r3, [r3]
 800917a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800917c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800917e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009182:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009190:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009192:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009194:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009196:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009198:	e841 2300 	strex	r3, r2, [r1]
 800919c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800919e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1e4      	bne.n	800916e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3308      	adds	r3, #8
 80091aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ae:	e853 3f00 	ldrex	r3, [r3]
 80091b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3308      	adds	r3, #8
 80091c2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80091c4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80091c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80091ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091cc:	e841 2300 	strex	r3, r2, [r1]
 80091d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80091d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1e5      	bne.n	80091a4 <UART_Start_Receive_IT+0x160>
 80091d8:	e046      	b.n	8009268 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091e2:	d107      	bne.n	80091f4 <UART_Start_Receive_IT+0x1b0>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d103      	bne.n	80091f4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4a24      	ldr	r2, [pc, #144]	@ (8009280 <UART_Start_Receive_IT+0x23c>)
 80091f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80091f2:	e002      	b.n	80091fa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4a23      	ldr	r2, [pc, #140]	@ (8009284 <UART_Start_Receive_IT+0x240>)
 80091f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d019      	beq.n	8009236 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800920a:	e853 3f00 	ldrex	r3, [r3]
 800920e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009212:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009216:	677b      	str	r3, [r7, #116]	@ 0x74
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	461a      	mov	r2, r3
 800921e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009220:	637b      	str	r3, [r7, #52]	@ 0x34
 8009222:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009226:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800922e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e6      	bne.n	8009202 <UART_Start_Receive_IT+0x1be>
 8009234:	e018      	b.n	8009268 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	e853 3f00 	ldrex	r3, [r3]
 8009242:	613b      	str	r3, [r7, #16]
   return(result);
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f043 0320 	orr.w	r3, r3, #32
 800924a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	461a      	mov	r2, r3
 8009252:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009254:	623b      	str	r3, [r7, #32]
 8009256:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009258:	69f9      	ldr	r1, [r7, #28]
 800925a:	6a3a      	ldr	r2, [r7, #32]
 800925c:	e841 2300 	strex	r3, r2, [r1]
 8009260:	61bb      	str	r3, [r7, #24]
   return(result);
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1e6      	bne.n	8009236 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	378c      	adds	r7, #140	@ 0x8c
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	08009ded 	.word	0x08009ded
 800927c:	08009a8d 	.word	0x08009a8d
 8009280:	080098d5 	.word	0x080098d5
 8009284:	0800971d 	.word	0x0800971d

08009288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b095      	sub	sp, #84	@ 0x54
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800929e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80092b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e6      	bne.n	8009290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3308      	adds	r3, #8
 80092c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092d8:	f023 0301 	bic.w	r3, r3, #1
 80092dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3308      	adds	r3, #8
 80092e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e3      	bne.n	80092c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d118      	bne.n	8009334 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f023 0310 	bic.w	r3, r3, #16
 8009316:	647b      	str	r3, [r7, #68]	@ 0x44
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	461a      	mov	r2, r3
 800931e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009320:	61bb      	str	r3, [r7, #24]
 8009322:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	6979      	ldr	r1, [r7, #20]
 8009326:	69ba      	ldr	r2, [r7, #24]
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	613b      	str	r3, [r7, #16]
   return(result);
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e6      	bne.n	8009302 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2220      	movs	r2, #32
 8009338:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009348:	bf00      	nop
 800934a:	3754      	adds	r7, #84	@ 0x54
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009360:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f7ff f99a 	bl	80086ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009378:	bf00      	nop
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009380:	b480      	push	{r7}
 8009382:	b08f      	sub	sp, #60	@ 0x3c
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800938e:	2b21      	cmp	r3, #33	@ 0x21
 8009390:	d14c      	bne.n	800942c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009398:	b29b      	uxth	r3, r3
 800939a:	2b00      	cmp	r3, #0
 800939c:	d132      	bne.n	8009404 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a4:	6a3b      	ldr	r3, [r7, #32]
 80093a6:	e853 3f00 	ldrex	r3, [r3]
 80093aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	461a      	mov	r2, r3
 80093ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093be:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093c4:	e841 2300 	strex	r3, r2, [r1]
 80093c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1e6      	bne.n	800939e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	e853 3f00 	ldrex	r3, [r3]
 80093dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	461a      	mov	r2, r3
 80093ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ee:	61bb      	str	r3, [r7, #24]
 80093f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f2:	6979      	ldr	r1, [r7, #20]
 80093f4:	69ba      	ldr	r2, [r7, #24]
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	613b      	str	r3, [r7, #16]
   return(result);
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e6      	bne.n	80093d0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009402:	e013      	b.n	800942c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009408:	781a      	ldrb	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009420:	b29b      	uxth	r3, r3
 8009422:	3b01      	subs	r3, #1
 8009424:	b29a      	uxth	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800942c:	bf00      	nop
 800942e:	373c      	adds	r7, #60	@ 0x3c
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009438:	b480      	push	{r7}
 800943a:	b091      	sub	sp, #68	@ 0x44
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009446:	2b21      	cmp	r3, #33	@ 0x21
 8009448:	d151      	bne.n	80094ee <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009450:	b29b      	uxth	r3, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d132      	bne.n	80094bc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945e:	e853 3f00 	ldrex	r3, [r3]
 8009462:	623b      	str	r3, [r7, #32]
   return(result);
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800946a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	461a      	mov	r2, r3
 8009472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009474:	633b      	str	r3, [r7, #48]	@ 0x30
 8009476:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009478:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800947a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800947c:	e841 2300 	strex	r3, r2, [r1]
 8009480:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1e6      	bne.n	8009456 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	60fb      	str	r3, [r7, #12]
   return(result);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800949c:	637b      	str	r3, [r7, #52]	@ 0x34
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094a6:	61fb      	str	r3, [r7, #28]
 80094a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094aa:	69b9      	ldr	r1, [r7, #24]
 80094ac:	69fa      	ldr	r2, [r7, #28]
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	617b      	str	r3, [r7, #20]
   return(result);
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e6      	bne.n	8009488 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80094ba:	e018      	b.n	80094ee <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80094c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094c4:	881b      	ldrh	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094d0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094d6:	1c9a      	adds	r2, r3, #2
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	3b01      	subs	r3, #1
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80094ee:	bf00      	nop
 80094f0:	3744      	adds	r7, #68	@ 0x44
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b091      	sub	sp, #68	@ 0x44
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009508:	2b21      	cmp	r3, #33	@ 0x21
 800950a:	d160      	bne.n	80095ce <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009512:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009514:	e057      	b.n	80095c6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800951c:	b29b      	uxth	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	d133      	bne.n	800958a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3308      	adds	r3, #8
 8009528:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	e853 3f00 	ldrex	r3, [r3]
 8009530:	623b      	str	r3, [r7, #32]
   return(result);
 8009532:	6a3b      	ldr	r3, [r7, #32]
 8009534:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009538:	63bb      	str	r3, [r7, #56]	@ 0x38
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3308      	adds	r3, #8
 8009540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009542:	633a      	str	r2, [r7, #48]	@ 0x30
 8009544:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009546:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1e5      	bne.n	8009522 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	e853 3f00 	ldrex	r3, [r3]
 8009562:	60fb      	str	r3, [r7, #12]
   return(result);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800956a:	637b      	str	r3, [r7, #52]	@ 0x34
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	461a      	mov	r2, r3
 8009572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009574:	61fb      	str	r3, [r7, #28]
 8009576:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	69b9      	ldr	r1, [r7, #24]
 800957a:	69fa      	ldr	r2, [r7, #28]
 800957c:	e841 2300 	strex	r3, r2, [r1]
 8009580:	617b      	str	r3, [r7, #20]
   return(result);
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e6      	bne.n	8009556 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009588:	e021      	b.n	80095ce <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	69db      	ldr	r3, [r3, #28]
 8009590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009594:	2b00      	cmp	r3, #0
 8009596:	d013      	beq.n	80095c0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800959c:	781a      	ldrb	r2, [r3, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	3b01      	subs	r3, #1
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80095c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80095c2:	3b01      	subs	r3, #1
 80095c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80095c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1a4      	bne.n	8009516 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80095cc:	e7ff      	b.n	80095ce <UART_TxISR_8BIT_FIFOEN+0xd4>
 80095ce:	bf00      	nop
 80095d0:	3744      	adds	r7, #68	@ 0x44
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095da:	b480      	push	{r7}
 80095dc:	b091      	sub	sp, #68	@ 0x44
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095e8:	2b21      	cmp	r3, #33	@ 0x21
 80095ea:	d165      	bne.n	80096b8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80095f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80095f4:	e05c      	b.n	80096b0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d133      	bne.n	800966a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3308      	adds	r3, #8
 8009608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	61fb      	str	r3, [r7, #28]
   return(result);
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009618:	637b      	str	r3, [r7, #52]	@ 0x34
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3308      	adds	r3, #8
 8009620:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009622:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009624:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009628:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1e5      	bne.n	8009602 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	e853 3f00 	ldrex	r3, [r3]
 8009642:	60bb      	str	r3, [r7, #8]
   return(result);
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800964a:	633b      	str	r3, [r7, #48]	@ 0x30
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	461a      	mov	r2, r3
 8009652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009654:	61bb      	str	r3, [r7, #24]
 8009656:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	6979      	ldr	r1, [r7, #20]
 800965a:	69ba      	ldr	r2, [r7, #24]
 800965c:	e841 2300 	strex	r3, r2, [r1]
 8009660:	613b      	str	r3, [r7, #16]
   return(result);
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1e6      	bne.n	8009636 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009668:	e026      	b.n	80096b8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69db      	ldr	r3, [r3, #28]
 8009670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009674:	2b00      	cmp	r3, #0
 8009676:	d018      	beq.n	80096aa <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800967c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800967e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009680:	881b      	ldrh	r3, [r3, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800968c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009692:	1c9a      	adds	r2, r3, #2
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800969e:	b29b      	uxth	r3, r3
 80096a0:	3b01      	subs	r3, #1
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80096aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80096ac:	3b01      	subs	r3, #1
 80096ae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80096b0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d19f      	bne.n	80095f6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80096b6:	e7ff      	b.n	80096b8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80096b8:	bf00      	nop
 80096ba:	3744      	adds	r7, #68	@ 0x44
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	e853 3f00 	ldrex	r3, [r3]
 80096d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096e0:	61fb      	str	r3, [r7, #28]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	61bb      	str	r3, [r7, #24]
 80096ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ee:	6979      	ldr	r1, [r7, #20]
 80096f0:	69ba      	ldr	r2, [r7, #24]
 80096f2:	e841 2300 	strex	r3, r2, [r1]
 80096f6:	613b      	str	r3, [r7, #16]
   return(result);
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1e6      	bne.n	80096cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2220      	movs	r2, #32
 8009702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f7fe ffc3 	bl	8008698 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009712:	bf00      	nop
 8009714:	3720      	adds	r7, #32
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
	...

0800971c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b09c      	sub	sp, #112	@ 0x70
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800972a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009734:	2b22      	cmp	r3, #34	@ 0x22
 8009736:	f040 80be 	bne.w	80098b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009740:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009744:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009748:	b2d9      	uxtb	r1, r3
 800974a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800974e:	b2da      	uxtb	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009754:	400a      	ands	r2, r1
 8009756:	b2d2      	uxtb	r2, r2
 8009758:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800975e:	1c5a      	adds	r2, r3, #1
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800976a:	b29b      	uxth	r3, r3
 800976c:	3b01      	subs	r3, #1
 800976e:	b29a      	uxth	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800977c:	b29b      	uxth	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	f040 80a1 	bne.w	80098c6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800978c:	e853 3f00 	ldrex	r3, [r3]
 8009790:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009794:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	461a      	mov	r2, r3
 80097a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80097a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80097a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80097aa:	e841 2300 	strex	r3, r2, [r1]
 80097ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80097b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1e6      	bne.n	8009784 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3308      	adds	r3, #8
 80097bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c0:	e853 3f00 	ldrex	r3, [r3]
 80097c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c8:	f023 0301 	bic.w	r3, r3, #1
 80097cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3308      	adds	r3, #8
 80097d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80097d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80097d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097de:	e841 2300 	strex	r3, r2, [r1]
 80097e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1e5      	bne.n	80097b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2220      	movs	r2, #32
 80097ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a33      	ldr	r2, [pc, #204]	@ (80098d0 <UART_RxISR_8BIT+0x1b4>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d01f      	beq.n	8009848 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009812:	2b00      	cmp	r3, #0
 8009814:	d018      	beq.n	8009848 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981e:	e853 3f00 	ldrex	r3, [r3]
 8009822:	623b      	str	r3, [r7, #32]
   return(result);
 8009824:	6a3b      	ldr	r3, [r7, #32]
 8009826:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800982a:	663b      	str	r3, [r7, #96]	@ 0x60
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	461a      	mov	r2, r3
 8009832:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009834:	633b      	str	r3, [r7, #48]	@ 0x30
 8009836:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009838:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800983a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800983c:	e841 2300 	strex	r3, r2, [r1]
 8009840:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1e6      	bne.n	8009816 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800984c:	2b01      	cmp	r3, #1
 800984e:	d12e      	bne.n	80098ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	e853 3f00 	ldrex	r3, [r3]
 8009862:	60fb      	str	r3, [r7, #12]
   return(result);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f023 0310 	bic.w	r3, r3, #16
 800986a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	461a      	mov	r2, r3
 8009872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009874:	61fb      	str	r3, [r7, #28]
 8009876:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009878:	69b9      	ldr	r1, [r7, #24]
 800987a:	69fa      	ldr	r2, [r7, #28]
 800987c:	e841 2300 	strex	r3, r2, [r1]
 8009880:	617b      	str	r3, [r7, #20]
   return(result);
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1e6      	bne.n	8009856 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	f003 0310 	and.w	r3, r3, #16
 8009892:	2b10      	cmp	r3, #16
 8009894:	d103      	bne.n	800989e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2210      	movs	r2, #16
 800989c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80098a4:	4619      	mov	r1, r3
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7fe ff0a 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098ac:	e00b      	b.n	80098c6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7f8 fb74 	bl	8001f9c <HAL_UART_RxCpltCallback>
}
 80098b4:	e007      	b.n	80098c6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	699a      	ldr	r2, [r3, #24]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f042 0208 	orr.w	r2, r2, #8
 80098c4:	619a      	str	r2, [r3, #24]
}
 80098c6:	bf00      	nop
 80098c8:	3770      	adds	r7, #112	@ 0x70
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	40008000 	.word	0x40008000

080098d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b09c      	sub	sp, #112	@ 0x70
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80098e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098ec:	2b22      	cmp	r3, #34	@ 0x22
 80098ee:	f040 80be 	bne.w	8009a6e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009900:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009902:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009906:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800990a:	4013      	ands	r3, r2
 800990c:	b29a      	uxth	r2, r3
 800990e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009910:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009916:	1c9a      	adds	r2, r3, #2
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009922:	b29b      	uxth	r3, r3
 8009924:	3b01      	subs	r3, #1
 8009926:	b29a      	uxth	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009934:	b29b      	uxth	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	f040 80a1 	bne.w	8009a7e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009944:	e853 3f00 	ldrex	r3, [r3]
 8009948:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800994a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800994c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009950:	667b      	str	r3, [r7, #100]	@ 0x64
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	461a      	mov	r2, r3
 8009958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800995a:	657b      	str	r3, [r7, #84]	@ 0x54
 800995c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009960:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009962:	e841 2300 	strex	r3, r2, [r1]
 8009966:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1e6      	bne.n	800993c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3308      	adds	r3, #8
 8009974:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009978:	e853 3f00 	ldrex	r3, [r3]
 800997c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800997e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009980:	f023 0301 	bic.w	r3, r3, #1
 8009984:	663b      	str	r3, [r7, #96]	@ 0x60
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	3308      	adds	r3, #8
 800998c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800998e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009990:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009992:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009994:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009996:	e841 2300 	strex	r3, r2, [r1]
 800999a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800999c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1e5      	bne.n	800996e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2220      	movs	r2, #32
 80099a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a33      	ldr	r2, [pc, #204]	@ (8009a88 <UART_RxISR_16BIT+0x1b4>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d01f      	beq.n	8009a00 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d018      	beq.n	8009a00 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	e853 3f00 	ldrex	r3, [r3]
 80099da:	61fb      	str	r3, [r7, #28]
   return(result);
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80099e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	461a      	mov	r2, r3
 80099ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099ee:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099f4:	e841 2300 	strex	r3, r2, [r1]
 80099f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1e6      	bne.n	80099ce <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d12e      	bne.n	8009a66 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	e853 3f00 	ldrex	r3, [r3]
 8009a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	f023 0310 	bic.w	r3, r3, #16
 8009a22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a2c:	61bb      	str	r3, [r7, #24]
 8009a2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a30:	6979      	ldr	r1, [r7, #20]
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	e841 2300 	strex	r3, r2, [r1]
 8009a38:	613b      	str	r3, [r7, #16]
   return(result);
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e6      	bne.n	8009a0e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	f003 0310 	and.w	r3, r3, #16
 8009a4a:	2b10      	cmp	r3, #16
 8009a4c:	d103      	bne.n	8009a56 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2210      	movs	r2, #16
 8009a54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7fe fe2e 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a64:	e00b      	b.n	8009a7e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f7f8 fa98 	bl	8001f9c <HAL_UART_RxCpltCallback>
}
 8009a6c:	e007      	b.n	8009a7e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	699a      	ldr	r2, [r3, #24]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f042 0208 	orr.w	r2, r2, #8
 8009a7c:	619a      	str	r2, [r3, #24]
}
 8009a7e:	bf00      	nop
 8009a80:	3770      	adds	r7, #112	@ 0x70
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	40008000 	.word	0x40008000

08009a8c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b0ac      	sub	sp, #176	@ 0xb0
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a9a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	69db      	ldr	r3, [r3, #28]
 8009aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ac2:	2b22      	cmp	r3, #34	@ 0x22
 8009ac4:	f040 8182 	bne.w	8009dcc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ace:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ad2:	e125      	b.n	8009d20 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ada:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009ade:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009ae2:	b2d9      	uxtb	r1, r3
 8009ae4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aee:	400a      	ands	r2, r1
 8009af0:	b2d2      	uxtb	r2, r2
 8009af2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009af8:	1c5a      	adds	r2, r3, #1
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	3b01      	subs	r3, #1
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b1e:	f003 0307 	and.w	r3, r3, #7
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d053      	beq.n	8009bce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d011      	beq.n	8009b56 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009b32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00b      	beq.n	8009b56 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2201      	movs	r2, #1
 8009b44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b4c:	f043 0201 	orr.w	r2, r3, #1
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b5a:	f003 0302 	and.w	r3, r3, #2
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d011      	beq.n	8009b86 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00b      	beq.n	8009b86 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2202      	movs	r2, #2
 8009b74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b7c:	f043 0204 	orr.w	r2, r3, #4
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b8a:	f003 0304 	and.w	r3, r3, #4
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d011      	beq.n	8009bb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b96:	f003 0301 	and.w	r3, r3, #1
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00b      	beq.n	8009bb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2204      	movs	r2, #4
 8009ba4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bac:	f043 0202 	orr.w	r2, r3, #2
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d006      	beq.n	8009bce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7fe fd73 	bl	80086ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f040 80a2 	bne.w	8009d20 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009be4:	e853 3f00 	ldrex	r3, [r3]
 8009be8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009bfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c00:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c02:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009c04:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009c06:	e841 2300 	strex	r3, r2, [r1]
 8009c0a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009c0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1e4      	bne.n	8009bdc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3308      	adds	r3, #8
 8009c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c1c:	e853 3f00 	ldrex	r3, [r3]
 8009c20:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009c22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c28:	f023 0301 	bic.w	r3, r3, #1
 8009c2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3308      	adds	r3, #8
 8009c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009c3a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009c3c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009c40:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009c42:	e841 2300 	strex	r3, r2, [r1]
 8009c46:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009c48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1e1      	bne.n	8009c12 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2220      	movs	r2, #32
 8009c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a5f      	ldr	r2, [pc, #380]	@ (8009de4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d021      	beq.n	8009cb0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d01a      	beq.n	8009cb0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c82:	e853 3f00 	ldrex	r3, [r3]
 8009c86:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	461a      	mov	r2, r3
 8009c98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009c9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c9e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ca2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009ca4:	e841 2300 	strex	r3, r2, [r1]
 8009ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1e4      	bne.n	8009c7a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d130      	bne.n	8009d1a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc6:	e853 3f00 	ldrex	r3, [r3]
 8009cca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cce:	f023 0310 	bic.w	r3, r3, #16
 8009cd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ce0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ce2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ce6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ce8:	e841 2300 	strex	r3, r2, [r1]
 8009cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1e4      	bne.n	8009cbe <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	f003 0310 	and.w	r3, r3, #16
 8009cfe:	2b10      	cmp	r3, #16
 8009d00:	d103      	bne.n	8009d0a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2210      	movs	r2, #16
 8009d08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7fe fcd4 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
 8009d18:	e002      	b.n	8009d20 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7f8 f93e 	bl	8001f9c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d20:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d006      	beq.n	8009d36 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d2c:	f003 0320 	and.w	r3, r3, #32
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f47f aecf 	bne.w	8009ad4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d3c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009d40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d049      	beq.n	8009ddc <UART_RxISR_8BIT_FIFOEN+0x350>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009d4e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d242      	bcs.n	8009ddc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3308      	adds	r3, #8
 8009d5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	e853 3f00 	ldrex	r3, [r3]
 8009d64:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3308      	adds	r3, #8
 8009d76:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d82:	e841 2300 	strex	r3, r2, [r1]
 8009d86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1e3      	bne.n	8009d56 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a15      	ldr	r2, [pc, #84]	@ (8009de8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009d92:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	e853 3f00 	ldrex	r3, [r3]
 8009da0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	f043 0320 	orr.w	r3, r3, #32
 8009da8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	461a      	mov	r2, r3
 8009db2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009db6:	61bb      	str	r3, [r7, #24]
 8009db8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dba:	6979      	ldr	r1, [r7, #20]
 8009dbc:	69ba      	ldr	r2, [r7, #24]
 8009dbe:	e841 2300 	strex	r3, r2, [r1]
 8009dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1e4      	bne.n	8009d94 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009dca:	e007      	b.n	8009ddc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	699a      	ldr	r2, [r3, #24]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f042 0208 	orr.w	r2, r2, #8
 8009dda:	619a      	str	r2, [r3, #24]
}
 8009ddc:	bf00      	nop
 8009dde:	37b0      	adds	r7, #176	@ 0xb0
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	40008000 	.word	0x40008000
 8009de8:	0800971d 	.word	0x0800971d

08009dec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b0ae      	sub	sp, #184	@ 0xb8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009dfa:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	69db      	ldr	r3, [r3, #28]
 8009e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e22:	2b22      	cmp	r3, #34	@ 0x22
 8009e24:	f040 8186 	bne.w	800a134 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009e2e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e32:	e129      	b.n	800a088 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e3a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009e46:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009e4a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009e4e:	4013      	ands	r3, r2
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e5c:	1c9a      	adds	r2, r3, #2
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	69db      	ldr	r3, [r3, #28]
 8009e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009e7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e82:	f003 0307 	and.w	r3, r3, #7
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d053      	beq.n	8009f32 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d011      	beq.n	8009eba <UART_RxISR_16BIT_FIFOEN+0xce>
 8009e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00b      	beq.n	8009eba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009eb0:	f043 0201 	orr.w	r2, r3, #1
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009eba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009ebe:	f003 0302 	and.w	r3, r3, #2
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d011      	beq.n	8009eea <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009ec6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009eca:	f003 0301 	and.w	r3, r3, #1
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00b      	beq.n	8009eea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ee0:	f043 0204 	orr.w	r2, r3, #4
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009eea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009eee:	f003 0304 	and.w	r3, r3, #4
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d011      	beq.n	8009f1a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009ef6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009efa:	f003 0301 	and.w	r3, r3, #1
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00b      	beq.n	8009f1a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2204      	movs	r2, #4
 8009f08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f10:	f043 0202 	orr.w	r2, r3, #2
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d006      	beq.n	8009f32 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7fe fbc1 	bl	80086ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f040 80a4 	bne.w	800a088 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f48:	e853 3f00 	ldrex	r3, [r3]
 8009f4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009f4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f66:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009f6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f6e:	e841 2300 	strex	r3, r2, [r1]
 8009f72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009f74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1e2      	bne.n	8009f40 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3308      	adds	r3, #8
 8009f80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f84:	e853 3f00 	ldrex	r3, [r3]
 8009f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f90:	f023 0301 	bic.w	r3, r3, #1
 8009f94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3308      	adds	r3, #8
 8009f9e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009fa2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009fa8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009fb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1e1      	bne.n	8009f7a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a5f      	ldr	r2, [pc, #380]	@ (800a14c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d021      	beq.n	800a018 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d01a      	beq.n	800a018 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fea:	e853 3f00 	ldrex	r3, [r3]
 8009fee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ff0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ff2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ff6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a004:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a006:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a008:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a00a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a00c:	e841 2300 	strex	r3, r2, [r1]
 800a010:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1e4      	bne.n	8009fe2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d130      	bne.n	800a082 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02e:	e853 3f00 	ldrex	r3, [r3]
 800a032:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a036:	f023 0310 	bic.w	r3, r3, #16
 800a03a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a048:	647b      	str	r3, [r7, #68]	@ 0x44
 800a04a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a04e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a050:	e841 2300 	strex	r3, r2, [r1]
 800a054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e4      	bne.n	800a026 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	69db      	ldr	r3, [r3, #28]
 800a062:	f003 0310 	and.w	r3, r3, #16
 800a066:	2b10      	cmp	r3, #16
 800a068:	d103      	bne.n	800a072 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2210      	movs	r2, #16
 800a070:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a078:	4619      	mov	r1, r3
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7fe fb20 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
 800a080:	e002      	b.n	800a088 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f7f7 ff8a 	bl	8001f9c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a088:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d006      	beq.n	800a09e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800a090:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a094:	f003 0320 	and.w	r3, r3, #32
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f47f aecb 	bne.w	8009e34 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0a4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a0a8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d049      	beq.n	800a144 <UART_RxISR_16BIT_FIFOEN+0x358>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a0b6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d242      	bcs.n	800a144 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	e853 3f00 	ldrex	r3, [r3]
 800a0cc:	623b      	str	r3, [r7, #32]
   return(result);
 800a0ce:	6a3b      	ldr	r3, [r7, #32]
 800a0d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	3308      	adds	r3, #8
 800a0de:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a0e2:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0ea:	e841 2300 	strex	r3, r2, [r1]
 800a0ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1e3      	bne.n	800a0be <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a15      	ldr	r2, [pc, #84]	@ (800a150 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a0fa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	e853 3f00 	ldrex	r3, [r3]
 800a108:	60fb      	str	r3, [r7, #12]
   return(result);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f043 0320 	orr.w	r3, r3, #32
 800a110:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	461a      	mov	r2, r3
 800a11a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a11e:	61fb      	str	r3, [r7, #28]
 800a120:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a122:	69b9      	ldr	r1, [r7, #24]
 800a124:	69fa      	ldr	r2, [r7, #28]
 800a126:	e841 2300 	strex	r3, r2, [r1]
 800a12a:	617b      	str	r3, [r7, #20]
   return(result);
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1e4      	bne.n	800a0fc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a132:	e007      	b.n	800a144 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	699a      	ldr	r2, [r3, #24]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f042 0208 	orr.w	r2, r2, #8
 800a142:	619a      	str	r2, [r3, #24]
}
 800a144:	bf00      	nop
 800a146:	37b8      	adds	r7, #184	@ 0xb8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	40008000 	.word	0x40008000
 800a150:	080098d5 	.word	0x080098d5

0800a154 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d101      	bne.n	800a1a6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	e027      	b.n	800a1f6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2224      	movs	r2, #36	@ 0x24
 800a1b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f022 0201 	bic.w	r2, r2, #1
 800a1cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a1d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a212:	2b01      	cmp	r3, #1
 800a214:	d101      	bne.n	800a21a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a216:	2302      	movs	r3, #2
 800a218:	e02d      	b.n	800a276 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2224      	movs	r2, #36	@ 0x24
 800a226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f022 0201 	bic.w	r2, r2, #1
 800a240:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	683a      	ldr	r2, [r7, #0]
 800a252:	430a      	orrs	r2, r1
 800a254:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f850 	bl	800a2fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2220      	movs	r2, #32
 800a268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d101      	bne.n	800a296 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a292:	2302      	movs	r3, #2
 800a294:	e02d      	b.n	800a2f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2224      	movs	r2, #36	@ 0x24
 800a2a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f022 0201 	bic.w	r2, r2, #1
 800a2bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	430a      	orrs	r2, r1
 800a2d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f812 	bl	800a2fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2220      	movs	r2, #32
 800a2e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
	...

0800a2fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d108      	bne.n	800a31e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a31c:	e031      	b.n	800a382 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a31e:	2308      	movs	r3, #8
 800a320:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a322:	2308      	movs	r3, #8
 800a324:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	0e5b      	lsrs	r3, r3, #25
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	f003 0307 	and.w	r3, r3, #7
 800a334:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	0f5b      	lsrs	r3, r3, #29
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	f003 0307 	and.w	r3, r3, #7
 800a344:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a346:	7bbb      	ldrb	r3, [r7, #14]
 800a348:	7b3a      	ldrb	r2, [r7, #12]
 800a34a:	4911      	ldr	r1, [pc, #68]	@ (800a390 <UARTEx_SetNbDataToProcess+0x94>)
 800a34c:	5c8a      	ldrb	r2, [r1, r2]
 800a34e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a352:	7b3a      	ldrb	r2, [r7, #12]
 800a354:	490f      	ldr	r1, [pc, #60]	@ (800a394 <UARTEx_SetNbDataToProcess+0x98>)
 800a356:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a358:	fb93 f3f2 	sdiv	r3, r3, r2
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	7b7a      	ldrb	r2, [r7, #13]
 800a368:	4909      	ldr	r1, [pc, #36]	@ (800a390 <UARTEx_SetNbDataToProcess+0x94>)
 800a36a:	5c8a      	ldrb	r2, [r1, r2]
 800a36c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a370:	7b7a      	ldrb	r2, [r7, #13]
 800a372:	4908      	ldr	r1, [pc, #32]	@ (800a394 <UARTEx_SetNbDataToProcess+0x98>)
 800a374:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a376:	fb93 f3f2 	sdiv	r3, r3, r2
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a382:	bf00      	nop
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	0800a720 	.word	0x0800a720
 800a394:	0800a728 	.word	0x0800a728

0800a398 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	ed93 7a06 	vldr	s14, [r3, #24]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	edd3 7a07 	vldr	s15, [r3, #28]
 800a3ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	edd3 7a08 	vldr	s15, [r3, #32]
 800a3b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	edd3 7a06 	vldr	s15, [r3, #24]
 800a3c8:	eeb1 7a67 	vneg.f32	s14, s15
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	edd3 7a08 	vldr	s15, [r3, #32]
 800a3d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a3d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a1a      	ldr	r2, [r3, #32]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d006      	beq.n	800a3fc <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	330c      	adds	r3, #12
 800a3f2:	220c      	movs	r2, #12
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 f804 	bl	800a404 <memset>
  }

}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <memset>:
 800a404:	4402      	add	r2, r0
 800a406:	4603      	mov	r3, r0
 800a408:	4293      	cmp	r3, r2
 800a40a:	d100      	bne.n	800a40e <memset+0xa>
 800a40c:	4770      	bx	lr
 800a40e:	f803 1b01 	strb.w	r1, [r3], #1
 800a412:	e7f9      	b.n	800a408 <memset+0x4>

0800a414 <__errno>:
 800a414:	4b01      	ldr	r3, [pc, #4]	@ (800a41c <__errno+0x8>)
 800a416:	6818      	ldr	r0, [r3, #0]
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	2000000c 	.word	0x2000000c

0800a420 <__libc_init_array>:
 800a420:	b570      	push	{r4, r5, r6, lr}
 800a422:	4d0d      	ldr	r5, [pc, #52]	@ (800a458 <__libc_init_array+0x38>)
 800a424:	4c0d      	ldr	r4, [pc, #52]	@ (800a45c <__libc_init_array+0x3c>)
 800a426:	1b64      	subs	r4, r4, r5
 800a428:	10a4      	asrs	r4, r4, #2
 800a42a:	2600      	movs	r6, #0
 800a42c:	42a6      	cmp	r6, r4
 800a42e:	d109      	bne.n	800a444 <__libc_init_array+0x24>
 800a430:	4d0b      	ldr	r5, [pc, #44]	@ (800a460 <__libc_init_array+0x40>)
 800a432:	4c0c      	ldr	r4, [pc, #48]	@ (800a464 <__libc_init_array+0x44>)
 800a434:	f000 f950 	bl	800a6d8 <_init>
 800a438:	1b64      	subs	r4, r4, r5
 800a43a:	10a4      	asrs	r4, r4, #2
 800a43c:	2600      	movs	r6, #0
 800a43e:	42a6      	cmp	r6, r4
 800a440:	d105      	bne.n	800a44e <__libc_init_array+0x2e>
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	f855 3b04 	ldr.w	r3, [r5], #4
 800a448:	4798      	blx	r3
 800a44a:	3601      	adds	r6, #1
 800a44c:	e7ee      	b.n	800a42c <__libc_init_array+0xc>
 800a44e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a452:	4798      	blx	r3
 800a454:	3601      	adds	r6, #1
 800a456:	e7f2      	b.n	800a43e <__libc_init_array+0x1e>
 800a458:	0800a748 	.word	0x0800a748
 800a45c:	0800a748 	.word	0x0800a748
 800a460:	0800a748 	.word	0x0800a748
 800a464:	0800a74c 	.word	0x0800a74c

0800a468 <fmod>:
 800a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46a:	ed2d 8b02 	vpush	{d8}
 800a46e:	ec57 6b10 	vmov	r6, r7, d0
 800a472:	ec55 4b11 	vmov	r4, r5, d1
 800a476:	f000 f825 	bl	800a4c4 <__ieee754_fmod>
 800a47a:	4622      	mov	r2, r4
 800a47c:	462b      	mov	r3, r5
 800a47e:	4630      	mov	r0, r6
 800a480:	4639      	mov	r1, r7
 800a482:	eeb0 8a40 	vmov.f32	s16, s0
 800a486:	eef0 8a60 	vmov.f32	s17, s1
 800a48a:	f7f6 fb1b 	bl	8000ac4 <__aeabi_dcmpun>
 800a48e:	b990      	cbnz	r0, 800a4b6 <fmod+0x4e>
 800a490:	2200      	movs	r2, #0
 800a492:	2300      	movs	r3, #0
 800a494:	4620      	mov	r0, r4
 800a496:	4629      	mov	r1, r5
 800a498:	f7f6 fae2 	bl	8000a60 <__aeabi_dcmpeq>
 800a49c:	b158      	cbz	r0, 800a4b6 <fmod+0x4e>
 800a49e:	f7ff ffb9 	bl	800a414 <__errno>
 800a4a2:	2321      	movs	r3, #33	@ 0x21
 800a4a4:	6003      	str	r3, [r0, #0]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	4610      	mov	r0, r2
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	f7f6 f999 	bl	80007e4 <__aeabi_ddiv>
 800a4b2:	ec41 0b18 	vmov	d8, r0, r1
 800a4b6:	eeb0 0a48 	vmov.f32	s0, s16
 800a4ba:	eef0 0a68 	vmov.f32	s1, s17
 800a4be:	ecbd 8b02 	vpop	{d8}
 800a4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a4c4 <__ieee754_fmod>:
 800a4c4:	ec53 2b11 	vmov	r2, r3, d1
 800a4c8:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800a4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d0:	ea52 040c 	orrs.w	r4, r2, ip
 800a4d4:	ec51 0b10 	vmov	r0, r1, d0
 800a4d8:	461e      	mov	r6, r3
 800a4da:	4617      	mov	r7, r2
 800a4dc:	4696      	mov	lr, r2
 800a4de:	d00c      	beq.n	800a4fa <__ieee754_fmod+0x36>
 800a4e0:	4c77      	ldr	r4, [pc, #476]	@ (800a6c0 <__ieee754_fmod+0x1fc>)
 800a4e2:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800a4e6:	45a0      	cmp	r8, r4
 800a4e8:	4689      	mov	r9, r1
 800a4ea:	d806      	bhi.n	800a4fa <__ieee754_fmod+0x36>
 800a4ec:	4254      	negs	r4, r2
 800a4ee:	4d75      	ldr	r5, [pc, #468]	@ (800a6c4 <__ieee754_fmod+0x200>)
 800a4f0:	4314      	orrs	r4, r2
 800a4f2:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800a4f6:	42ac      	cmp	r4, r5
 800a4f8:	d909      	bls.n	800a50e <__ieee754_fmod+0x4a>
 800a4fa:	f7f6 f849 	bl	8000590 <__aeabi_dmul>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	f7f6 f96f 	bl	80007e4 <__aeabi_ddiv>
 800a506:	ec41 0b10 	vmov	d0, r0, r1
 800a50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50e:	45e0      	cmp	r8, ip
 800a510:	4682      	mov	sl, r0
 800a512:	4604      	mov	r4, r0
 800a514:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800a518:	dc09      	bgt.n	800a52e <__ieee754_fmod+0x6a>
 800a51a:	dbf4      	blt.n	800a506 <__ieee754_fmod+0x42>
 800a51c:	4282      	cmp	r2, r0
 800a51e:	d8f2      	bhi.n	800a506 <__ieee754_fmod+0x42>
 800a520:	d105      	bne.n	800a52e <__ieee754_fmod+0x6a>
 800a522:	4b69      	ldr	r3, [pc, #420]	@ (800a6c8 <__ieee754_fmod+0x204>)
 800a524:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800a528:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a52c:	e7eb      	b.n	800a506 <__ieee754_fmod+0x42>
 800a52e:	4a65      	ldr	r2, [pc, #404]	@ (800a6c4 <__ieee754_fmod+0x200>)
 800a530:	ea19 0f02 	tst.w	r9, r2
 800a534:	d148      	bne.n	800a5c8 <__ieee754_fmod+0x104>
 800a536:	f1b8 0f00 	cmp.w	r8, #0
 800a53a:	d13d      	bne.n	800a5b8 <__ieee754_fmod+0xf4>
 800a53c:	4963      	ldr	r1, [pc, #396]	@ (800a6cc <__ieee754_fmod+0x208>)
 800a53e:	4653      	mov	r3, sl
 800a540:	2b00      	cmp	r3, #0
 800a542:	dc36      	bgt.n	800a5b2 <__ieee754_fmod+0xee>
 800a544:	4216      	tst	r6, r2
 800a546:	d14f      	bne.n	800a5e8 <__ieee754_fmod+0x124>
 800a548:	f1bc 0f00 	cmp.w	ip, #0
 800a54c:	d144      	bne.n	800a5d8 <__ieee754_fmod+0x114>
 800a54e:	4a5f      	ldr	r2, [pc, #380]	@ (800a6cc <__ieee754_fmod+0x208>)
 800a550:	463b      	mov	r3, r7
 800a552:	2b00      	cmp	r3, #0
 800a554:	dc3d      	bgt.n	800a5d2 <__ieee754_fmod+0x10e>
 800a556:	485e      	ldr	r0, [pc, #376]	@ (800a6d0 <__ieee754_fmod+0x20c>)
 800a558:	4281      	cmp	r1, r0
 800a55a:	db4a      	blt.n	800a5f2 <__ieee754_fmod+0x12e>
 800a55c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a560:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a564:	485a      	ldr	r0, [pc, #360]	@ (800a6d0 <__ieee754_fmod+0x20c>)
 800a566:	4282      	cmp	r2, r0
 800a568:	db57      	blt.n	800a61a <__ieee754_fmod+0x156>
 800a56a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800a56e:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800a572:	1a89      	subs	r1, r1, r2
 800a574:	1b98      	subs	r0, r3, r6
 800a576:	eba4 070e 	sub.w	r7, r4, lr
 800a57a:	2900      	cmp	r1, #0
 800a57c:	d162      	bne.n	800a644 <__ieee754_fmod+0x180>
 800a57e:	4574      	cmp	r4, lr
 800a580:	bf38      	it	cc
 800a582:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800a586:	2800      	cmp	r0, #0
 800a588:	bfa4      	itt	ge
 800a58a:	463c      	movge	r4, r7
 800a58c:	4603      	movge	r3, r0
 800a58e:	ea53 0104 	orrs.w	r1, r3, r4
 800a592:	d0c6      	beq.n	800a522 <__ieee754_fmod+0x5e>
 800a594:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a598:	db69      	blt.n	800a66e <__ieee754_fmod+0x1aa>
 800a59a:	494d      	ldr	r1, [pc, #308]	@ (800a6d0 <__ieee754_fmod+0x20c>)
 800a59c:	428a      	cmp	r2, r1
 800a59e:	db6c      	blt.n	800a67a <__ieee754_fmod+0x1b6>
 800a5a0:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a5a4:	432b      	orrs	r3, r5
 800a5a6:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800a5aa:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	e7a9      	b.n	800a506 <__ieee754_fmod+0x42>
 800a5b2:	3901      	subs	r1, #1
 800a5b4:	005b      	lsls	r3, r3, #1
 800a5b6:	e7c3      	b.n	800a540 <__ieee754_fmod+0x7c>
 800a5b8:	4945      	ldr	r1, [pc, #276]	@ (800a6d0 <__ieee754_fmod+0x20c>)
 800a5ba:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	ddc0      	ble.n	800a544 <__ieee754_fmod+0x80>
 800a5c2:	3901      	subs	r1, #1
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	e7fa      	b.n	800a5be <__ieee754_fmod+0xfa>
 800a5c8:	ea4f 5128 	mov.w	r1, r8, asr #20
 800a5cc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a5d0:	e7b8      	b.n	800a544 <__ieee754_fmod+0x80>
 800a5d2:	3a01      	subs	r2, #1
 800a5d4:	005b      	lsls	r3, r3, #1
 800a5d6:	e7bc      	b.n	800a552 <__ieee754_fmod+0x8e>
 800a5d8:	4a3d      	ldr	r2, [pc, #244]	@ (800a6d0 <__ieee754_fmod+0x20c>)
 800a5da:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	ddb9      	ble.n	800a556 <__ieee754_fmod+0x92>
 800a5e2:	3a01      	subs	r2, #1
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	e7fa      	b.n	800a5de <__ieee754_fmod+0x11a>
 800a5e8:	ea4f 522c 	mov.w	r2, ip, asr #20
 800a5ec:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a5f0:	e7b1      	b.n	800a556 <__ieee754_fmod+0x92>
 800a5f2:	1a40      	subs	r0, r0, r1
 800a5f4:	281f      	cmp	r0, #31
 800a5f6:	dc0a      	bgt.n	800a60e <__ieee754_fmod+0x14a>
 800a5f8:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800a5fc:	fa08 f800 	lsl.w	r8, r8, r0
 800a600:	fa2a f303 	lsr.w	r3, sl, r3
 800a604:	ea43 0308 	orr.w	r3, r3, r8
 800a608:	fa0a f400 	lsl.w	r4, sl, r0
 800a60c:	e7aa      	b.n	800a564 <__ieee754_fmod+0xa0>
 800a60e:	4b31      	ldr	r3, [pc, #196]	@ (800a6d4 <__ieee754_fmod+0x210>)
 800a610:	1a5b      	subs	r3, r3, r1
 800a612:	fa0a f303 	lsl.w	r3, sl, r3
 800a616:	2400      	movs	r4, #0
 800a618:	e7a4      	b.n	800a564 <__ieee754_fmod+0xa0>
 800a61a:	1a80      	subs	r0, r0, r2
 800a61c:	281f      	cmp	r0, #31
 800a61e:	dc0a      	bgt.n	800a636 <__ieee754_fmod+0x172>
 800a620:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800a624:	fa0c fc00 	lsl.w	ip, ip, r0
 800a628:	fa27 f606 	lsr.w	r6, r7, r6
 800a62c:	ea46 060c 	orr.w	r6, r6, ip
 800a630:	fa07 fe00 	lsl.w	lr, r7, r0
 800a634:	e79d      	b.n	800a572 <__ieee754_fmod+0xae>
 800a636:	4e27      	ldr	r6, [pc, #156]	@ (800a6d4 <__ieee754_fmod+0x210>)
 800a638:	1ab6      	subs	r6, r6, r2
 800a63a:	fa07 f606 	lsl.w	r6, r7, r6
 800a63e:	f04f 0e00 	mov.w	lr, #0
 800a642:	e796      	b.n	800a572 <__ieee754_fmod+0xae>
 800a644:	4574      	cmp	r4, lr
 800a646:	bf38      	it	cc
 800a648:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800a64c:	2800      	cmp	r0, #0
 800a64e:	da05      	bge.n	800a65c <__ieee754_fmod+0x198>
 800a650:	0fe0      	lsrs	r0, r4, #31
 800a652:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a656:	0064      	lsls	r4, r4, #1
 800a658:	3901      	subs	r1, #1
 800a65a:	e78b      	b.n	800a574 <__ieee754_fmod+0xb0>
 800a65c:	ea50 0307 	orrs.w	r3, r0, r7
 800a660:	f43f af5f 	beq.w	800a522 <__ieee754_fmod+0x5e>
 800a664:	0ffb      	lsrs	r3, r7, #31
 800a666:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800a66a:	007c      	lsls	r4, r7, #1
 800a66c:	e7f4      	b.n	800a658 <__ieee754_fmod+0x194>
 800a66e:	0fe1      	lsrs	r1, r4, #31
 800a670:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a674:	0064      	lsls	r4, r4, #1
 800a676:	3a01      	subs	r2, #1
 800a678:	e78c      	b.n	800a594 <__ieee754_fmod+0xd0>
 800a67a:	1a89      	subs	r1, r1, r2
 800a67c:	2914      	cmp	r1, #20
 800a67e:	dc0a      	bgt.n	800a696 <__ieee754_fmod+0x1d2>
 800a680:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800a684:	fa03 f202 	lsl.w	r2, r3, r2
 800a688:	40cc      	lsrs	r4, r1
 800a68a:	4322      	orrs	r2, r4
 800a68c:	410b      	asrs	r3, r1
 800a68e:	ea43 0105 	orr.w	r1, r3, r5
 800a692:	4610      	mov	r0, r2
 800a694:	e737      	b.n	800a506 <__ieee754_fmod+0x42>
 800a696:	291f      	cmp	r1, #31
 800a698:	dc07      	bgt.n	800a6aa <__ieee754_fmod+0x1e6>
 800a69a:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800a69e:	40cc      	lsrs	r4, r1
 800a6a0:	fa03 f202 	lsl.w	r2, r3, r2
 800a6a4:	4322      	orrs	r2, r4
 800a6a6:	462b      	mov	r3, r5
 800a6a8:	e7f1      	b.n	800a68e <__ieee754_fmod+0x1ca>
 800a6aa:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800a6ae:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800a6b2:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800a6b6:	32e2      	adds	r2, #226	@ 0xe2
 800a6b8:	fa43 f202 	asr.w	r2, r3, r2
 800a6bc:	e7f3      	b.n	800a6a6 <__ieee754_fmod+0x1e2>
 800a6be:	bf00      	nop
 800a6c0:	7fefffff 	.word	0x7fefffff
 800a6c4:	7ff00000 	.word	0x7ff00000
 800a6c8:	0800a730 	.word	0x0800a730
 800a6cc:	fffffbed 	.word	0xfffffbed
 800a6d0:	fffffc02 	.word	0xfffffc02
 800a6d4:	fffffbe2 	.word	0xfffffbe2

0800a6d8 <_init>:
 800a6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6da:	bf00      	nop
 800a6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6de:	bc08      	pop	{r3}
 800a6e0:	469e      	mov	lr, r3
 800a6e2:	4770      	bx	lr

0800a6e4 <_fini>:
 800a6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e6:	bf00      	nop
 800a6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ea:	bc08      	pop	{r3}
 800a6ec:	469e      	mov	lr, r3
 800a6ee:	4770      	bx	lr
