
LAB_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b64  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007d40  08007d40  00008d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d90  08007d90  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d90  08007d90  00008d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d98  08007d98  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d98  08007d98  00008d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d9c  08007d9c  00008d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007da0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000060  08007dfc  00009060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08007dfc  0000940c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018094  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc5  00000000  00000000  00021120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00023de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000104d  00000000  00000000  000252c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd6  00000000  00000000  00026315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018791  00000000  00000000  0004f0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001140d3  00000000  00000000  0006787c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b94f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e74  00000000  00000000  0017b994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00181808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007d24 	.word	0x08007d24

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	08007d24 	.word	0x08007d24

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96a 	b.w	8000e2c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	460c      	mov	r4, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14e      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	458c      	cmp	ip, r1
 8000b80:	4686      	mov	lr, r0
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	d962      	bls.n	8000c4e <__udivmoddi4+0xde>
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0320 	rsb	r3, r2, #32
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f f68c 	uxth.w	r6, ip
 8000ba6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000baa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bae:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bc6:	f080 8112 	bcs.w	8000dee <__udivmoddi4+0x27e>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 810f 	bls.w	8000dee <__udivmoddi4+0x27e>
 8000bd0:	3c02      	subs	r4, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a59      	subs	r1, r3, r1
 8000bd6:	fa1f f38e 	uxth.w	r3, lr
 8000bda:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bde:	fb07 1110 	mls	r1, r7, r0, r1
 8000be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be6:	fb00 f606 	mul.w	r6, r0, r6
 8000bea:	429e      	cmp	r6, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf6:	f080 80fc 	bcs.w	8000df2 <__udivmoddi4+0x282>
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	f240 80f9 	bls.w	8000df2 <__udivmoddi4+0x282>
 8000c00:	4463      	add	r3, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	1b9b      	subs	r3, r3, r6
 8000c06:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	b11d      	cbz	r5, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	2200      	movs	r2, #0
 8000c12:	e9c5 3200 	strd	r3, r2, [r5]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d905      	bls.n	8000c2a <__udivmoddi4+0xba>
 8000c1e:	b10d      	cbz	r5, 8000c24 <__udivmoddi4+0xb4>
 8000c20:	e9c5 0100 	strd	r0, r1, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4608      	mov	r0, r1
 8000c28:	e7f5      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c2a:	fab3 f183 	clz	r1, r3
 8000c2e:	2900      	cmp	r1, #0
 8000c30:	d146      	bne.n	8000cc0 <__udivmoddi4+0x150>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xcc>
 8000c36:	4290      	cmp	r0, r2
 8000c38:	f0c0 80f0 	bcc.w	8000e1c <__udivmoddi4+0x2ac>
 8000c3c:	1a86      	subs	r6, r0, r2
 8000c3e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d0e6      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c48:	e9c5 6300 	strd	r6, r3, [r5]
 8000c4c:	e7e3      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	f040 8090 	bne.w	8000d74 <__udivmoddi4+0x204>
 8000c54:	eba1 040c 	sub.w	r4, r1, ip
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	2101      	movs	r1, #1
 8000c62:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c72:	fb07 f006 	mul.w	r0, r7, r6
 8000c76:	4298      	cmp	r0, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x11c>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x11a>
 8000c84:	4298      	cmp	r0, r3
 8000c86:	f200 80cd 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	1a1c      	subs	r4, r3, r0
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c96:	fb08 4410 	mls	r4, r8, r0, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb00 f707 	mul.w	r7, r0, r7
 8000ca2:	429f      	cmp	r7, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x148>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x146>
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	f200 80b0 	bhi.w	8000e16 <__udivmoddi4+0x2a6>
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	1bdb      	subs	r3, r3, r7
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cc0:	f1c1 0620 	rsb	r6, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cca:	431f      	orrs	r7, r3
 8000ccc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd0:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd4:	ea43 030c 	orr.w	r3, r3, ip
 8000cd8:	40f4      	lsrs	r4, r6
 8000cda:	fa00 f801 	lsl.w	r8, r0, r1
 8000cde:	0c38      	lsrs	r0, r7, #16
 8000ce0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	fb00 441e 	mls	r4, r0, lr, r4
 8000cf0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf4:	fb0e f90c 	mul.w	r9, lr, ip
 8000cf8:	45a1      	cmp	r9, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	d90a      	bls.n	8000d16 <__udivmoddi4+0x1a6>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d06:	f080 8084 	bcs.w	8000e12 <__udivmoddi4+0x2a2>
 8000d0a:	45a1      	cmp	r9, r4
 8000d0c:	f240 8081 	bls.w	8000e12 <__udivmoddi4+0x2a2>
 8000d10:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d14:	443c      	add	r4, r7
 8000d16:	eba4 0409 	sub.w	r4, r4, r9
 8000d1a:	fa1f f983 	uxth.w	r9, r3
 8000d1e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d22:	fb00 4413 	mls	r4, r0, r3, r4
 8000d26:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d2e:	45a4      	cmp	ip, r4
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x1d2>
 8000d32:	193c      	adds	r4, r7, r4
 8000d34:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d38:	d267      	bcs.n	8000e0a <__udivmoddi4+0x29a>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0x29a>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d46:	fba0 9302 	umull	r9, r3, r0, r2
 8000d4a:	eba4 040c 	sub.w	r4, r4, ip
 8000d4e:	429c      	cmp	r4, r3
 8000d50:	46ce      	mov	lr, r9
 8000d52:	469c      	mov	ip, r3
 8000d54:	d351      	bcc.n	8000dfa <__udivmoddi4+0x28a>
 8000d56:	d04e      	beq.n	8000df6 <__udivmoddi4+0x286>
 8000d58:	b155      	cbz	r5, 8000d70 <__udivmoddi4+0x200>
 8000d5a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d5e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d62:	fa04 f606 	lsl.w	r6, r4, r6
 8000d66:	40cb      	lsrs	r3, r1
 8000d68:	431e      	orrs	r6, r3
 8000d6a:	40cc      	lsrs	r4, r1
 8000d6c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e750      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d74:	f1c2 0320 	rsb	r3, r2, #32
 8000d78:	fa20 f103 	lsr.w	r1, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa24 f303 	lsr.w	r3, r4, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	430c      	orrs	r4, r1
 8000d88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d8c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d90:	fa1f f78c 	uxth.w	r7, ip
 8000d94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d98:	fb08 3110 	mls	r1, r8, r0, r3
 8000d9c:	0c23      	lsrs	r3, r4, #16
 8000d9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da2:	fb00 f107 	mul.w	r1, r0, r7
 8000da6:	4299      	cmp	r1, r3
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x24c>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 36ff 	add.w	r6, r0, #4294967295
 8000db2:	d22c      	bcs.n	8000e0e <__udivmoddi4+0x29e>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	d92a      	bls.n	8000e0e <__udivmoddi4+0x29e>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb01 f307 	mul.w	r3, r1, r7
 8000dd0:	42a3      	cmp	r3, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x276>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ddc:	d213      	bcs.n	8000e06 <__udivmoddi4+0x296>
 8000dde:	42a3      	cmp	r3, r4
 8000de0:	d911      	bls.n	8000e06 <__udivmoddi4+0x296>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	1ae4      	subs	r4, r4, r3
 8000de8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dec:	e739      	b.n	8000c62 <__udivmoddi4+0xf2>
 8000dee:	4604      	mov	r4, r0
 8000df0:	e6f0      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000df2:	4608      	mov	r0, r1
 8000df4:	e706      	b.n	8000c04 <__udivmoddi4+0x94>
 8000df6:	45c8      	cmp	r8, r9
 8000df8:	d2ae      	bcs.n	8000d58 <__udivmoddi4+0x1e8>
 8000dfa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dfe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e02:	3801      	subs	r0, #1
 8000e04:	e7a8      	b.n	8000d58 <__udivmoddi4+0x1e8>
 8000e06:	4631      	mov	r1, r6
 8000e08:	e7ed      	b.n	8000de6 <__udivmoddi4+0x276>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	e799      	b.n	8000d42 <__udivmoddi4+0x1d2>
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e7d4      	b.n	8000dbc <__udivmoddi4+0x24c>
 8000e12:	46d6      	mov	lr, sl
 8000e14:	e77f      	b.n	8000d16 <__udivmoddi4+0x1a6>
 8000e16:	4463      	add	r3, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e74d      	b.n	8000cb8 <__udivmoddi4+0x148>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	4623      	mov	r3, r4
 8000e20:	4608      	mov	r0, r1
 8000e22:	e70f      	b.n	8000c44 <__udivmoddi4+0xd4>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	e730      	b.n	8000c8c <__udivmoddi4+0x11c>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e34:	f000 fe8b 	bl	8001b4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e38:	f000 f846 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3c:	f000 fa52 	bl	80012e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e40:	f000 fa26 	bl	8001290 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000e44:	f000 f914 	bl	8001070 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000e48:	f000 f88a 	bl	8000f60 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000e4c:	f000 f9a8 	bl	80011a0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e50:	f000 f958 	bl	8001104 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000e54:	217f      	movs	r1, #127	@ 0x7f
 8000e56:	4813      	ldr	r0, [pc, #76]	@ (8000ea4 <main+0x74>)
 8000e58:	f002 fc84 	bl	8003764 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 2);
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	4912      	ldr	r1, [pc, #72]	@ (8000ea8 <main+0x78>)
 8000e60:	4810      	ldr	r0, [pc, #64]	@ (8000ea4 <main+0x74>)
 8000e62:	f001 fb07 	bl	8002474 <HAL_ADC_Start_DMA>

  PID.Kp = 0.01;
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <main+0x7c>)
 8000e68:	4a11      	ldr	r2, [pc, #68]	@ (8000eb0 <main+0x80>)
 8000e6a:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.0000045;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <main+0x7c>)
 8000e6e:	4a11      	ldr	r2, [pc, #68]	@ (8000eb4 <main+0x84>)
 8000e70:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.000009;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <main+0x7c>)
 8000e74:	4a10      	ldr	r2, [pc, #64]	@ (8000eb8 <main+0x88>)
 8000e76:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	480c      	ldr	r0, [pc, #48]	@ (8000eac <main+0x7c>)
 8000e7c:	f006 fdb2 	bl	80079e4 <arm_pid_init_f32>

  HAL_TIM_Base_Start_IT(&htim2);
 8000e80:	480e      	ldr	r0, [pc, #56]	@ (8000ebc <main+0x8c>)
 8000e82:	f004 fc37 	bl	80056f4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim3);
 8000e86:	480e      	ldr	r0, [pc, #56]	@ (8000ec0 <main+0x90>)
 8000e88:	f004 fbc4 	bl	8005614 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	480c      	ldr	r0, [pc, #48]	@ (8000ec0 <main+0x90>)
 8000e90:	f004 fd0a 	bl	80058a8 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_set);

	  if(Mode == 0) Part_I_PID_ADC();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <main+0x94>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1fb      	bne.n	8000e94 <main+0x64>
 8000e9c:	f000 fae0 	bl	8001460 <Part_I_PID_ADC>
 8000ea0:	e7f8      	b.n	8000e94 <main+0x64>
 8000ea2:	bf00      	nop
 8000ea4:	2000007c 	.word	0x2000007c
 8000ea8:	200002a4 	.word	0x200002a4
 8000eac:	200002a8 	.word	0x200002a8
 8000eb0:	3c23d70a 	.word	0x3c23d70a
 8000eb4:	3696feb5 	.word	0x3696feb5
 8000eb8:	3716feb5 	.word	0x3716feb5
 8000ebc:	200001dc 	.word	0x200001dc
 8000ec0:	20000228 	.word	0x20000228
 8000ec4:	20000274 	.word	0x20000274

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	@ 0x50
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	2238      	movs	r2, #56	@ 0x38
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f006 fdba 	bl	8007a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f003 fb0a 	bl	8004504 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000efa:	2340      	movs	r3, #64	@ 0x40
 8000efc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efe:	2302      	movs	r3, #2
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f02:	2302      	movs	r3, #2
 8000f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f06:	2304      	movs	r3, #4
 8000f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f0a:	2355      	movs	r3, #85	@ 0x55
 8000f0c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f16:	2302      	movs	r3, #2
 8000f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1a:	f107 0318 	add.w	r3, r7, #24
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f003 fba4 	bl	800466c <HAL_RCC_OscConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f2a:	f000 fc05 	bl	8001738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2e:	230f      	movs	r3, #15
 8000f30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f32:	2303      	movs	r3, #3
 8000f34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2104      	movs	r1, #4
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fea2 	bl	8004c90 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f52:	f000 fbf1 	bl	8001738 <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	3750      	adds	r7, #80	@ 0x50
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	@ 0x30
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2220      	movs	r2, #32
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 fd69 	bl	8007a50 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f7e:	4b39      	ldr	r3, [pc, #228]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000f80:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f86:	4b37      	ldr	r3, [pc, #220]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000f88:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8e:	4b35      	ldr	r3, [pc, #212]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f94:	4b33      	ldr	r3, [pc, #204]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f9a:	4b32      	ldr	r3, [pc, #200]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fa0:	4b30      	ldr	r3, [pc, #192]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa6:	4b2f      	ldr	r3, [pc, #188]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000fa8:	2204      	movs	r2, #4
 8000faa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fac:	4b2d      	ldr	r3, [pc, #180]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000fba:	2202      	movs	r2, #2
 8000fbc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fbe:	4b29      	ldr	r3, [pc, #164]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc6:	4b27      	ldr	r3, [pc, #156]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fcc:	4b25      	ldr	r3, [pc, #148]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fd2:	4b24      	ldr	r3, [pc, #144]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fda:	4b22      	ldr	r3, [pc, #136]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fe0:	4b20      	ldr	r3, [pc, #128]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe8:	481e      	ldr	r0, [pc, #120]	@ (8001064 <MX_ADC1_Init+0x104>)
 8000fea:	f001 f887 	bl	80020fc <HAL_ADC_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ff4:	f000 fba0 	bl	8001738 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001000:	4619      	mov	r1, r3
 8001002:	4818      	ldr	r0, [pc, #96]	@ (8001064 <MX_ADC1_Init+0x104>)
 8001004:	f002 fc42 	bl	800388c <HAL_ADCEx_MultiModeConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800100e:	f000 fb93 	bl	8001738 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <MX_ADC1_Init+0x108>)
 8001014:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001016:	2306      	movs	r3, #6
 8001018:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800101a:	2307      	movs	r3, #7
 800101c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800101e:	237f      	movs	r3, #127	@ 0x7f
 8001020:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001022:	2304      	movs	r3, #4
 8001024:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	480d      	ldr	r0, [pc, #52]	@ (8001064 <MX_ADC1_Init+0x104>)
 8001030:	f001 fd7c 	bl	8002b2c <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800103a:	f000 fb7d 	bl	8001738 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800103e:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <MX_ADC1_Init+0x10c>)
 8001040:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001042:	230c      	movs	r3, #12
 8001044:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	@ (8001064 <MX_ADC1_Init+0x104>)
 800104c:	f001 fd6e 	bl	8002b2c <HAL_ADC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001056:	f000 fb6f 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3730      	adds	r7, #48	@ 0x30
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000007c 	.word	0x2000007c
 8001068:	04300002 	.word	0x04300002
 800106c:	08600004 	.word	0x08600004

08001070 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001074:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <MX_LPUART1_UART_Init+0x8c>)
 8001076:	4a22      	ldr	r2, [pc, #136]	@ (8001100 <MX_LPUART1_UART_Init+0x90>)
 8001078:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800107a:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <MX_LPUART1_UART_Init+0x8c>)
 800107c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001080:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <MX_LPUART1_UART_Init+0x8c>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <MX_LPUART1_UART_Init+0x8c>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800108e:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <MX_LPUART1_UART_Init+0x8c>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <MX_LPUART1_UART_Init+0x8c>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_LPUART1_UART_Init+0x8c>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <MX_LPUART1_UART_Init+0x8c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <MX_LPUART1_UART_Init+0x8c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <MX_LPUART1_UART_Init+0x8c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80010b2:	4812      	ldr	r0, [pc, #72]	@ (80010fc <MX_LPUART1_UART_Init+0x8c>)
 80010b4:	f005 fe28 	bl	8006d08 <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80010be:	f000 fb3b 	bl	8001738 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c2:	2100      	movs	r1, #0
 80010c4:	480d      	ldr	r0, [pc, #52]	@ (80010fc <MX_LPUART1_UART_Init+0x8c>)
 80010c6:	f006 fbc3 	bl	8007850 <HAL_UARTEx_SetTxFifoThreshold>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80010d0:	f000 fb32 	bl	8001738 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d4:	2100      	movs	r1, #0
 80010d6:	4809      	ldr	r0, [pc, #36]	@ (80010fc <MX_LPUART1_UART_Init+0x8c>)
 80010d8:	f006 fbf8 	bl	80078cc <HAL_UARTEx_SetRxFifoThreshold>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80010e2:	f000 fb29 	bl	8001738 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_LPUART1_UART_Init+0x8c>)
 80010e8:	f006 fb79 	bl	80077de <HAL_UARTEx_DisableFifoMode>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80010f2:	f000 fb21 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000148 	.word	0x20000148
 8001100:	40008000 	.word	0x40008000

08001104 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001122:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <MX_TIM2_Init+0x98>)
 8001124:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001128:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <MX_TIM2_Init+0x98>)
 800112c:	22a9      	movs	r2, #169	@ 0xa9
 800112e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <MX_TIM2_Init+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001136:	4b19      	ldr	r3, [pc, #100]	@ (800119c <MX_TIM2_Init+0x98>)
 8001138:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800113c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113e:	4b17      	ldr	r3, [pc, #92]	@ (800119c <MX_TIM2_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001144:	4b15      	ldr	r3, [pc, #84]	@ (800119c <MX_TIM2_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800114a:	4814      	ldr	r0, [pc, #80]	@ (800119c <MX_TIM2_Init+0x98>)
 800114c:	f004 fa0a 	bl	8005564 <HAL_TIM_Base_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001156:	f000 faef 	bl	8001738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800115e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4619      	mov	r1, r3
 8001166:	480d      	ldr	r0, [pc, #52]	@ (800119c <MX_TIM2_Init+0x98>)
 8001168:	f004 ff14 	bl	8005f94 <HAL_TIM_ConfigClockSource>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001172:	f000 fae1 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	@ (800119c <MX_TIM2_Init+0x98>)
 8001184:	f005 fce4 	bl	8006b50 <HAL_TIMEx_MasterConfigSynchronization>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800118e:	f000 fad3 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200001dc 	.word	0x200001dc

080011a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	@ 0x38
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001288 <MX_TIM3_Init+0xe8>)
 80011d4:	4a2d      	ldr	r2, [pc, #180]	@ (800128c <MX_TIM3_Init+0xec>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80011d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <MX_TIM3_Init+0xe8>)
 80011da:	22a9      	movs	r2, #169	@ 0xa9
 80011dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <MX_TIM3_Init+0xe8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <MX_TIM3_Init+0xe8>)
 80011e6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80011ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <MX_TIM3_Init+0xe8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <MX_TIM3_Init+0xe8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011f8:	4823      	ldr	r0, [pc, #140]	@ (8001288 <MX_TIM3_Init+0xe8>)
 80011fa:	f004 f9b3 	bl	8005564 <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001204:	f000 fa98 	bl	8001738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800120e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001212:	4619      	mov	r1, r3
 8001214:	481c      	ldr	r0, [pc, #112]	@ (8001288 <MX_TIM3_Init+0xe8>)
 8001216:	f004 febd 	bl	8005f94 <HAL_TIM_ConfigClockSource>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001220:	f000 fa8a 	bl	8001738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001224:	4818      	ldr	r0, [pc, #96]	@ (8001288 <MX_TIM3_Init+0xe8>)
 8001226:	f004 fadd 	bl	80057e4 <HAL_TIM_PWM_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001230:	f000 fa82 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4811      	ldr	r0, [pc, #68]	@ (8001288 <MX_TIM3_Init+0xe8>)
 8001244:	f005 fc84 	bl	8006b50 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800124e:	f000 fa73 	bl	8001738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001252:	2360      	movs	r3, #96	@ 0x60
 8001254:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	4619      	mov	r1, r3
 8001268:	4807      	ldr	r0, [pc, #28]	@ (8001288 <MX_TIM3_Init+0xe8>)
 800126a:	f004 fd7f 	bl	8005d6c <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001274:	f000 fa60 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001278:	4803      	ldr	r0, [pc, #12]	@ (8001288 <MX_TIM3_Init+0xe8>)
 800127a:	f000 fba1 	bl	80019c0 <HAL_TIM_MspPostInit>

}
 800127e:	bf00      	nop
 8001280:	3738      	adds	r7, #56	@ 0x38
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000228 	.word	0x20000228
 800128c:	40000400 	.word	0x40000400

08001290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001296:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <MX_DMA_Init+0x50>)
 8001298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800129a:	4a11      	ldr	r2, [pc, #68]	@ (80012e0 <MX_DMA_Init+0x50>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <MX_DMA_Init+0x50>)
 80012a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <MX_DMA_Init+0x50>)
 80012b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012b2:	4a0b      	ldr	r2, [pc, #44]	@ (80012e0 <MX_DMA_Init+0x50>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <MX_DMA_Init+0x50>)
 80012bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	200b      	movs	r0, #11
 80012cc:	f002 fcc1 	bl	8003c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012d0:	200b      	movs	r0, #11
 80012d2:	f002 fcd8 	bl	8003c86 <HAL_NVIC_EnableIRQ>

}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	4b3a      	ldr	r3, [pc, #232]	@ (80013e4 <MX_GPIO_Init+0x100>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	4a39      	ldr	r2, [pc, #228]	@ (80013e4 <MX_GPIO_Init+0x100>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001306:	4b37      	ldr	r3, [pc, #220]	@ (80013e4 <MX_GPIO_Init+0x100>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001312:	4b34      	ldr	r3, [pc, #208]	@ (80013e4 <MX_GPIO_Init+0x100>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	4a33      	ldr	r2, [pc, #204]	@ (80013e4 <MX_GPIO_Init+0x100>)
 8001318:	f043 0320 	orr.w	r3, r3, #32
 800131c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131e:	4b31      	ldr	r3, [pc, #196]	@ (80013e4 <MX_GPIO_Init+0x100>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	f003 0320 	and.w	r3, r3, #32
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b2e      	ldr	r3, [pc, #184]	@ (80013e4 <MX_GPIO_Init+0x100>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	4a2d      	ldr	r2, [pc, #180]	@ (80013e4 <MX_GPIO_Init+0x100>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001336:	4b2b      	ldr	r3, [pc, #172]	@ (80013e4 <MX_GPIO_Init+0x100>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <MX_GPIO_Init+0x100>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	4a27      	ldr	r2, [pc, #156]	@ (80013e4 <MX_GPIO_Init+0x100>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134e:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <MX_GPIO_Init+0x100>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8001360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001364:	f003 f89e 	bl	80044a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2110      	movs	r1, #16
 800136c:	481e      	ldr	r0, [pc, #120]	@ (80013e8 <MX_GPIO_Init+0x104>)
 800136e:	f003 f899 	bl	80044a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001372:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001378:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4817      	ldr	r0, [pc, #92]	@ (80013e8 <MX_GPIO_Init+0x104>)
 800138a:	f002 ff09 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_10;
 800138e:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013aa:	f002 fef9 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013ae:	2310      	movs	r3, #16
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4808      	ldr	r0, [pc, #32]	@ (80013e8 <MX_GPIO_Init+0x104>)
 80013c6:	f002 feeb 	bl	80041a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2028      	movs	r0, #40	@ 0x28
 80013d0:	f002 fc3f 	bl	8003c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013d4:	2028      	movs	r0, #40	@ 0x28
 80013d6:	f002 fc56 	bl	8003c86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	@ 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	48000800 	.word	0x48000800

080013ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a15      	ldr	r2, [pc, #84]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d121      	bne.n	8001440 <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		angular_position = (ADC_RawRead[0] * 359) / 4095;
 80013fc:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	f240 1367 	movw	r3, #359	@ 0x167
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800140c:	fb82 1203 	smull	r1, r2, r2, r3
 8001410:	441a      	add	r2, r3
 8001412:	12d2      	asrs	r2, r2, #11
 8001414:	17db      	asrs	r3, r3, #31
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	b29a      	uxth	r2, r3
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800141c:	801a      	strh	r2, [r3, #0]
		set_point = (ADC_RawRead[1] * 359) / 4095;
 800141e:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001420:	885b      	ldrh	r3, [r3, #2]
 8001422:	461a      	mov	r2, r3
 8001424:	f240 1367 	movw	r3, #359	@ 0x167
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	4a09      	ldr	r2, [pc, #36]	@ (8001454 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800142e:	fb82 1203 	smull	r1, r2, r2, r3
 8001432:	441a      	add	r2, r3
 8001434:	12d2      	asrs	r2, r2, #11
 8001436:	17db      	asrs	r3, r3, #31
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	b29a      	uxth	r2, r3
 800143c:	4b07      	ldr	r3, [pc, #28]	@ (800145c <HAL_TIM_PeriodElapsedCallback+0x70>)
 800143e:	801a      	strh	r2, [r3, #0]
	}
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	200001dc 	.word	0x200001dc
 8001450:	200002a4 	.word	0x200002a4
 8001454:	80080081 	.word	0x80080081
 8001458:	200002a0 	.word	0x200002a0
 800145c:	200002a2 	.word	0x200002a2

08001460 <Part_I_PID_ADC>:

void Part_I_PID_ADC(){
 8001460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	if(timestamp < HAL_GetTick())
 8001468:	f000 fbd6 	bl	8001c18 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	4b90      	ldr	r3, [pc, #576]	@ (80016b0 <Part_I_PID_ADC+0x250>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	f240 810f 	bls.w	8001696 <Part_I_PID_ADC+0x236>
	{
		timestamp = HAL_GetTick() + 10;
 8001478:	f000 fbce 	bl	8001c18 <HAL_GetTick>
 800147c:	4603      	mov	r3, r0
 800147e:	330a      	adds	r3, #10
 8001480:	4a8b      	ldr	r2, [pc, #556]	@ (80016b0 <Part_I_PID_ADC+0x250>)
 8001482:	6013      	str	r3, [r2, #0]

		clockwise = fmod(fabs(set_point - angular_position), 360);
 8001484:	4b8b      	ldr	r3, [pc, #556]	@ (80016b4 <Part_I_PID_ADC+0x254>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b8b      	ldr	r3, [pc, #556]	@ (80016b8 <Part_I_PID_ADC+0x258>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f813 	bl	80004bc <__aeabi_i2d>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4692      	mov	sl, r2
 800149c:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80014a0:	ed9f 1b7f 	vldr	d1, [pc, #508]	@ 80016a0 <Part_I_PID_ADC+0x240>
 80014a4:	ec4b ab10 	vmov	d0, sl, fp
 80014a8:	f006 fb04 	bl	8007ab4 <fmod>
 80014ac:	eeb0 7a40 	vmov.f32	s14, s0
 80014b0:	eef0 7a60 	vmov.f32	s15, s1
 80014b4:	4b81      	ldr	r3, [pc, #516]	@ (80016bc <Part_I_PID_ADC+0x25c>)
 80014b6:	ed83 7b00 	vstr	d7, [r3]
		counterclockwise = fmod(360 - fabs(set_point - angular_position), 360);
 80014ba:	4b7e      	ldr	r3, [pc, #504]	@ (80016b4 <Part_I_PID_ADC+0x254>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	4b7d      	ldr	r3, [pc, #500]	@ (80016b8 <Part_I_PID_ADC+0x258>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe fff8 	bl	80004bc <__aeabi_i2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4690      	mov	r8, r2
 80014d2:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80014d6:	4642      	mov	r2, r8
 80014d8:	464b      	mov	r3, r9
 80014da:	f04f 0000 	mov.w	r0, #0
 80014de:	4978      	ldr	r1, [pc, #480]	@ (80016c0 <Part_I_PID_ADC+0x260>)
 80014e0:	f7fe fe9e 	bl	8000220 <__aeabi_dsub>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	ec43 2b17 	vmov	d7, r2, r3
 80014ec:	ed9f 1b6c 	vldr	d1, [pc, #432]	@ 80016a0 <Part_I_PID_ADC+0x240>
 80014f0:	eeb0 0a47 	vmov.f32	s0, s14
 80014f4:	eef0 0a67 	vmov.f32	s1, s15
 80014f8:	f006 fadc 	bl	8007ab4 <fmod>
 80014fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001500:	eef0 7a60 	vmov.f32	s15, s1
 8001504:	4b6f      	ldr	r3, [pc, #444]	@ (80016c4 <Part_I_PID_ADC+0x264>)
 8001506:	ed83 7b00 	vstr	d7, [r3]

		err = set_point - angular_position;
 800150a:	4b6a      	ldr	r3, [pc, #424]	@ (80016b4 <Part_I_PID_ADC+0x254>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	4b69      	ldr	r3, [pc, #420]	@ (80016b8 <Part_I_PID_ADC+0x258>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	4a6c      	ldr	r2, [pc, #432]	@ (80016c8 <Part_I_PID_ADC+0x268>)
 8001518:	6013      	str	r3, [r2, #0]
		Vfeedback = arm_pid_f32(&PID, err);
 800151a:	4b6b      	ldr	r3, [pc, #428]	@ (80016c8 <Part_I_PID_ADC+0x268>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001526:	4b69      	ldr	r3, [pc, #420]	@ (80016cc <Part_I_PID_ADC+0x26c>)
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	ed93 7a00 	vldr	s14, [r3]
 8001534:	edd7 7a02 	vldr	s15, [r7, #8]
 8001538:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	edd3 7a03 	vldr	s15, [r3, #12]
 8001548:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800154c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	edd3 6a02 	vldr	s13, [r3, #8]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	edd3 7a04 	vldr	s15, [r3, #16]
 800155c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001560:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800156a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156e:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a51      	ldr	r2, [pc, #324]	@ (80016d0 <Part_I_PID_ADC+0x270>)
 800158a:	6013      	str	r3, [r2, #0]
		absVfb = fabs(Vfeedback) * 2.5;
 800158c:	4b50      	ldr	r3, [pc, #320]	@ (80016d0 <Part_I_PID_ADC+0x270>)
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	eef0 7ae7 	vabs.f32	s15, s15
 8001596:	ee17 0a90 	vmov	r0, s15
 800159a:	f7fe ffa1 	bl	80004e0 <__aeabi_f2d>
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b4c      	ldr	r3, [pc, #304]	@ (80016d4 <Part_I_PID_ADC+0x274>)
 80015a4:	f7fe fff4 	bl	8000590 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	494a      	ldr	r1, [pc, #296]	@ (80016d8 <Part_I_PID_ADC+0x278>)
 80015ae:	e9c1 2300 	strd	r2, r3, [r1]
		vfbtopwm = (absVfb * 5000)/12;
 80015b2:	4b49      	ldr	r3, [pc, #292]	@ (80016d8 <Part_I_PID_ADC+0x278>)
 80015b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015b8:	a33b      	add	r3, pc, #236	@ (adr r3, 80016a8 <Part_I_PID_ADC+0x248>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7fe ffe7 	bl	8000590 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b43      	ldr	r3, [pc, #268]	@ (80016dc <Part_I_PID_ADC+0x27c>)
 80015d0:	f7ff f908 	bl	80007e4 <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff fa88 	bl	8000af0 <__aeabi_d2iz>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a3f      	ldr	r2, [pc, #252]	@ (80016e0 <Part_I_PID_ADC+0x280>)
 80015e4:	6013      	str	r3, [r2, #0]
		if(vfbtopwm < 1500 && vfbtopwm > 25) usepwm = 1500;
 80015e6:	4b3e      	ldr	r3, [pc, #248]	@ (80016e0 <Part_I_PID_ADC+0x280>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f240 52db 	movw	r2, #1499	@ 0x5db
 80015ee:	4293      	cmp	r3, r2
 80015f0:	dc08      	bgt.n	8001604 <Part_I_PID_ADC+0x1a4>
 80015f2:	4b3b      	ldr	r3, [pc, #236]	@ (80016e0 <Part_I_PID_ADC+0x280>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b19      	cmp	r3, #25
 80015f8:	dd04      	ble.n	8001604 <Part_I_PID_ADC+0x1a4>
 80015fa:	4b3a      	ldr	r3, [pc, #232]	@ (80016e4 <Part_I_PID_ADC+0x284>)
 80015fc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	e003      	b.n	800160c <Part_I_PID_ADC+0x1ac>
		else usepwm = vfbtopwm;
 8001604:	4b36      	ldr	r3, [pc, #216]	@ (80016e0 <Part_I_PID_ADC+0x280>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a36      	ldr	r2, [pc, #216]	@ (80016e4 <Part_I_PID_ADC+0x284>)
 800160a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, usepwm);
 800160c:	4b35      	ldr	r3, [pc, #212]	@ (80016e4 <Part_I_PID_ADC+0x284>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b35      	ldr	r3, [pc, #212]	@ (80016e8 <Part_I_PID_ADC+0x288>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	635a      	str	r2, [r3, #52]	@ 0x34
		if(fabs(err) < 7) usepwm = 0;
 8001616:	4b2c      	ldr	r3, [pc, #176]	@ (80016c8 <Part_I_PID_ADC+0x268>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff4e 	bl	80004bc <__aeabi_i2d>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4614      	mov	r4, r2
 8001626:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	4b2f      	ldr	r3, [pc, #188]	@ (80016ec <Part_I_PID_ADC+0x28c>)
 8001630:	4620      	mov	r0, r4
 8001632:	4629      	mov	r1, r5
 8001634:	f7ff fa1e 	bl	8000a74 <__aeabi_dcmplt>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <Part_I_PID_ADC+0x1e4>
 800163e:	4b29      	ldr	r3, [pc, #164]	@ (80016e4 <Part_I_PID_ADC+0x284>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

//		uint16_t errr = set_point - angular_position;
//		if(errr > 180) errr -= 360;
//		else if(errr < -180) errr += 360;
		if(set_point - angular_position > 0 ){ //CW
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <Part_I_PID_ADC+0x254>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <Part_I_PID_ADC+0x258>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	dd0c      	ble.n	800166e <Part_I_PID_ADC+0x20e>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800165a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165e:	f002 ff21 	bl	80044a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2110      	movs	r1, #16
 8001666:	4822      	ldr	r0, [pc, #136]	@ (80016f0 <Part_I_PID_ADC+0x290>)
 8001668:	f002 ff1c 	bl	80044a4 <HAL_GPIO_WritePin>



	}

}
 800166c:	e013      	b.n	8001696 <Part_I_PID_ADC+0x236>
		else if(set_point - angular_position < 0 ){ //CCW
 800166e:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <Part_I_PID_ADC+0x254>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <Part_I_PID_ADC+0x258>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	da0b      	bge.n	8001696 <Part_I_PID_ADC+0x236>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001684:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001688:	f002 ff0c 	bl	80044a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	2110      	movs	r1, #16
 8001690:	4817      	ldr	r0, [pc, #92]	@ (80016f0 <Part_I_PID_ADC+0x290>)
 8001692:	f002 ff07 	bl	80044a4 <HAL_GPIO_WritePin>
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40768000 	.word	0x40768000
 80016a8:	00000000 	.word	0x00000000
 80016ac:	40b38800 	.word	0x40b38800
 80016b0:	200002cc 	.word	0x200002cc
 80016b4:	200002a2 	.word	0x200002a2
 80016b8:	200002a0 	.word	0x200002a0
 80016bc:	20000290 	.word	0x20000290
 80016c0:	40768000 	.word	0x40768000
 80016c4:	20000298 	.word	0x20000298
 80016c8:	2000028c 	.word	0x2000028c
 80016cc:	200002a8 	.word	0x200002a8
 80016d0:	2000027c 	.word	0x2000027c
 80016d4:	40040000 	.word	0x40040000
 80016d8:	20000280 	.word	0x20000280
 80016dc:	40280000 	.word	0x40280000
 80016e0:	20000278 	.word	0x20000278
 80016e4:	20000288 	.word	0x20000288
 80016e8:	20000228 	.word	0x20000228
 80016ec:	401c0000 	.word	0x401c0000
 80016f0:	48000800 	.word	0x48000800

080016f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001704:	d10d      	bne.n	8001722 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		Mode = (Mode + 1) % 3;
 8001706:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	1c59      	adds	r1, r3, #1
 800170c:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <HAL_GPIO_EXTI_Callback+0x40>)
 800170e:	fb83 3201 	smull	r3, r2, r3, r1
 8001712:	17cb      	asrs	r3, r1, #31
 8001714:	1ad2      	subs	r2, r2, r3
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	1aca      	subs	r2, r1, r3
 800171e:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001720:	601a      	str	r2, [r3, #0]
	}
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000274 	.word	0x20000274
 8001734:	55555556 	.word	0x55555556

08001738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
}
 800173e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <Error_Handler+0x8>

08001744 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <HAL_MspInit+0x44>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174e:	4a0e      	ldr	r2, [pc, #56]	@ (8001788 <HAL_MspInit+0x44>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6613      	str	r3, [r2, #96]	@ 0x60
 8001756:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <HAL_MspInit+0x44>)
 8001758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <HAL_MspInit+0x44>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001766:	4a08      	ldr	r2, [pc, #32]	@ (8001788 <HAL_MspInit+0x44>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800176c:	6593      	str	r3, [r2, #88]	@ 0x58
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_MspInit+0x44>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800177a:	f002 ff67 	bl	800464c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b09e      	sub	sp, #120	@ 0x78
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	2254      	movs	r2, #84	@ 0x54
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f006 f94f 	bl	8007a50 <memset>
  if(hadc->Instance==ADC1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017ba:	d167      	bne.n	800188c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80017bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80017c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80017c6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 fc7b 	bl	80050c8 <HAL_RCCEx_PeriphCLKConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80017d8:	f7ff ffae 	bl	8001738 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001894 <HAL_ADC_MspInit+0x108>)
 80017de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001894 <HAL_ADC_MspInit+0x108>)
 80017e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001894 <HAL_ADC_MspInit+0x108>)
 80017ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	4b27      	ldr	r3, [pc, #156]	@ (8001894 <HAL_ADC_MspInit+0x108>)
 80017f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f8:	4a26      	ldr	r2, [pc, #152]	@ (8001894 <HAL_ADC_MspInit+0x108>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001800:	4b24      	ldr	r3, [pc, #144]	@ (8001894 <HAL_ADC_MspInit+0x108>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800180c:	2303      	movs	r3, #3
 800180e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001810:	2303      	movs	r3, #3
 8001812:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800181c:	4619      	mov	r1, r3
 800181e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001822:	f002 fcbd 	bl	80041a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001826:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <HAL_ADC_MspInit+0x10c>)
 8001828:	4a1c      	ldr	r2, [pc, #112]	@ (800189c <HAL_ADC_MspInit+0x110>)
 800182a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800182c:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <HAL_ADC_MspInit+0x10c>)
 800182e:	2205      	movs	r2, #5
 8001830:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001832:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <HAL_ADC_MspInit+0x10c>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <HAL_ADC_MspInit+0x10c>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <HAL_ADC_MspInit+0x10c>)
 8001840:	2280      	movs	r2, #128	@ 0x80
 8001842:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <HAL_ADC_MspInit+0x10c>)
 8001846:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800184a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <HAL_ADC_MspInit+0x10c>)
 800184e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001852:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <HAL_ADC_MspInit+0x10c>)
 8001856:	2220      	movs	r2, #32
 8001858:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800185a:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <HAL_ADC_MspInit+0x10c>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001860:	480d      	ldr	r0, [pc, #52]	@ (8001898 <HAL_ADC_MspInit+0x10c>)
 8001862:	f002 fa2b 	bl	8003cbc <HAL_DMA_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800186c:	f7ff ff64 	bl	8001738 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a09      	ldr	r2, [pc, #36]	@ (8001898 <HAL_ADC_MspInit+0x10c>)
 8001874:	655a      	str	r2, [r3, #84]	@ 0x54
 8001876:	4a08      	ldr	r2, [pc, #32]	@ (8001898 <HAL_ADC_MspInit+0x10c>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	2012      	movs	r0, #18
 8001882:	f002 f9e6 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001886:	2012      	movs	r0, #18
 8001888:	f002 f9fd 	bl	8003c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800188c:	bf00      	nop
 800188e:	3778      	adds	r7, #120	@ 0x78
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000
 8001898:	200000e8 	.word	0x200000e8
 800189c:	40020008 	.word	0x40020008

080018a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b09e      	sub	sp, #120	@ 0x78
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	2254      	movs	r2, #84	@ 0x54
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f006 f8c5 	bl	8007a50 <memset>
  if(huart->Instance==LPUART1)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001948 <HAL_UART_MspInit+0xa8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d136      	bne.n	800193e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018d0:	2320      	movs	r3, #32
 80018d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 fbf3 	bl	80050c8 <HAL_RCCEx_PeriphCLKConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018e8:	f7ff ff26 	bl	8001738 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018ec:	4b17      	ldr	r3, [pc, #92]	@ (800194c <HAL_UART_MspInit+0xac>)
 80018ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f0:	4a16      	ldr	r2, [pc, #88]	@ (800194c <HAL_UART_MspInit+0xac>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <HAL_UART_MspInit+0xac>)
 80018fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <HAL_UART_MspInit+0xac>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001908:	4a10      	ldr	r2, [pc, #64]	@ (800194c <HAL_UART_MspInit+0xac>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001910:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <HAL_UART_MspInit+0xac>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800191c:	230c      	movs	r3, #12
 800191e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800192c:	230c      	movs	r3, #12
 800192e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001934:	4619      	mov	r1, r3
 8001936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800193a:	f002 fc31 	bl	80041a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800193e:	bf00      	nop
 8001940:	3778      	adds	r7, #120	@ 0x78
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40008000 	.word	0x40008000
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001960:	d114      	bne.n	800198c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001962:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <HAL_TIM_Base_MspInit+0x68>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001966:	4a14      	ldr	r2, [pc, #80]	@ (80019b8 <HAL_TIM_Base_MspInit+0x68>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6593      	str	r3, [r2, #88]	@ 0x58
 800196e:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <HAL_TIM_Base_MspInit+0x68>)
 8001970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	201c      	movs	r0, #28
 8001980:	f002 f967 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001984:	201c      	movs	r0, #28
 8001986:	f002 f97e 	bl	8003c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800198a:	e010      	b.n	80019ae <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	@ (80019bc <HAL_TIM_Base_MspInit+0x6c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d10b      	bne.n	80019ae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001996:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <HAL_TIM_Base_MspInit+0x68>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199a:	4a07      	ldr	r2, [pc, #28]	@ (80019b8 <HAL_TIM_Base_MspInit+0x68>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <HAL_TIM_Base_MspInit+0x68>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40000400 	.word	0x40000400

080019c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a11      	ldr	r2, [pc, #68]	@ (8001a24 <HAL_TIM_MspPostInit+0x64>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d11c      	bne.n	8001a1c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <HAL_TIM_MspPostInit+0x68>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e6:	4a10      	ldr	r2, [pc, #64]	@ (8001a28 <HAL_TIM_MspPostInit+0x68>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <HAL_TIM_MspPostInit+0x68>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019fa:	2340      	movs	r3, #64	@ 0x40
 80019fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4619      	mov	r1, r3
 8001a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a18:	f002 fbc2 	bl	80041a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	3720      	adds	r7, #32
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40000400 	.word	0x40000400
 8001a28:	40021000 	.word	0x40021000

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <NMI_Handler+0x4>

08001a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <MemManage_Handler+0x4>

08001a44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a82:	f000 f8b7 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a90:	4802      	ldr	r0, [pc, #8]	@ (8001a9c <DMA1_Channel1_IRQHandler+0x10>)
 8001a92:	f002 fa36 	bl	8003f02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200000e8 	.word	0x200000e8

08001aa0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001aa4:	4802      	ldr	r0, [pc, #8]	@ (8001ab0 <ADC1_2_IRQHandler+0x10>)
 8001aa6:	f000 fdb9 	bl	800261c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000007c 	.word	0x2000007c

08001ab4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ab8:	4802      	ldr	r0, [pc, #8]	@ (8001ac4 <TIM2_IRQHandler+0x10>)
 8001aba:	f004 f807 	bl	8005acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200001dc 	.word	0x200001dc

08001ac8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001acc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ad0:	f002 fd00 	bl	80044d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <SystemInit+0x20>)
 8001ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae2:	4a05      	ldr	r2, [pc, #20]	@ (8001af8 <SystemInit+0x20>)
 8001ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001afc:	480d      	ldr	r0, [pc, #52]	@ (8001b34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001afe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b00:	f7ff ffea 	bl	8001ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b04:	480c      	ldr	r0, [pc, #48]	@ (8001b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b06:	490d      	ldr	r1, [pc, #52]	@ (8001b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b08:	4a0d      	ldr	r2, [pc, #52]	@ (8001b40 <LoopForever+0xe>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b48 <LoopForever+0x16>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f005 ff9f 	bl	8007a6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b2e:	f7ff f97f 	bl	8000e30 <main>

08001b32 <LoopForever>:

LoopForever:
    b LoopForever
 8001b32:	e7fe      	b.n	8001b32 <LoopForever>
  ldr   r0, =_estack
 8001b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b40:	08007da0 	.word	0x08007da0
  ldr r2, =_sbss
 8001b44:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001b48:	2000040c 	.word	0x2000040c

08001b4c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC3_IRQHandler>

08001b4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f002 f86f 	bl	8003c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f000 f80e 	bl	8001b80 <HAL_InitTick>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	71fb      	strb	r3, [r7, #7]
 8001b6e:	e001      	b.n	8001b74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b70:	f7ff fde8 	bl	8001744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b74:	79fb      	ldrb	r3, [r7, #7]

}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b8c:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <HAL_InitTick+0x68>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d022      	beq.n	8001bda <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <HAL_InitTick+0x6c>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <HAL_InitTick+0x68>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 f87a 	bl	8003ca2 <HAL_SYSTICK_Config>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	d809      	bhi.n	8001bce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc2:	f002 f846 	bl	8003c52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <HAL_InitTick+0x70>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	e007      	b.n	8001bde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e004      	b.n	8001bde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e001      	b.n	8001bde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000008 	.word	0x20000008
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_IncTick+0x1c>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_IncTick+0x20>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a03      	ldr	r2, [pc, #12]	@ (8001c10 <HAL_IncTick+0x1c>)
 8001c04:	6013      	str	r3, [r2, #0]
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	200002d0 	.word	0x200002d0
 8001c14:	20000008 	.word	0x20000008

08001c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <HAL_GetTick+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200002d0 	.word	0x200002d0

08001c30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	609a      	str	r2, [r3, #8]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3360      	adds	r3, #96	@ 0x60
 8001caa:	461a      	mov	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <LL_ADC_SetOffset+0x44>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cd0:	bf00      	nop
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	03fff000 	.word	0x03fff000

08001ce0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3360      	adds	r3, #96	@ 0x60
 8001cee:	461a      	mov	r2, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3360      	adds	r3, #96	@ 0x60
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d36:	bf00      	nop
 8001d38:	371c      	adds	r7, #28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b087      	sub	sp, #28
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3360      	adds	r3, #96	@ 0x60
 8001d52:	461a      	mov	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d6c:	bf00      	nop
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3360      	adds	r3, #96	@ 0x60
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001da2:	bf00      	nop
 8001da4:	371c      	adds	r7, #28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	615a      	str	r2, [r3, #20]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b087      	sub	sp, #28
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3330      	adds	r3, #48	@ 0x30
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	4413      	add	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	211f      	movs	r1, #31
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	401a      	ands	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	f003 011f 	and.w	r1, r3, #31
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	431a      	orrs	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e46:	bf00      	nop
 8001e48:	371c      	adds	r7, #28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3314      	adds	r3, #20
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	0e5b      	lsrs	r3, r3, #25
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	4413      	add	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	0d1b      	lsrs	r3, r3, #20
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	2107      	movs	r1, #7
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	401a      	ands	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	0d1b      	lsrs	r3, r3, #20
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	401a      	ands	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0318 	and.w	r3, r3, #24
 8001ef2:	4908      	ldr	r1, [pc, #32]	@ (8001f14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ef4:	40d9      	lsrs	r1, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	400b      	ands	r3, r1
 8001efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efe:	431a      	orrs	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	0007ffff 	.word	0x0007ffff

08001f18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 031f 	and.w	r3, r3, #31
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6093      	str	r3, [r2, #8]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f88:	d101      	bne.n	8001f8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001fac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fb0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fd8:	d101      	bne.n	8001fde <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ffc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002024:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002028:	f043 0202 	orr.w	r2, r3, #2
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <LL_ADC_IsEnabled+0x18>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <LL_ADC_IsEnabled+0x1a>
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b02      	cmp	r3, #2
 8002074:	d101      	bne.n	800207a <LL_ADC_IsDisableOngoing+0x18>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <LL_ADC_IsDisableOngoing+0x1a>
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002098:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800209c:	f043 0204 	orr.w	r2, r3, #4
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d101      	bne.n	80020c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d101      	bne.n	80020ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b089      	sub	sp, #36	@ 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e1a9      	b.n	800246a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff fb31 	bl	800178c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff19 	bl	8001f74 <LL_ADC_IsDeepPowerDownEnabled>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d004      	beq.n	8002152 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff feff 	bl	8001f50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff34 	bl	8001fc4 <LL_ADC_IsInternalRegulatorEnabled>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d115      	bne.n	800218e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff18 	bl	8001f9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800216c:	4b9c      	ldr	r3, [pc, #624]	@ (80023e0 <HAL_ADC_Init+0x2e4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	099b      	lsrs	r3, r3, #6
 8002172:	4a9c      	ldr	r2, [pc, #624]	@ (80023e4 <HAL_ADC_Init+0x2e8>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	099b      	lsrs	r3, r3, #6
 800217a:	3301      	adds	r3, #1
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002180:	e002      	b.n	8002188 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3b01      	subs	r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f9      	bne.n	8002182 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff16 	bl	8001fc4 <LL_ADC_IsInternalRegulatorEnabled>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10d      	bne.n	80021ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a2:	f043 0210 	orr.w	r2, r3, #16
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ae:	f043 0201 	orr.w	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff76 	bl	80020b0 <LL_ADC_REG_IsConversionOngoing>
 80021c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f040 8142 	bne.w	8002458 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 813e 	bne.w	8002458 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021e4:	f043 0202 	orr.w	r2, r3, #2
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff23 	bl	800203c <LL_ADC_IsEnabled>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d141      	bne.n	8002280 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002204:	d004      	beq.n	8002210 <HAL_ADC_Init+0x114>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a77      	ldr	r2, [pc, #476]	@ (80023e8 <HAL_ADC_Init+0x2ec>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d10f      	bne.n	8002230 <HAL_ADC_Init+0x134>
 8002210:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002214:	f7ff ff12 	bl	800203c <LL_ADC_IsEnabled>
 8002218:	4604      	mov	r4, r0
 800221a:	4873      	ldr	r0, [pc, #460]	@ (80023e8 <HAL_ADC_Init+0x2ec>)
 800221c:	f7ff ff0e 	bl	800203c <LL_ADC_IsEnabled>
 8002220:	4603      	mov	r3, r0
 8002222:	4323      	orrs	r3, r4
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	e012      	b.n	8002256 <HAL_ADC_Init+0x15a>
 8002230:	486e      	ldr	r0, [pc, #440]	@ (80023ec <HAL_ADC_Init+0x2f0>)
 8002232:	f7ff ff03 	bl	800203c <LL_ADC_IsEnabled>
 8002236:	4604      	mov	r4, r0
 8002238:	486d      	ldr	r0, [pc, #436]	@ (80023f0 <HAL_ADC_Init+0x2f4>)
 800223a:	f7ff feff 	bl	800203c <LL_ADC_IsEnabled>
 800223e:	4603      	mov	r3, r0
 8002240:	431c      	orrs	r4, r3
 8002242:	486c      	ldr	r0, [pc, #432]	@ (80023f4 <HAL_ADC_Init+0x2f8>)
 8002244:	f7ff fefa 	bl	800203c <LL_ADC_IsEnabled>
 8002248:	4603      	mov	r3, r0
 800224a:	4323      	orrs	r3, r4
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf0c      	ite	eq
 8002250:	2301      	moveq	r3, #1
 8002252:	2300      	movne	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d012      	beq.n	8002280 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002262:	d004      	beq.n	800226e <HAL_ADC_Init+0x172>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a5f      	ldr	r2, [pc, #380]	@ (80023e8 <HAL_ADC_Init+0x2ec>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_ADC_Init+0x176>
 800226e:	4a62      	ldr	r2, [pc, #392]	@ (80023f8 <HAL_ADC_Init+0x2fc>)
 8002270:	e000      	b.n	8002274 <HAL_ADC_Init+0x178>
 8002272:	4a62      	ldr	r2, [pc, #392]	@ (80023fc <HAL_ADC_Init+0x300>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f7ff fcd8 	bl	8001c30 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7f5b      	ldrb	r3, [r3, #29]
 8002284:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800228a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002290:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002296:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800229e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d106      	bne.n	80022bc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b2:	3b01      	subs	r3, #1
 80022b4:	045b      	lsls	r3, r3, #17
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d009      	beq.n	80022d8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	4b48      	ldr	r3, [pc, #288]	@ (8002400 <HAL_ADC_Init+0x304>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	69b9      	ldr	r1, [r7, #24]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fee5 	bl	80020d6 <LL_ADC_INJ_IsConversionOngoing>
 800230c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d17f      	bne.n	8002414 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d17c      	bne.n	8002414 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800231e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002326:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002336:	f023 0302 	bic.w	r3, r3, #2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	69b9      	ldr	r1, [r7, #24]
 8002340:	430b      	orrs	r3, r1
 8002342:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d017      	beq.n	800237c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800235a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002364:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002368:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6911      	ldr	r1, [r2, #16]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	430b      	orrs	r3, r1
 8002376:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800237a:	e013      	b.n	80023a4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800238a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800239c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023a0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d12a      	bne.n	8002404 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80023b8:	f023 0304 	bic.w	r3, r3, #4
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023c4:	4311      	orrs	r1, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80023ca:	4311      	orrs	r1, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023d0:	430a      	orrs	r2, r1
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0201 	orr.w	r2, r2, #1
 80023dc:	611a      	str	r2, [r3, #16]
 80023de:	e019      	b.n	8002414 <HAL_ADC_Init+0x318>
 80023e0:	20000000 	.word	0x20000000
 80023e4:	053e2d63 	.word	0x053e2d63
 80023e8:	50000100 	.word	0x50000100
 80023ec:	50000400 	.word	0x50000400
 80023f0:	50000500 	.word	0x50000500
 80023f4:	50000600 	.word	0x50000600
 80023f8:	50000300 	.word	0x50000300
 80023fc:	50000700 	.word	0x50000700
 8002400:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d10c      	bne.n	8002436 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	f023 010f 	bic.w	r1, r3, #15
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	1e5a      	subs	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	631a      	str	r2, [r3, #48]	@ 0x30
 8002434:	e007      	b.n	8002446 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 020f 	bic.w	r2, r2, #15
 8002444:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244a:	f023 0303 	bic.w	r3, r3, #3
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002456:	e007      	b.n	8002468 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245c:	f043 0210 	orr.w	r2, r3, #16
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002468:	7ffb      	ldrb	r3, [r7, #31]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	@ 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd90      	pop	{r4, r7, pc}
 8002472:	bf00      	nop

08002474 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002488:	d004      	beq.n	8002494 <HAL_ADC_Start_DMA+0x20>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a5a      	ldr	r2, [pc, #360]	@ (80025f8 <HAL_ADC_Start_DMA+0x184>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d101      	bne.n	8002498 <HAL_ADC_Start_DMA+0x24>
 8002494:	4b59      	ldr	r3, [pc, #356]	@ (80025fc <HAL_ADC_Start_DMA+0x188>)
 8002496:	e000      	b.n	800249a <HAL_ADC_Start_DMA+0x26>
 8002498:	4b59      	ldr	r3, [pc, #356]	@ (8002600 <HAL_ADC_Start_DMA+0x18c>)
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fd3c 	bl	8001f18 <LL_ADC_GetMultimode>
 80024a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fe02 	bl	80020b0 <LL_ADC_REG_IsConversionOngoing>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 809b 	bne.w	80025ea <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_ADC_Start_DMA+0x4e>
 80024be:	2302      	movs	r3, #2
 80024c0:	e096      	b.n	80025f0 <HAL_ADC_Start_DMA+0x17c>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a4d      	ldr	r2, [pc, #308]	@ (8002604 <HAL_ADC_Start_DMA+0x190>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d008      	beq.n	80024e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d002      	beq.n	80024e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	2b09      	cmp	r3, #9
 80024e4:	d17a      	bne.n	80025dc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 ff60 	bl	80033ac <ADC_Enable>
 80024ec:	4603      	mov	r3, r0
 80024ee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80024f0:	7dfb      	ldrb	r3, [r7, #23]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d16d      	bne.n	80025d2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a3a      	ldr	r2, [pc, #232]	@ (80025f8 <HAL_ADC_Start_DMA+0x184>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d009      	beq.n	8002528 <HAL_ADC_Start_DMA+0xb4>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a3b      	ldr	r2, [pc, #236]	@ (8002608 <HAL_ADC_Start_DMA+0x194>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d002      	beq.n	8002524 <HAL_ADC_Start_DMA+0xb0>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	e003      	b.n	800252c <HAL_ADC_Start_DMA+0xb8>
 8002524:	4b39      	ldr	r3, [pc, #228]	@ (800260c <HAL_ADC_Start_DMA+0x198>)
 8002526:	e001      	b.n	800252c <HAL_ADC_Start_DMA+0xb8>
 8002528:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	4293      	cmp	r3, r2
 8002532:	d002      	beq.n	800253a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d105      	bne.n	8002546 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d006      	beq.n	8002560 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002556:	f023 0206 	bic.w	r2, r3, #6
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	661a      	str	r2, [r3, #96]	@ 0x60
 800255e:	e002      	b.n	8002566 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256a:	4a29      	ldr	r2, [pc, #164]	@ (8002610 <HAL_ADC_Start_DMA+0x19c>)
 800256c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002572:	4a28      	ldr	r2, [pc, #160]	@ (8002614 <HAL_ADC_Start_DMA+0x1a0>)
 8002574:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257a:	4a27      	ldr	r2, [pc, #156]	@ (8002618 <HAL_ADC_Start_DMA+0x1a4>)
 800257c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	221c      	movs	r2, #28
 8002584:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0210 	orr.w	r2, r2, #16
 800259c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0201 	orr.w	r2, r2, #1
 80025ac:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3340      	adds	r3, #64	@ 0x40
 80025b8:	4619      	mov	r1, r3
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f001 fc25 	bl	8003e0c <HAL_DMA_Start_IT>
 80025c2:	4603      	mov	r3, r0
 80025c4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fd5c 	bl	8002088 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80025d0:	e00d      	b.n	80025ee <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80025da:	e008      	b.n	80025ee <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80025e8:	e001      	b.n	80025ee <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025ea:	2302      	movs	r3, #2
 80025ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	50000100 	.word	0x50000100
 80025fc:	50000300 	.word	0x50000300
 8002600:	50000700 	.word	0x50000700
 8002604:	50000600 	.word	0x50000600
 8002608:	50000500 	.word	0x50000500
 800260c:	50000400 	.word	0x50000400
 8002610:	08003597 	.word	0x08003597
 8002614:	0800366f 	.word	0x0800366f
 8002618:	0800368b 	.word	0x0800368b

0800261c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	@ 0x28
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002640:	d004      	beq.n	800264c <HAL_ADC_IRQHandler+0x30>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a8e      	ldr	r2, [pc, #568]	@ (8002880 <HAL_ADC_IRQHandler+0x264>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d101      	bne.n	8002650 <HAL_ADC_IRQHandler+0x34>
 800264c:	4b8d      	ldr	r3, [pc, #564]	@ (8002884 <HAL_ADC_IRQHandler+0x268>)
 800264e:	e000      	b.n	8002652 <HAL_ADC_IRQHandler+0x36>
 8002650:	4b8d      	ldr	r3, [pc, #564]	@ (8002888 <HAL_ADC_IRQHandler+0x26c>)
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fc60 	bl	8001f18 <LL_ADC_GetMultimode>
 8002658:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d017      	beq.n	8002694 <HAL_ADC_IRQHandler+0x78>
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d012      	beq.n	8002694 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	d105      	bne.n	8002686 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f001 f8f6 	bl	8003878 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2202      	movs	r2, #2
 8002692:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <HAL_ADC_IRQHandler+0x8c>
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10b      	bne.n	80026c0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 8094 	beq.w	80027dc <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 808e 	beq.w	80027dc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d105      	bne.n	80026d8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fb79 	bl	8001dd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d072      	beq.n	80027ce <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a64      	ldr	r2, [pc, #400]	@ (8002880 <HAL_ADC_IRQHandler+0x264>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d009      	beq.n	8002706 <HAL_ADC_IRQHandler+0xea>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a65      	ldr	r2, [pc, #404]	@ (800288c <HAL_ADC_IRQHandler+0x270>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d002      	beq.n	8002702 <HAL_ADC_IRQHandler+0xe6>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	e003      	b.n	800270a <HAL_ADC_IRQHandler+0xee>
 8002702:	4b63      	ldr	r3, [pc, #396]	@ (8002890 <HAL_ADC_IRQHandler+0x274>)
 8002704:	e001      	b.n	800270a <HAL_ADC_IRQHandler+0xee>
 8002706:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	4293      	cmp	r3, r2
 8002710:	d008      	beq.n	8002724 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b05      	cmp	r3, #5
 800271c:	d002      	beq.n	8002724 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b09      	cmp	r3, #9
 8002722:	d104      	bne.n	800272e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	623b      	str	r3, [r7, #32]
 800272c:	e014      	b.n	8002758 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a53      	ldr	r2, [pc, #332]	@ (8002880 <HAL_ADC_IRQHandler+0x264>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_ADC_IRQHandler+0x130>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a53      	ldr	r2, [pc, #332]	@ (800288c <HAL_ADC_IRQHandler+0x270>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d002      	beq.n	8002748 <HAL_ADC_IRQHandler+0x12c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	e003      	b.n	8002750 <HAL_ADC_IRQHandler+0x134>
 8002748:	4b51      	ldr	r3, [pc, #324]	@ (8002890 <HAL_ADC_IRQHandler+0x274>)
 800274a:	e001      	b.n	8002750 <HAL_ADC_IRQHandler+0x134>
 800274c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002750:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d135      	bne.n	80027ce <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b08      	cmp	r3, #8
 800276e:	d12e      	bne.n	80027ce <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fc9b 	bl	80020b0 <LL_ADC_REG_IsConversionOngoing>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d11a      	bne.n	80027b6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 020c 	bic.w	r2, r2, #12
 800278e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002794:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d112      	bne.n	80027ce <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ac:	f043 0201 	orr.w	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027b4:	e00b      	b.n	80027ce <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ba:	f043 0210 	orr.w	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c6:	f043 0201 	orr.w	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f984 	bl	8002adc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	220c      	movs	r2, #12
 80027da:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <HAL_ADC_IRQHandler+0x1d4>
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10b      	bne.n	8002808 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80b3 	beq.w	8002962 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80ad 	beq.w	8002962 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	d105      	bne.n	8002820 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002818:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fb14 	bl	8001e52 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800282a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff facf 	bl	8001dd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002836:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a10      	ldr	r2, [pc, #64]	@ (8002880 <HAL_ADC_IRQHandler+0x264>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d009      	beq.n	8002856 <HAL_ADC_IRQHandler+0x23a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a11      	ldr	r2, [pc, #68]	@ (800288c <HAL_ADC_IRQHandler+0x270>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d002      	beq.n	8002852 <HAL_ADC_IRQHandler+0x236>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	e003      	b.n	800285a <HAL_ADC_IRQHandler+0x23e>
 8002852:	4b0f      	ldr	r3, [pc, #60]	@ (8002890 <HAL_ADC_IRQHandler+0x274>)
 8002854:	e001      	b.n	800285a <HAL_ADC_IRQHandler+0x23e>
 8002856:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	4293      	cmp	r3, r2
 8002860:	d008      	beq.n	8002874 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b06      	cmp	r3, #6
 800286c:	d002      	beq.n	8002874 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b07      	cmp	r3, #7
 8002872:	d10f      	bne.n	8002894 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	e01f      	b.n	80028be <HAL_ADC_IRQHandler+0x2a2>
 800287e:	bf00      	nop
 8002880:	50000100 	.word	0x50000100
 8002884:	50000300 	.word	0x50000300
 8002888:	50000700 	.word	0x50000700
 800288c:	50000500 	.word	0x50000500
 8002890:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a8b      	ldr	r2, [pc, #556]	@ (8002ac8 <HAL_ADC_IRQHandler+0x4ac>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_ADC_IRQHandler+0x296>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a8a      	ldr	r2, [pc, #552]	@ (8002acc <HAL_ADC_IRQHandler+0x4b0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d002      	beq.n	80028ae <HAL_ADC_IRQHandler+0x292>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	e003      	b.n	80028b6 <HAL_ADC_IRQHandler+0x29a>
 80028ae:	4b88      	ldr	r3, [pc, #544]	@ (8002ad0 <HAL_ADC_IRQHandler+0x4b4>)
 80028b0:	e001      	b.n	80028b6 <HAL_ADC_IRQHandler+0x29a>
 80028b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80028b6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d047      	beq.n	8002954 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <HAL_ADC_IRQHandler+0x2c2>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d03f      	beq.n	8002954 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d13a      	bne.n	8002954 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e8:	2b40      	cmp	r3, #64	@ 0x40
 80028ea:	d133      	bne.n	8002954 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d12e      	bne.n	8002954 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fbeb 	bl	80020d6 <LL_ADC_INJ_IsConversionOngoing>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d11a      	bne.n	800293c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002914:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d112      	bne.n	8002954 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002932:	f043 0201 	orr.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	65da      	str	r2, [r3, #92]	@ 0x5c
 800293a:	e00b      	b.n	8002954 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002940:	f043 0210 	orr.w	r2, r3, #16
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294c:	f043 0201 	orr.w	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 ff67 	bl	8003828 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2260      	movs	r2, #96	@ 0x60
 8002960:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002968:	2b00      	cmp	r3, #0
 800296a:	d011      	beq.n	8002990 <HAL_ADC_IRQHandler+0x374>
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00c      	beq.n	8002990 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f8be 	bl	8002b04 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2280      	movs	r2, #128	@ 0x80
 800298e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d012      	beq.n	80029c0 <HAL_ADC_IRQHandler+0x3a4>
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00d      	beq.n	80029c0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 ff4d 	bl	8003850 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d012      	beq.n	80029f0 <HAL_ADC_IRQHandler+0x3d4>
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00d      	beq.n	80029f0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 ff3f 	bl	8003864 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d043      	beq.n	8002a82 <HAL_ADC_IRQHandler+0x466>
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d03e      	beq.n	8002a82 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d102      	bne.n	8002a12 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a10:	e021      	b.n	8002a56 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d015      	beq.n	8002a44 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a20:	d004      	beq.n	8002a2c <HAL_ADC_IRQHandler+0x410>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a28      	ldr	r2, [pc, #160]	@ (8002ac8 <HAL_ADC_IRQHandler+0x4ac>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADC_IRQHandler+0x414>
 8002a2c:	4b29      	ldr	r3, [pc, #164]	@ (8002ad4 <HAL_ADC_IRQHandler+0x4b8>)
 8002a2e:	e000      	b.n	8002a32 <HAL_ADC_IRQHandler+0x416>
 8002a30:	4b29      	ldr	r3, [pc, #164]	@ (8002ad8 <HAL_ADC_IRQHandler+0x4bc>)
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fa7e 	bl	8001f34 <LL_ADC_GetMultiDMATransfer>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a42:	e008      	b.n	8002a56 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002a52:	2301      	movs	r3, #1
 8002a54:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d10e      	bne.n	8002a7a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a60:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6c:	f043 0202 	orr.w	r2, r3, #2
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f84f 	bl	8002b18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2210      	movs	r2, #16
 8002a80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d018      	beq.n	8002abe <HAL_ADC_IRQHandler+0x4a2>
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d013      	beq.n	8002abe <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa6:	f043 0208 	orr.w	r2, r3, #8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ab6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 febf 	bl	800383c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002abe:	bf00      	nop
 8002ac0:	3728      	adds	r7, #40	@ 0x28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	50000100 	.word	0x50000100
 8002acc:	50000500 	.word	0x50000500
 8002ad0:	50000400 	.word	0x50000400
 8002ad4:	50000300 	.word	0x50000300
 8002ad8:	50000700 	.word	0x50000700

08002adc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b0b6      	sub	sp, #216	@ 0xd8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d102      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x24>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	f000 bc13 	b.w	8003376 <HAL_ADC_ConfigChannel+0x84a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff faa7 	bl	80020b0 <LL_ADC_REG_IsConversionOngoing>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 83f3 	bne.w	8003350 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6859      	ldr	r1, [r3, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	f7ff f93f 	bl	8001dfa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fa95 	bl	80020b0 <LL_ADC_REG_IsConversionOngoing>
 8002b86:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff faa1 	bl	80020d6 <LL_ADC_INJ_IsConversionOngoing>
 8002b94:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f040 81d9 	bne.w	8002f54 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ba2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 81d4 	bne.w	8002f54 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f7ff f959 	bl	8001e78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff f8ed 	bl	8001dae <LL_ADC_SetSamplingTimeCommonConfig>
 8002bd4:	e00e      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6819      	ldr	r1, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	461a      	mov	r2, r3
 8002be4:	f7ff f948 	bl	8001e78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff f8dd 	bl	8001dae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	08db      	lsrs	r3, r3, #3
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d022      	beq.n	8002c5c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6919      	ldr	r1, [r3, #16]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c26:	f7ff f837 	bl	8001c98 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6919      	ldr	r1, [r3, #16]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f7ff f883 	bl	8001d42 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d102      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x126>
 8002c4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c50:	e000      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x128>
 8002c52:	2300      	movs	r3, #0
 8002c54:	461a      	mov	r2, r3
 8002c56:	f7ff f88f 	bl	8001d78 <LL_ADC_SetOffsetSaturation>
 8002c5a:	e17b      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff f83c 	bl	8001ce0 <LL_ADC_GetOffsetChannel>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x15c>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff f831 	bl	8001ce0 <LL_ADC_GetOffsetChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	0e9b      	lsrs	r3, r3, #26
 8002c82:	f003 021f 	and.w	r2, r3, #31
 8002c86:	e01e      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x19a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff f826 	bl	8001ce0 <LL_ADC_GetOffsetChannel>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ca6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002caa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	e004      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002cba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d105      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x1b2>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0e9b      	lsrs	r3, r3, #26
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	e018      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x1e4>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002cfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002d02:	2320      	movs	r3, #32
 8002d04:	e004      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002d06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d106      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe fff5 	bl	8001d0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2101      	movs	r1, #1
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe ffd9 	bl	8001ce0 <LL_ADC_GetOffsetChannel>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10a      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x222>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe ffce 	bl	8001ce0 <LL_ADC_GetOffsetChannel>
 8002d44:	4603      	mov	r3, r0
 8002d46:	0e9b      	lsrs	r3, r3, #26
 8002d48:	f003 021f 	and.w	r2, r3, #31
 8002d4c:	e01e      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x260>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2101      	movs	r1, #1
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe ffc3 	bl	8001ce0 <LL_ADC_GetOffsetChannel>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002d6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002d74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	e004      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002d80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d105      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x278>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0e9b      	lsrs	r3, r3, #26
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	e018      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x2aa>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002db8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002dbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002dc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e004      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d106      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2200      	movs	r2, #0
 8002de0:	2101      	movs	r1, #1
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe ff92 	bl	8001d0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2102      	movs	r1, #2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe ff76 	bl	8001ce0 <LL_ADC_GetOffsetChannel>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x2e8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2102      	movs	r1, #2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe ff6b 	bl	8001ce0 <LL_ADC_GetOffsetChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	0e9b      	lsrs	r3, r3, #26
 8002e0e:	f003 021f 	and.w	r2, r3, #31
 8002e12:	e01e      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x326>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2102      	movs	r1, #2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe ff60 	bl	8001ce0 <LL_ADC_GetOffsetChannel>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002e32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002e3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002e42:	2320      	movs	r3, #32
 8002e44:	e004      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002e46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d105      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x33e>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	0e9b      	lsrs	r3, r3, #26
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	e016      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x36c>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002e7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002e82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	e004      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002e8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d106      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2102      	movs	r1, #2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe ff31 	bl	8001d0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2103      	movs	r1, #3
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe ff15 	bl	8001ce0 <LL_ADC_GetOffsetChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x3aa>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2103      	movs	r1, #3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe ff0a 	bl	8001ce0 <LL_ADC_GetOffsetChannel>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	0e9b      	lsrs	r3, r3, #26
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	e017      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x3da>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2103      	movs	r1, #3
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe feff 	bl	8001ce0 <LL_ADC_GetOffsetChannel>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002eee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ef0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002ef2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002ef8:	2320      	movs	r3, #32
 8002efa:	e003      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002efc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d105      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x3f2>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	0e9b      	lsrs	r3, r3, #26
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	e011      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x416>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002f2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002f30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002f36:	2320      	movs	r3, #32
 8002f38:	e003      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002f3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d106      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2103      	movs	r1, #3
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fedc 	bl	8001d0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff f86f 	bl	800203c <LL_ADC_IsEnabled>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f040 813d 	bne.w	80031e0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6819      	ldr	r1, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f7fe ffac 	bl	8001ed0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4aa2      	ldr	r2, [pc, #648]	@ (8003208 <HAL_ADC_ConfigChannel+0x6dc>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	f040 812e 	bne.w	80031e0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10b      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x480>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	0e9b      	lsrs	r3, r3, #26
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	2b09      	cmp	r3, #9
 8002fa2:	bf94      	ite	ls
 8002fa4:	2301      	movls	r3, #1
 8002fa6:	2300      	movhi	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e019      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x4b4>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002fba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fbc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002fbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	e003      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002fc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2b09      	cmp	r3, #9
 8002fd8:	bf94      	ite	ls
 8002fda:	2301      	movls	r3, #1
 8002fdc:	2300      	movhi	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d079      	beq.n	80030d8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d107      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x4d4>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0e9b      	lsrs	r3, r3, #26
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	069b      	lsls	r3, r3, #26
 8002ffa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ffe:	e015      	b.n	800302c <HAL_ADC_ConfigChannel+0x500>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800300e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003010:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003018:	2320      	movs	r3, #32
 800301a:	e003      	b.n	8003024 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800301c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	3301      	adds	r3, #1
 8003026:	069b      	lsls	r3, r3, #26
 8003028:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003034:	2b00      	cmp	r3, #0
 8003036:	d109      	bne.n	800304c <HAL_ADC_ConfigChannel+0x520>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0e9b      	lsrs	r3, r3, #26
 800303e:	3301      	adds	r3, #1
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	e017      	b.n	800307c <HAL_ADC_ConfigChannel+0x550>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800305a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800305c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800305e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e003      	b.n	8003070 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003068:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	3301      	adds	r3, #1
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	2101      	movs	r1, #1
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	ea42 0103 	orr.w	r1, r2, r3
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10a      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x576>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	0e9b      	lsrs	r3, r3, #26
 8003092:	3301      	adds	r3, #1
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	051b      	lsls	r3, r3, #20
 80030a0:	e018      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x5a8>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80030b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80030ba:	2320      	movs	r3, #32
 80030bc:	e003      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80030be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	3301      	adds	r3, #1
 80030c8:	f003 021f 	and.w	r2, r3, #31
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030d4:	430b      	orrs	r3, r1
 80030d6:	e07e      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x5c8>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	0e9b      	lsrs	r3, r3, #26
 80030ea:	3301      	adds	r3, #1
 80030ec:	069b      	lsls	r3, r3, #26
 80030ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030f2:	e015      	b.n	8003120 <HAL_ADC_ConfigChannel+0x5f4>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003104:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800310c:	2320      	movs	r3, #32
 800310e:	e003      	b.n	8003118 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	3301      	adds	r3, #1
 800311a:	069b      	lsls	r3, r3, #26
 800311c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003128:	2b00      	cmp	r3, #0
 800312a:	d109      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x614>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0e9b      	lsrs	r3, r3, #26
 8003132:	3301      	adds	r3, #1
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	2101      	movs	r1, #1
 800313a:	fa01 f303 	lsl.w	r3, r1, r3
 800313e:	e017      	b.n	8003170 <HAL_ADC_ConfigChannel+0x644>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	61fb      	str	r3, [r7, #28]
  return result;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e003      	b.n	8003164 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	3301      	adds	r3, #1
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	2101      	movs	r1, #1
 800316c:	fa01 f303 	lsl.w	r3, r1, r3
 8003170:	ea42 0103 	orr.w	r1, r2, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10d      	bne.n	800319c <HAL_ADC_ConfigChannel+0x670>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	0e9b      	lsrs	r3, r3, #26
 8003186:	3301      	adds	r3, #1
 8003188:	f003 021f 	and.w	r2, r3, #31
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	3b1e      	subs	r3, #30
 8003194:	051b      	lsls	r3, r3, #20
 8003196:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800319a:	e01b      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x6a8>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	613b      	str	r3, [r7, #16]
  return result;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80031b4:	2320      	movs	r3, #32
 80031b6:	e003      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	3301      	adds	r3, #1
 80031c2:	f003 021f 	and.w	r2, r3, #31
 80031c6:	4613      	mov	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4413      	add	r3, r2
 80031cc:	3b1e      	subs	r3, #30
 80031ce:	051b      	lsls	r3, r3, #20
 80031d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031da:	4619      	mov	r1, r3
 80031dc:	f7fe fe4c 	bl	8001e78 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4b09      	ldr	r3, [pc, #36]	@ (800320c <HAL_ADC_ConfigChannel+0x6e0>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 80be 	beq.w	800336a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031f6:	d004      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x6d6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a04      	ldr	r2, [pc, #16]	@ (8003210 <HAL_ADC_ConfigChannel+0x6e4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d10a      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x6ec>
 8003202:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <HAL_ADC_ConfigChannel+0x6e8>)
 8003204:	e009      	b.n	800321a <HAL_ADC_ConfigChannel+0x6ee>
 8003206:	bf00      	nop
 8003208:	407f0000 	.word	0x407f0000
 800320c:	80080000 	.word	0x80080000
 8003210:	50000100 	.word	0x50000100
 8003214:	50000300 	.word	0x50000300
 8003218:	4b59      	ldr	r3, [pc, #356]	@ (8003380 <HAL_ADC_ConfigChannel+0x854>)
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe fd2e 	bl	8001c7c <LL_ADC_GetCommonPathInternalCh>
 8003220:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a56      	ldr	r2, [pc, #344]	@ (8003384 <HAL_ADC_ConfigChannel+0x858>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_ADC_ConfigChannel+0x70c>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a55      	ldr	r2, [pc, #340]	@ (8003388 <HAL_ADC_ConfigChannel+0x85c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d13a      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003238:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800323c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d134      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800324c:	d005      	beq.n	800325a <HAL_ADC_ConfigChannel+0x72e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a4e      	ldr	r2, [pc, #312]	@ (800338c <HAL_ADC_ConfigChannel+0x860>)
 8003254:	4293      	cmp	r3, r2
 8003256:	f040 8085 	bne.w	8003364 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003262:	d004      	beq.n	800326e <HAL_ADC_ConfigChannel+0x742>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a49      	ldr	r2, [pc, #292]	@ (8003390 <HAL_ADC_ConfigChannel+0x864>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d101      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x746>
 800326e:	4a49      	ldr	r2, [pc, #292]	@ (8003394 <HAL_ADC_ConfigChannel+0x868>)
 8003270:	e000      	b.n	8003274 <HAL_ADC_ConfigChannel+0x748>
 8003272:	4a43      	ldr	r2, [pc, #268]	@ (8003380 <HAL_ADC_ConfigChannel+0x854>)
 8003274:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003278:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800327c:	4619      	mov	r1, r3
 800327e:	4610      	mov	r0, r2
 8003280:	f7fe fce9 	bl	8001c56 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003284:	4b44      	ldr	r3, [pc, #272]	@ (8003398 <HAL_ADC_ConfigChannel+0x86c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	4a44      	ldr	r2, [pc, #272]	@ (800339c <HAL_ADC_ConfigChannel+0x870>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	099b      	lsrs	r3, r3, #6
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800329e:	e002      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f9      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032ac:	e05a      	b.n	8003364 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a3b      	ldr	r2, [pc, #236]	@ (80033a0 <HAL_ADC_ConfigChannel+0x874>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d125      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d11f      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a31      	ldr	r2, [pc, #196]	@ (8003390 <HAL_ADC_ConfigChannel+0x864>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d104      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x7ac>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a34      	ldr	r2, [pc, #208]	@ (80033a4 <HAL_ADC_ConfigChannel+0x878>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d047      	beq.n	8003368 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032e0:	d004      	beq.n	80032ec <HAL_ADC_ConfigChannel+0x7c0>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003390 <HAL_ADC_ConfigChannel+0x864>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d101      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x7c4>
 80032ec:	4a29      	ldr	r2, [pc, #164]	@ (8003394 <HAL_ADC_ConfigChannel+0x868>)
 80032ee:	e000      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x7c6>
 80032f0:	4a23      	ldr	r2, [pc, #140]	@ (8003380 <HAL_ADC_ConfigChannel+0x854>)
 80032f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032fa:	4619      	mov	r1, r3
 80032fc:	4610      	mov	r0, r2
 80032fe:	f7fe fcaa 	bl	8001c56 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003302:	e031      	b.n	8003368 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a27      	ldr	r2, [pc, #156]	@ (80033a8 <HAL_ADC_ConfigChannel+0x87c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d12d      	bne.n	800336a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800330e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d127      	bne.n	800336a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1c      	ldr	r2, [pc, #112]	@ (8003390 <HAL_ADC_ConfigChannel+0x864>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d022      	beq.n	800336a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800332c:	d004      	beq.n	8003338 <HAL_ADC_ConfigChannel+0x80c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a17      	ldr	r2, [pc, #92]	@ (8003390 <HAL_ADC_ConfigChannel+0x864>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x810>
 8003338:	4a16      	ldr	r2, [pc, #88]	@ (8003394 <HAL_ADC_ConfigChannel+0x868>)
 800333a:	e000      	b.n	800333e <HAL_ADC_ConfigChannel+0x812>
 800333c:	4a10      	ldr	r2, [pc, #64]	@ (8003380 <HAL_ADC_ConfigChannel+0x854>)
 800333e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003342:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003346:	4619      	mov	r1, r3
 8003348:	4610      	mov	r0, r2
 800334a:	f7fe fc84 	bl	8001c56 <LL_ADC_SetCommonPathInternalCh>
 800334e:	e00c      	b.n	800336a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003362:	e002      	b.n	800336a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003364:	bf00      	nop
 8003366:	e000      	b.n	800336a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003368:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003372:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003376:	4618      	mov	r0, r3
 8003378:	37d8      	adds	r7, #216	@ 0xd8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	50000700 	.word	0x50000700
 8003384:	c3210000 	.word	0xc3210000
 8003388:	90c00010 	.word	0x90c00010
 800338c:	50000600 	.word	0x50000600
 8003390:	50000100 	.word	0x50000100
 8003394:	50000300 	.word	0x50000300
 8003398:	20000000 	.word	0x20000000
 800339c:	053e2d63 	.word	0x053e2d63
 80033a0:	c7520000 	.word	0xc7520000
 80033a4:	50000500 	.word	0x50000500
 80033a8:	cb840000 	.word	0xcb840000

080033ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe fe3d 	bl	800203c <LL_ADC_IsEnabled>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d176      	bne.n	80034b6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	4b3c      	ldr	r3, [pc, #240]	@ (80034c0 <ADC_Enable+0x114>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00d      	beq.n	80033f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033da:	f043 0210 	orr.w	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e6:	f043 0201 	orr.w	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e062      	b.n	80034b8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fdf8 	bl	8001fec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003404:	d004      	beq.n	8003410 <ADC_Enable+0x64>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2e      	ldr	r2, [pc, #184]	@ (80034c4 <ADC_Enable+0x118>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d101      	bne.n	8003414 <ADC_Enable+0x68>
 8003410:	4b2d      	ldr	r3, [pc, #180]	@ (80034c8 <ADC_Enable+0x11c>)
 8003412:	e000      	b.n	8003416 <ADC_Enable+0x6a>
 8003414:	4b2d      	ldr	r3, [pc, #180]	@ (80034cc <ADC_Enable+0x120>)
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fc30 	bl	8001c7c <LL_ADC_GetCommonPathInternalCh>
 800341c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800341e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003422:	2b00      	cmp	r3, #0
 8003424:	d013      	beq.n	800344e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003426:	4b2a      	ldr	r3, [pc, #168]	@ (80034d0 <ADC_Enable+0x124>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	099b      	lsrs	r3, r3, #6
 800342c:	4a29      	ldr	r2, [pc, #164]	@ (80034d4 <ADC_Enable+0x128>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003440:	e002      	b.n	8003448 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3b01      	subs	r3, #1
 8003446:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f9      	bne.n	8003442 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800344e:	f7fe fbe3 	bl	8001c18 <HAL_GetTick>
 8003452:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003454:	e028      	b.n	80034a8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe fdee 	bl	800203c <LL_ADC_IsEnabled>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d104      	bne.n	8003470 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fdbe 	bl	8001fec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003470:	f7fe fbd2 	bl	8001c18 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d914      	bls.n	80034a8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b01      	cmp	r3, #1
 800348a:	d00d      	beq.n	80034a8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003490:	f043 0210 	orr.w	r2, r3, #16
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800349c:	f043 0201 	orr.w	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e007      	b.n	80034b8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d1cf      	bne.n	8003456 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	8000003f 	.word	0x8000003f
 80034c4:	50000100 	.word	0x50000100
 80034c8:	50000300 	.word	0x50000300
 80034cc:	50000700 	.word	0x50000700
 80034d0:	20000000 	.word	0x20000000
 80034d4:	053e2d63 	.word	0x053e2d63

080034d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe fdbc 	bl	8002062 <LL_ADC_IsDisableOngoing>
 80034ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fe fda3 	bl	800203c <LL_ADC_IsEnabled>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d047      	beq.n	800358c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d144      	bne.n	800358c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 030d 	and.w	r3, r3, #13
 800350c:	2b01      	cmp	r3, #1
 800350e:	d10c      	bne.n	800352a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe fd7d 	bl	8002014 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2203      	movs	r2, #3
 8003520:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003522:	f7fe fb79 	bl	8001c18 <HAL_GetTick>
 8003526:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003528:	e029      	b.n	800357e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352e:	f043 0210 	orr.w	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353a:	f043 0201 	orr.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e023      	b.n	800358e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003546:	f7fe fb67 	bl	8001c18 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d914      	bls.n	800357e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00d      	beq.n	800357e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003566:	f043 0210 	orr.w	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003572:	f043 0201 	orr.w	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e007      	b.n	800358e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1dc      	bne.n	8003546 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d14b      	bne.n	8003648 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d021      	beq.n	800360e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fc00 	bl	8001dd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d032      	beq.n	8003640 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d12b      	bne.n	8003640 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d11f      	bne.n	8003640 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003604:	f043 0201 	orr.w	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800360c:	e018      	b.n	8003640 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d111      	bne.n	8003640 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003620:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d105      	bne.n	8003640 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003638:	f043 0201 	orr.w	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f7ff fa4b 	bl	8002adc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003646:	e00e      	b.n	8003666 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f7ff fa5f 	bl	8002b18 <HAL_ADC_ErrorCallback>
}
 800365a:	e004      	b.n	8003666 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
}
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f7ff fa37 	bl	8002af0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003696:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a8:	f043 0204 	orr.w	r2, r3, #4
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f7ff fa31 	bl	8002b18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <LL_ADC_IsEnabled>:
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <LL_ADC_IsEnabled+0x18>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <LL_ADC_IsEnabled+0x1a>
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <LL_ADC_StartCalibration>:
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80036f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003700:	4313      	orrs	r3, r2
 8003702:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	609a      	str	r2, [r3, #8]
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <LL_ADC_IsCalibrationOnGoing>:
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003726:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800372a:	d101      	bne.n	8003730 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <LL_ADC_REG_IsConversionOngoing>:
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b04      	cmp	r3, #4
 8003750:	d101      	bne.n	8003756 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800376e:	2300      	movs	r3, #0
 8003770:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_ADCEx_Calibration_Start+0x1c>
 800377c:	2302      	movs	r3, #2
 800377e:	e04d      	b.n	800381c <HAL_ADCEx_Calibration_Start+0xb8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff fea5 	bl	80034d8 <ADC_Disable>
 800378e:	4603      	mov	r3, r0
 8003790:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d136      	bne.n	8003806 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80037a0:	f023 0302 	bic.w	r3, r3, #2
 80037a4:	f043 0202 	orr.w	r2, r3, #2
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6839      	ldr	r1, [r7, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff ff96 	bl	80036e4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80037b8:	e014      	b.n	80037e4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	3301      	adds	r3, #1
 80037be:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4a18      	ldr	r2, [pc, #96]	@ (8003824 <HAL_ADCEx_Calibration_Start+0xc0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d90d      	bls.n	80037e4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037cc:	f023 0312 	bic.w	r3, r3, #18
 80037d0:	f043 0210 	orr.w	r2, r3, #16
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e01b      	b.n	800381c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff ff94 	bl	8003716 <LL_ADC_IsCalibrationOnGoing>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e2      	bne.n	80037ba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f8:	f023 0303 	bic.w	r3, r3, #3
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003804:	e005      	b.n	8003812 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380a:	f043 0210 	orr.w	r2, r3, #16
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800381a:	7bfb      	ldrb	r3, [r7, #15]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	0004de01 	.word	0x0004de01

08003828 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b0a1      	sub	sp, #132	@ 0x84
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e0e7      	b.n	8003a7a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80038b2:	2300      	movs	r3, #0
 80038b4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80038b6:	2300      	movs	r3, #0
 80038b8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038c2:	d102      	bne.n	80038ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	e009      	b.n	80038de <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003a88 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d102      	bne.n	80038da <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80038d4:	4b6d      	ldr	r3, [pc, #436]	@ (8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	e001      	b.n	80038de <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038da:	2300      	movs	r3, #0
 80038dc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10b      	bne.n	80038fc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0be      	b.n	8003a7a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ff1d 	bl	800373e <LL_ADC_REG_IsConversionOngoing>
 8003904:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff ff17 	bl	800373e <LL_ADC_REG_IsConversionOngoing>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	f040 80a0 	bne.w	8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003918:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800391a:	2b00      	cmp	r3, #0
 800391c:	f040 809c 	bne.w	8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003928:	d004      	beq.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a55      	ldr	r2, [pc, #340]	@ (8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d101      	bne.n	8003938 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003934:	4b56      	ldr	r3, [pc, #344]	@ (8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003936:	e000      	b.n	800393a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003938:	4b56      	ldr	r3, [pc, #344]	@ (8003a94 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800393a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d04b      	beq.n	80039dc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003944:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003956:	035b      	lsls	r3, r3, #13
 8003958:	430b      	orrs	r3, r1
 800395a:	431a      	orrs	r2, r3
 800395c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800395e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003968:	d004      	beq.n	8003974 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a45      	ldr	r2, [pc, #276]	@ (8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d10f      	bne.n	8003994 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003974:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003978:	f7ff fea1 	bl	80036be <LL_ADC_IsEnabled>
 800397c:	4604      	mov	r4, r0
 800397e:	4841      	ldr	r0, [pc, #260]	@ (8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003980:	f7ff fe9d 	bl	80036be <LL_ADC_IsEnabled>
 8003984:	4603      	mov	r3, r0
 8003986:	4323      	orrs	r3, r4
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	e012      	b.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003994:	483c      	ldr	r0, [pc, #240]	@ (8003a88 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003996:	f7ff fe92 	bl	80036be <LL_ADC_IsEnabled>
 800399a:	4604      	mov	r4, r0
 800399c:	483b      	ldr	r0, [pc, #236]	@ (8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800399e:	f7ff fe8e 	bl	80036be <LL_ADC_IsEnabled>
 80039a2:	4603      	mov	r3, r0
 80039a4:	431c      	orrs	r4, r3
 80039a6:	483c      	ldr	r0, [pc, #240]	@ (8003a98 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80039a8:	f7ff fe89 	bl	80036be <LL_ADC_IsEnabled>
 80039ac:	4603      	mov	r3, r0
 80039ae:	4323      	orrs	r3, r4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d056      	beq.n	8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80039c6:	f023 030f 	bic.w	r3, r3, #15
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	6811      	ldr	r1, [r2, #0]
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	6892      	ldr	r2, [r2, #8]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	431a      	orrs	r2, r3
 80039d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039d8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039da:	e047      	b.n	8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039f0:	d004      	beq.n	80039fc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a23      	ldr	r2, [pc, #140]	@ (8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d10f      	bne.n	8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80039fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a00:	f7ff fe5d 	bl	80036be <LL_ADC_IsEnabled>
 8003a04:	4604      	mov	r4, r0
 8003a06:	481f      	ldr	r0, [pc, #124]	@ (8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a08:	f7ff fe59 	bl	80036be <LL_ADC_IsEnabled>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	4323      	orrs	r3, r4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e012      	b.n	8003a42 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003a1c:	481a      	ldr	r0, [pc, #104]	@ (8003a88 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a1e:	f7ff fe4e 	bl	80036be <LL_ADC_IsEnabled>
 8003a22:	4604      	mov	r4, r0
 8003a24:	4819      	ldr	r0, [pc, #100]	@ (8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a26:	f7ff fe4a 	bl	80036be <LL_ADC_IsEnabled>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	431c      	orrs	r4, r3
 8003a2e:	481a      	ldr	r0, [pc, #104]	@ (8003a98 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a30:	f7ff fe45 	bl	80036be <LL_ADC_IsEnabled>
 8003a34:	4603      	mov	r3, r0
 8003a36:	4323      	orrs	r3, r4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2301      	moveq	r3, #1
 8003a3e:	2300      	movne	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d012      	beq.n	8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a4e:	f023 030f 	bic.w	r3, r3, #15
 8003a52:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a54:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a56:	e009      	b.n	8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5c:	f043 0220 	orr.w	r2, r3, #32
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003a6a:	e000      	b.n	8003a6e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a76:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3784      	adds	r7, #132	@ 0x84
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd90      	pop	{r4, r7, pc}
 8003a82:	bf00      	nop
 8003a84:	50000100 	.word	0x50000100
 8003a88:	50000400 	.word	0x50000400
 8003a8c:	50000500 	.word	0x50000500
 8003a90:	50000300 	.word	0x50000300
 8003a94:	50000700 	.word	0x50000700
 8003a98:	50000600 	.word	0x50000600

08003a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ac4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ace:	4a04      	ldr	r2, [pc, #16]	@ (8003ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	60d3      	str	r3, [r2, #12]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae8:	4b04      	ldr	r3, [pc, #16]	@ (8003afc <__NVIC_GetPriorityGrouping+0x18>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	f003 0307 	and.w	r3, r3, #7
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	db0b      	blt.n	8003b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	f003 021f 	and.w	r2, r3, #31
 8003b18:	4907      	ldr	r1, [pc, #28]	@ (8003b38 <__NVIC_EnableIRQ+0x38>)
 8003b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	2001      	movs	r0, #1
 8003b22:	fa00 f202 	lsl.w	r2, r0, r2
 8003b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	e000e100 	.word	0xe000e100

08003b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	6039      	str	r1, [r7, #0]
 8003b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	db0a      	blt.n	8003b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	490c      	ldr	r1, [pc, #48]	@ (8003b88 <__NVIC_SetPriority+0x4c>)
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	0112      	lsls	r2, r2, #4
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	440b      	add	r3, r1
 8003b60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b64:	e00a      	b.n	8003b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	4908      	ldr	r1, [pc, #32]	@ (8003b8c <__NVIC_SetPriority+0x50>)
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	3b04      	subs	r3, #4
 8003b74:	0112      	lsls	r2, r2, #4
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	440b      	add	r3, r1
 8003b7a:	761a      	strb	r2, [r3, #24]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	e000e100 	.word	0xe000e100
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	@ 0x24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f1c3 0307 	rsb	r3, r3, #7
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	bf28      	it	cs
 8003bae:	2304      	movcs	r3, #4
 8003bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d902      	bls.n	8003bc0 <NVIC_EncodePriority+0x30>
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	3b03      	subs	r3, #3
 8003bbe:	e000      	b.n	8003bc2 <NVIC_EncodePriority+0x32>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	43d9      	mvns	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be8:	4313      	orrs	r3, r2
         );
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3724      	adds	r7, #36	@ 0x24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c08:	d301      	bcc.n	8003c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e00f      	b.n	8003c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c38 <SysTick_Config+0x40>)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c16:	210f      	movs	r1, #15
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	f7ff ff8e 	bl	8003b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c20:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <SysTick_Config+0x40>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c26:	4b04      	ldr	r3, [pc, #16]	@ (8003c38 <SysTick_Config+0x40>)
 8003c28:	2207      	movs	r2, #7
 8003c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	e000e010 	.word	0xe000e010

08003c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ff29 	bl	8003a9c <__NVIC_SetPriorityGrouping>
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b086      	sub	sp, #24
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	4603      	mov	r3, r0
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c60:	f7ff ff40 	bl	8003ae4 <__NVIC_GetPriorityGrouping>
 8003c64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	6978      	ldr	r0, [r7, #20]
 8003c6c:	f7ff ff90 	bl	8003b90 <NVIC_EncodePriority>
 8003c70:	4602      	mov	r2, r0
 8003c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ff5f 	bl	8003b3c <__NVIC_SetPriority>
}
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ff33 	bl	8003b00 <__NVIC_EnableIRQ>
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff ffa4 	bl	8003bf8 <SysTick_Config>
 8003cb0:	4603      	mov	r3, r0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e08d      	b.n	8003dea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4b47      	ldr	r3, [pc, #284]	@ (8003df4 <HAL_DMA_Init+0x138>)
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d80f      	bhi.n	8003cfa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	4b45      	ldr	r3, [pc, #276]	@ (8003df8 <HAL_DMA_Init+0x13c>)
 8003ce2:	4413      	add	r3, r2
 8003ce4:	4a45      	ldr	r2, [pc, #276]	@ (8003dfc <HAL_DMA_Init+0x140>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	091b      	lsrs	r3, r3, #4
 8003cec:	009a      	lsls	r2, r3, #2
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a42      	ldr	r2, [pc, #264]	@ (8003e00 <HAL_DMA_Init+0x144>)
 8003cf6:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cf8:	e00e      	b.n	8003d18 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4b40      	ldr	r3, [pc, #256]	@ (8003e04 <HAL_DMA_Init+0x148>)
 8003d02:	4413      	add	r3, r2
 8003d04:	4a3d      	ldr	r2, [pc, #244]	@ (8003dfc <HAL_DMA_Init+0x140>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	009a      	lsls	r2, r3, #2
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a3c      	ldr	r2, [pc, #240]	@ (8003e08 <HAL_DMA_Init+0x14c>)
 8003d16:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f9b6 	bl	80040dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d78:	d102      	bne.n	8003d80 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d94:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d010      	beq.n	8003dc0 <HAL_DMA_Init+0x104>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d80c      	bhi.n	8003dc0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f9d6 	bl	8004158 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	e008      	b.n	8003dd2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40020407 	.word	0x40020407
 8003df8:	bffdfff8 	.word	0xbffdfff8
 8003dfc:	cccccccd 	.word	0xcccccccd
 8003e00:	40020000 	.word	0x40020000
 8003e04:	bffdfbf8 	.word	0xbffdfbf8
 8003e08:	40020400 	.word	0x40020400

08003e0c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_DMA_Start_IT+0x20>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e066      	b.n	8003efa <HAL_DMA_Start_IT+0xee>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d155      	bne.n	8003eec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0201 	bic.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f8fb 	bl	8004060 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 020e 	orr.w	r2, r2, #14
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e00f      	b.n	8003ea4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0204 	bic.w	r2, r2, #4
 8003e92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 020a 	orr.w	r2, r2, #10
 8003ea2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ebc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ec0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ed8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e005      	b.n	8003ef8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	2204      	movs	r2, #4
 8003f24:	409a      	lsls	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d026      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x7a>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d021      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d107      	bne.n	8003f56 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0204 	bic.w	r2, r2, #4
 8003f54:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5a:	f003 021f 	and.w	r2, r3, #31
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	2104      	movs	r1, #4
 8003f64:	fa01 f202 	lsl.w	r2, r1, r2
 8003f68:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d071      	beq.n	8004056 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f7a:	e06c      	b.n	8004056 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2202      	movs	r2, #2
 8003f86:	409a      	lsls	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d02e      	beq.n	8003fee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d029      	beq.n	8003fee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 020a 	bic.w	r2, r2, #10
 8003fb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc4:	f003 021f 	and.w	r2, r3, #31
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	2102      	movs	r1, #2
 8003fce:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d038      	beq.n	8004056 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003fec:	e033      	b.n	8004056 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2208      	movs	r2, #8
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d02a      	beq.n	8004058 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d025      	beq.n	8004058 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 020e 	bic.w	r2, r2, #14
 800401a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004020:	f003 021f 	and.w	r2, r3, #31
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	2101      	movs	r1, #1
 800402a:	fa01 f202 	lsl.w	r2, r1, r2
 800402e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404a:	2b00      	cmp	r3, #0
 800404c:	d004      	beq.n	8004058 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004056:	bf00      	nop
 8004058:	bf00      	nop
}
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004076:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407c:	2b00      	cmp	r3, #0
 800407e:	d004      	beq.n	800408a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004088:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408e:	f003 021f 	and.w	r2, r3, #31
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	2101      	movs	r1, #1
 8004098:	fa01 f202 	lsl.w	r2, r1, r2
 800409c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	d108      	bne.n	80040c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040be:	e007      	b.n	80040d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	60da      	str	r2, [r3, #12]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	4b16      	ldr	r3, [pc, #88]	@ (8004144 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d802      	bhi.n	80040f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80040f0:	4b15      	ldr	r3, [pc, #84]	@ (8004148 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	e001      	b.n	80040fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80040f6:	4b15      	ldr	r3, [pc, #84]	@ (800414c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80040f8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	3b08      	subs	r3, #8
 8004106:	4a12      	ldr	r2, [pc, #72]	@ (8004150 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004114:	089b      	lsrs	r3, r3, #2
 8004116:	009a      	lsls	r2, r3, #2
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4413      	add	r3, r2
 800411c:	461a      	mov	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a0b      	ldr	r2, [pc, #44]	@ (8004154 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004126:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	2201      	movs	r2, #1
 8004130:	409a      	lsls	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40020407 	.word	0x40020407
 8004148:	40020800 	.word	0x40020800
 800414c:	40020820 	.word	0x40020820
 8004150:	cccccccd 	.word	0xcccccccd
 8004154:	40020880 	.word	0x40020880

08004158 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	461a      	mov	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a08      	ldr	r2, [pc, #32]	@ (800419c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800417a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3b01      	subs	r3, #1
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	2201      	movs	r2, #1
 8004186:	409a      	lsls	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	1000823f 	.word	0x1000823f
 800419c:	40020940 	.word	0x40020940

080041a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041ae:	e15a      	b.n	8004466 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	2101      	movs	r1, #1
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	4013      	ands	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 814c 	beq.w	8004460 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d005      	beq.n	80041e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d130      	bne.n	8004242 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	2203      	movs	r2, #3
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004216:	2201      	movs	r2, #1
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4013      	ands	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	f003 0201 	and.w	r2, r3, #1
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b03      	cmp	r3, #3
 800424c:	d017      	beq.n	800427e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	2203      	movs	r2, #3
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43db      	mvns	r3, r3
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4013      	ands	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d123      	bne.n	80042d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	08da      	lsrs	r2, r3, #3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3208      	adds	r2, #8
 8004292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004296:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	220f      	movs	r2, #15
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43db      	mvns	r3, r3
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4013      	ands	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	08da      	lsrs	r2, r3, #3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3208      	adds	r2, #8
 80042cc:	6939      	ldr	r1, [r7, #16]
 80042ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	2203      	movs	r2, #3
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43db      	mvns	r3, r3
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4013      	ands	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 0203 	and.w	r2, r3, #3
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 80a6 	beq.w	8004460 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004314:	4b5b      	ldr	r3, [pc, #364]	@ (8004484 <HAL_GPIO_Init+0x2e4>)
 8004316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004318:	4a5a      	ldr	r2, [pc, #360]	@ (8004484 <HAL_GPIO_Init+0x2e4>)
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004320:	4b58      	ldr	r3, [pc, #352]	@ (8004484 <HAL_GPIO_Init+0x2e4>)
 8004322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800432c:	4a56      	ldr	r2, [pc, #344]	@ (8004488 <HAL_GPIO_Init+0x2e8>)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	089b      	lsrs	r3, r3, #2
 8004332:	3302      	adds	r3, #2
 8004334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004338:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	220f      	movs	r2, #15
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4013      	ands	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004356:	d01f      	beq.n	8004398 <HAL_GPIO_Init+0x1f8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a4c      	ldr	r2, [pc, #304]	@ (800448c <HAL_GPIO_Init+0x2ec>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d019      	beq.n	8004394 <HAL_GPIO_Init+0x1f4>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a4b      	ldr	r2, [pc, #300]	@ (8004490 <HAL_GPIO_Init+0x2f0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d013      	beq.n	8004390 <HAL_GPIO_Init+0x1f0>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a4a      	ldr	r2, [pc, #296]	@ (8004494 <HAL_GPIO_Init+0x2f4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00d      	beq.n	800438c <HAL_GPIO_Init+0x1ec>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a49      	ldr	r2, [pc, #292]	@ (8004498 <HAL_GPIO_Init+0x2f8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d007      	beq.n	8004388 <HAL_GPIO_Init+0x1e8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a48      	ldr	r2, [pc, #288]	@ (800449c <HAL_GPIO_Init+0x2fc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d101      	bne.n	8004384 <HAL_GPIO_Init+0x1e4>
 8004380:	2305      	movs	r3, #5
 8004382:	e00a      	b.n	800439a <HAL_GPIO_Init+0x1fa>
 8004384:	2306      	movs	r3, #6
 8004386:	e008      	b.n	800439a <HAL_GPIO_Init+0x1fa>
 8004388:	2304      	movs	r3, #4
 800438a:	e006      	b.n	800439a <HAL_GPIO_Init+0x1fa>
 800438c:	2303      	movs	r3, #3
 800438e:	e004      	b.n	800439a <HAL_GPIO_Init+0x1fa>
 8004390:	2302      	movs	r3, #2
 8004392:	e002      	b.n	800439a <HAL_GPIO_Init+0x1fa>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <HAL_GPIO_Init+0x1fa>
 8004398:	2300      	movs	r3, #0
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	f002 0203 	and.w	r2, r2, #3
 80043a0:	0092      	lsls	r2, r2, #2
 80043a2:	4093      	lsls	r3, r2
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043aa:	4937      	ldr	r1, [pc, #220]	@ (8004488 <HAL_GPIO_Init+0x2e8>)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	089b      	lsrs	r3, r3, #2
 80043b0:	3302      	adds	r3, #2
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043b8:	4b39      	ldr	r3, [pc, #228]	@ (80044a0 <HAL_GPIO_Init+0x300>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	43db      	mvns	r3, r3
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4013      	ands	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043dc:	4a30      	ldr	r2, [pc, #192]	@ (80044a0 <HAL_GPIO_Init+0x300>)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043e2:	4b2f      	ldr	r3, [pc, #188]	@ (80044a0 <HAL_GPIO_Init+0x300>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	43db      	mvns	r3, r3
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4013      	ands	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004406:	4a26      	ldr	r2, [pc, #152]	@ (80044a0 <HAL_GPIO_Init+0x300>)
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800440c:	4b24      	ldr	r3, [pc, #144]	@ (80044a0 <HAL_GPIO_Init+0x300>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	43db      	mvns	r3, r3
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4013      	ands	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004430:	4a1b      	ldr	r2, [pc, #108]	@ (80044a0 <HAL_GPIO_Init+0x300>)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004436:	4b1a      	ldr	r3, [pc, #104]	@ (80044a0 <HAL_GPIO_Init+0x300>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	43db      	mvns	r3, r3
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4013      	ands	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800445a:	4a11      	ldr	r2, [pc, #68]	@ (80044a0 <HAL_GPIO_Init+0x300>)
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	3301      	adds	r3, #1
 8004464:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	f47f ae9d 	bne.w	80041b0 <HAL_GPIO_Init+0x10>
  }
}
 8004476:	bf00      	nop
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40021000 	.word	0x40021000
 8004488:	40010000 	.word	0x40010000
 800448c:	48000400 	.word	0x48000400
 8004490:	48000800 	.word	0x48000800
 8004494:	48000c00 	.word	0x48000c00
 8004498:	48001000 	.word	0x48001000
 800449c:	48001400 	.word	0x48001400
 80044a0:	40010400 	.word	0x40010400

080044a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	807b      	strh	r3, [r7, #2]
 80044b0:	4613      	mov	r3, r2
 80044b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044b4:	787b      	ldrb	r3, [r7, #1]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044ba:	887a      	ldrh	r2, [r7, #2]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044c0:	e002      	b.n	80044c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044c2:	887a      	ldrh	r2, [r7, #2]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044de:	4b08      	ldr	r3, [pc, #32]	@ (8004500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d006      	beq.n	80044f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044ea:	4a05      	ldr	r2, [pc, #20]	@ (8004500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044ec:	88fb      	ldrh	r3, [r7, #6]
 80044ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fd f8fe 	bl	80016f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80044f8:	bf00      	nop
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40010400 	.word	0x40010400

08004504 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d141      	bne.n	8004596 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004512:	4b4b      	ldr	r3, [pc, #300]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800451a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800451e:	d131      	bne.n	8004584 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004520:	4b47      	ldr	r3, [pc, #284]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004526:	4a46      	ldr	r2, [pc, #280]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800452c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004530:	4b43      	ldr	r3, [pc, #268]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004538:	4a41      	ldr	r2, [pc, #260]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800453a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800453e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004540:	4b40      	ldr	r3, [pc, #256]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2232      	movs	r2, #50	@ 0x32
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	4a3f      	ldr	r2, [pc, #252]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	0c9b      	lsrs	r3, r3, #18
 8004552:	3301      	adds	r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004556:	e002      	b.n	800455e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3b01      	subs	r3, #1
 800455c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800455e:	4b38      	ldr	r3, [pc, #224]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800456a:	d102      	bne.n	8004572 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f2      	bne.n	8004558 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004572:	4b33      	ldr	r3, [pc, #204]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800457a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800457e:	d158      	bne.n	8004632 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e057      	b.n	8004634 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004584:	4b2e      	ldr	r3, [pc, #184]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800458a:	4a2d      	ldr	r2, [pc, #180]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800458c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004590:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004594:	e04d      	b.n	8004632 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800459c:	d141      	bne.n	8004622 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800459e:	4b28      	ldr	r3, [pc, #160]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045aa:	d131      	bne.n	8004610 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045ac:	4b24      	ldr	r3, [pc, #144]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045b2:	4a23      	ldr	r2, [pc, #140]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045bc:	4b20      	ldr	r3, [pc, #128]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2232      	movs	r2, #50	@ 0x32
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045d8:	fba2 2303 	umull	r2, r3, r2, r3
 80045dc:	0c9b      	lsrs	r3, r3, #18
 80045de:	3301      	adds	r3, #1
 80045e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045e2:	e002      	b.n	80045ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045ea:	4b15      	ldr	r3, [pc, #84]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045f6:	d102      	bne.n	80045fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f2      	bne.n	80045e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045fe:	4b10      	ldr	r3, [pc, #64]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460a:	d112      	bne.n	8004632 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e011      	b.n	8004634 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004610:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004616:	4a0a      	ldr	r2, [pc, #40]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800461c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004620:	e007      	b.n	8004632 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004622:	4b07      	ldr	r3, [pc, #28]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800462a:	4a05      	ldr	r2, [pc, #20]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004630:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	40007000 	.word	0x40007000
 8004644:	20000000 	.word	0x20000000
 8004648:	431bde83 	.word	0x431bde83

0800464c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004650:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4a04      	ldr	r2, [pc, #16]	@ (8004668 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800465a:	6093      	str	r3, [r2, #8]
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40007000 	.word	0x40007000

0800466c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e2fe      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d075      	beq.n	8004776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800468a:	4b97      	ldr	r3, [pc, #604]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004694:	4b94      	ldr	r3, [pc, #592]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	d102      	bne.n	80046aa <HAL_RCC_OscConfig+0x3e>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d002      	beq.n	80046b0 <HAL_RCC_OscConfig+0x44>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d10b      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b0:	4b8d      	ldr	r3, [pc, #564]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05b      	beq.n	8004774 <HAL_RCC_OscConfig+0x108>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d157      	bne.n	8004774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e2d9      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d0:	d106      	bne.n	80046e0 <HAL_RCC_OscConfig+0x74>
 80046d2:	4b85      	ldr	r3, [pc, #532]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a84      	ldr	r2, [pc, #528]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e01d      	b.n	800471c <HAL_RCC_OscConfig+0xb0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0x98>
 80046ea:	4b7f      	ldr	r3, [pc, #508]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a7e      	ldr	r2, [pc, #504]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80046f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	4b7c      	ldr	r3, [pc, #496]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a7b      	ldr	r2, [pc, #492]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e00b      	b.n	800471c <HAL_RCC_OscConfig+0xb0>
 8004704:	4b78      	ldr	r3, [pc, #480]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a77      	ldr	r2, [pc, #476]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 800470a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b75      	ldr	r3, [pc, #468]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a74      	ldr	r2, [pc, #464]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 8004716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800471a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d013      	beq.n	800474c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fd fa78 	bl	8001c18 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800472c:	f7fd fa74 	bl	8001c18 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	@ 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e29e      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800473e:	4b6a      	ldr	r3, [pc, #424]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0xc0>
 800474a:	e014      	b.n	8004776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fd fa64 	bl	8001c18 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004754:	f7fd fa60 	bl	8001c18 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	@ 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e28a      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004766:	4b60      	ldr	r3, [pc, #384]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0xe8>
 8004772:	e000      	b.n	8004776 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d075      	beq.n	800486e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004782:	4b59      	ldr	r3, [pc, #356]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800478c:	4b56      	ldr	r3, [pc, #344]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b0c      	cmp	r3, #12
 800479a:	d102      	bne.n	80047a2 <HAL_RCC_OscConfig+0x136>
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d002      	beq.n	80047a8 <HAL_RCC_OscConfig+0x13c>
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d11f      	bne.n	80047e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a8:	4b4f      	ldr	r3, [pc, #316]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_OscConfig+0x154>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e25d      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c0:	4b49      	ldr	r3, [pc, #292]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	061b      	lsls	r3, r3, #24
 80047ce:	4946      	ldr	r1, [pc, #280]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047d4:	4b45      	ldr	r3, [pc, #276]	@ (80048ec <HAL_RCC_OscConfig+0x280>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fd f9d1 	bl	8001b80 <HAL_InitTick>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d043      	beq.n	800486c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e249      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d023      	beq.n	8004838 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047f0:	4b3d      	ldr	r3, [pc, #244]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a3c      	ldr	r2, [pc, #240]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80047f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7fd fa0c 	bl	8001c18 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004804:	f7fd fa08 	bl	8001c18 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e232      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004816:	4b34      	ldr	r3, [pc, #208]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004822:	4b31      	ldr	r3, [pc, #196]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	061b      	lsls	r3, r3, #24
 8004830:	492d      	ldr	r1, [pc, #180]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	604b      	str	r3, [r1, #4]
 8004836:	e01a      	b.n	800486e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004838:	4b2b      	ldr	r3, [pc, #172]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a2a      	ldr	r2, [pc, #168]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 800483e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7fd f9e8 	bl	8001c18 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484c:	f7fd f9e4 	bl	8001c18 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e20e      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800485e:	4b22      	ldr	r3, [pc, #136]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f0      	bne.n	800484c <HAL_RCC_OscConfig+0x1e0>
 800486a:	e000      	b.n	800486e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800486c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d041      	beq.n	80048fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01c      	beq.n	80048bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004882:	4b19      	ldr	r3, [pc, #100]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 8004884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004888:	4a17      	ldr	r2, [pc, #92]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004892:	f7fd f9c1 	bl	8001c18 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800489a:	f7fd f9bd 	bl	8001c18 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e1e7      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ac:	4b0e      	ldr	r3, [pc, #56]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80048ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0ef      	beq.n	800489a <HAL_RCC_OscConfig+0x22e>
 80048ba:	e020      	b.n	80048fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048bc:	4b0a      	ldr	r3, [pc, #40]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80048be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048c2:	4a09      	ldr	r2, [pc, #36]	@ (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fd f9a4 	bl	8001c18 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048d2:	e00d      	b.n	80048f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d4:	f7fd f9a0 	bl	8001c18 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d906      	bls.n	80048f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e1ca      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
 80048e6:	bf00      	nop
 80048e8:	40021000 	.word	0x40021000
 80048ec:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048f0:	4b8c      	ldr	r3, [pc, #560]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 80048f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1ea      	bne.n	80048d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 80a6 	beq.w	8004a58 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800490c:	2300      	movs	r3, #0
 800490e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004910:	4b84      	ldr	r3, [pc, #528]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_OscConfig+0x2b4>
 800491c:	2301      	movs	r3, #1
 800491e:	e000      	b.n	8004922 <HAL_RCC_OscConfig+0x2b6>
 8004920:	2300      	movs	r3, #0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00d      	beq.n	8004942 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004926:	4b7f      	ldr	r3, [pc, #508]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 800492c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004930:	6593      	str	r3, [r2, #88]	@ 0x58
 8004932:	4b7c      	ldr	r3, [pc, #496]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800493e:	2301      	movs	r3, #1
 8004940:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004942:	4b79      	ldr	r3, [pc, #484]	@ (8004b28 <HAL_RCC_OscConfig+0x4bc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494a:	2b00      	cmp	r3, #0
 800494c:	d118      	bne.n	8004980 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800494e:	4b76      	ldr	r3, [pc, #472]	@ (8004b28 <HAL_RCC_OscConfig+0x4bc>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a75      	ldr	r2, [pc, #468]	@ (8004b28 <HAL_RCC_OscConfig+0x4bc>)
 8004954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495a:	f7fd f95d 	bl	8001c18 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004962:	f7fd f959 	bl	8001c18 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e183      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004974:	4b6c      	ldr	r3, [pc, #432]	@ (8004b28 <HAL_RCC_OscConfig+0x4bc>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0f0      	beq.n	8004962 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d108      	bne.n	800499a <HAL_RCC_OscConfig+0x32e>
 8004988:	4b66      	ldr	r3, [pc, #408]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498e:	4a65      	ldr	r2, [pc, #404]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004998:	e024      	b.n	80049e4 <HAL_RCC_OscConfig+0x378>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b05      	cmp	r3, #5
 80049a0:	d110      	bne.n	80049c4 <HAL_RCC_OscConfig+0x358>
 80049a2:	4b60      	ldr	r3, [pc, #384]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 80049a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a8:	4a5e      	ldr	r2, [pc, #376]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 80049aa:	f043 0304 	orr.w	r3, r3, #4
 80049ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049c2:	e00f      	b.n	80049e4 <HAL_RCC_OscConfig+0x378>
 80049c4:	4b57      	ldr	r3, [pc, #348]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ca:	4a56      	ldr	r2, [pc, #344]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049d4:	4b53      	ldr	r3, [pc, #332]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049da:	4a52      	ldr	r2, [pc, #328]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 80049dc:	f023 0304 	bic.w	r3, r3, #4
 80049e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d016      	beq.n	8004a1a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fd f914 	bl	8001c18 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f2:	e00a      	b.n	8004a0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f4:	f7fd f910 	bl	8001c18 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e138      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0a:	4b46      	ldr	r3, [pc, #280]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0ed      	beq.n	80049f4 <HAL_RCC_OscConfig+0x388>
 8004a18:	e015      	b.n	8004a46 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1a:	f7fd f8fd 	bl	8001c18 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a20:	e00a      	b.n	8004a38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a22:	f7fd f8f9 	bl	8001c18 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e121      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a38:	4b3a      	ldr	r3, [pc, #232]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1ed      	bne.n	8004a22 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a46:	7ffb      	ldrb	r3, [r7, #31]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d105      	bne.n	8004a58 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a4c:	4b35      	ldr	r3, [pc, #212]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a50:	4a34      	ldr	r2, [pc, #208]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a56:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d03c      	beq.n	8004ade <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01c      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a72:	4a2c      	ldr	r2, [pc, #176]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7fd f8cc 	bl	8001c18 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a84:	f7fd f8c8 	bl	8001c18 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e0f2      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a96:	4b23      	ldr	r3, [pc, #140]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0ef      	beq.n	8004a84 <HAL_RCC_OscConfig+0x418>
 8004aa4:	e01b      	b.n	8004ade <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004aa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004aac:	4a1d      	ldr	r2, [pc, #116]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab6:	f7fd f8af 	bl	8001c18 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004abe:	f7fd f8ab 	bl	8001c18 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e0d5      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ad0:	4b14      	ldr	r3, [pc, #80]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004ad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1ef      	bne.n	8004abe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 80c9 	beq.w	8004c7a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 030c 	and.w	r3, r3, #12
 8004af0:	2b0c      	cmp	r3, #12
 8004af2:	f000 8083 	beq.w	8004bfc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d15e      	bne.n	8004bbc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004afe:	4b09      	ldr	r3, [pc, #36]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a08      	ldr	r2, [pc, #32]	@ (8004b24 <HAL_RCC_OscConfig+0x4b8>)
 8004b04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0a:	f7fd f885 	bl	8001c18 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b10:	e00c      	b.n	8004b2c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b12:	f7fd f881 	bl	8001c18 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d905      	bls.n	8004b2c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e0ab      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
 8004b24:	40021000 	.word	0x40021000
 8004b28:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b2c:	4b55      	ldr	r3, [pc, #340]	@ (8004c84 <HAL_RCC_OscConfig+0x618>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1ec      	bne.n	8004b12 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b38:	4b52      	ldr	r3, [pc, #328]	@ (8004c84 <HAL_RCC_OscConfig+0x618>)
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	4b52      	ldr	r3, [pc, #328]	@ (8004c88 <HAL_RCC_OscConfig+0x61c>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6a11      	ldr	r1, [r2, #32]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b48:	3a01      	subs	r2, #1
 8004b4a:	0112      	lsls	r2, r2, #4
 8004b4c:	4311      	orrs	r1, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b52:	0212      	lsls	r2, r2, #8
 8004b54:	4311      	orrs	r1, r2
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b5a:	0852      	lsrs	r2, r2, #1
 8004b5c:	3a01      	subs	r2, #1
 8004b5e:	0552      	lsls	r2, r2, #21
 8004b60:	4311      	orrs	r1, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b66:	0852      	lsrs	r2, r2, #1
 8004b68:	3a01      	subs	r2, #1
 8004b6a:	0652      	lsls	r2, r2, #25
 8004b6c:	4311      	orrs	r1, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b72:	06d2      	lsls	r2, r2, #27
 8004b74:	430a      	orrs	r2, r1
 8004b76:	4943      	ldr	r1, [pc, #268]	@ (8004c84 <HAL_RCC_OscConfig+0x618>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b7c:	4b41      	ldr	r3, [pc, #260]	@ (8004c84 <HAL_RCC_OscConfig+0x618>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a40      	ldr	r2, [pc, #256]	@ (8004c84 <HAL_RCC_OscConfig+0x618>)
 8004b82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b88:	4b3e      	ldr	r3, [pc, #248]	@ (8004c84 <HAL_RCC_OscConfig+0x618>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	4a3d      	ldr	r2, [pc, #244]	@ (8004c84 <HAL_RCC_OscConfig+0x618>)
 8004b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fd f840 	bl	8001c18 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fd f83c 	bl	8001c18 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e066      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bae:	4b35      	ldr	r3, [pc, #212]	@ (8004c84 <HAL_RCC_OscConfig+0x618>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x530>
 8004bba:	e05e      	b.n	8004c7a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbc:	4b31      	ldr	r3, [pc, #196]	@ (8004c84 <HAL_RCC_OscConfig+0x618>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a30      	ldr	r2, [pc, #192]	@ (8004c84 <HAL_RCC_OscConfig+0x618>)
 8004bc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fd f826 	bl	8001c18 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fd f822 	bl	8001c18 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e04c      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be2:	4b28      	ldr	r3, [pc, #160]	@ (8004c84 <HAL_RCC_OscConfig+0x618>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004bee:	4b25      	ldr	r3, [pc, #148]	@ (8004c84 <HAL_RCC_OscConfig+0x618>)
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	4924      	ldr	r1, [pc, #144]	@ (8004c84 <HAL_RCC_OscConfig+0x618>)
 8004bf4:	4b25      	ldr	r3, [pc, #148]	@ (8004c8c <HAL_RCC_OscConfig+0x620>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	60cb      	str	r3, [r1, #12]
 8004bfa:	e03e      	b.n	8004c7a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e039      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c08:	4b1e      	ldr	r3, [pc, #120]	@ (8004c84 <HAL_RCC_OscConfig+0x618>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f003 0203 	and.w	r2, r3, #3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d12c      	bne.n	8004c76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c26:	3b01      	subs	r3, #1
 8004c28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d123      	bne.n	8004c76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d11b      	bne.n	8004c76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d113      	bne.n	8004c76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c58:	085b      	lsrs	r3, r3, #1
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d109      	bne.n	8004c76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c6c:	085b      	lsrs	r3, r3, #1
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d001      	beq.n	8004c7a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3720      	adds	r7, #32
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40021000 	.word	0x40021000
 8004c88:	019f800c 	.word	0x019f800c
 8004c8c:	feeefffc 	.word	0xfeeefffc

08004c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e11e      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca8:	4b91      	ldr	r3, [pc, #580]	@ (8004ef0 <HAL_RCC_ClockConfig+0x260>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d910      	bls.n	8004cd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb6:	4b8e      	ldr	r3, [pc, #568]	@ (8004ef0 <HAL_RCC_ClockConfig+0x260>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f023 020f 	bic.w	r2, r3, #15
 8004cbe:	498c      	ldr	r1, [pc, #560]	@ (8004ef0 <HAL_RCC_ClockConfig+0x260>)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc6:	4b8a      	ldr	r3, [pc, #552]	@ (8004ef0 <HAL_RCC_ClockConfig+0x260>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d001      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e106      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d073      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d129      	bne.n	8004d40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cec:	4b81      	ldr	r3, [pc, #516]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e0f4      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004cfc:	f000 f99e 	bl	800503c <RCC_GetSysClockFreqFromPLLSource>
 8004d00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	4a7c      	ldr	r2, [pc, #496]	@ (8004ef8 <HAL_RCC_ClockConfig+0x268>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d93f      	bls.n	8004d8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d0a:	4b7a      	ldr	r3, [pc, #488]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d033      	beq.n	8004d8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d12f      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d2a:	4b72      	ldr	r3, [pc, #456]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d32:	4a70      	ldr	r2, [pc, #448]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d3a:	2380      	movs	r3, #128	@ 0x80
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	e024      	b.n	8004d8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d107      	bne.n	8004d58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d48:	4b6a      	ldr	r3, [pc, #424]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d109      	bne.n	8004d68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0c6      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d58:	4b66      	ldr	r3, [pc, #408]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0be      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d68:	f000 f8ce 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8004d6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	4a61      	ldr	r2, [pc, #388]	@ (8004ef8 <HAL_RCC_ClockConfig+0x268>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d909      	bls.n	8004d8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d76:	4b5f      	ldr	r3, [pc, #380]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d7e:	4a5d      	ldr	r2, [pc, #372]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d86:	2380      	movs	r3, #128	@ 0x80
 8004d88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d8a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f023 0203 	bic.w	r2, r3, #3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4957      	ldr	r1, [pc, #348]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d9c:	f7fc ff3c 	bl	8001c18 <HAL_GetTick>
 8004da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da2:	e00a      	b.n	8004dba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da4:	f7fc ff38 	bl	8001c18 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e095      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dba:	4b4e      	ldr	r3, [pc, #312]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 020c 	and.w	r2, r3, #12
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d1eb      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d023      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004de4:	4b43      	ldr	r3, [pc, #268]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4a42      	ldr	r2, [pc, #264]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004dea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004dee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004dfc:	4b3d      	ldr	r3, [pc, #244]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e04:	4a3b      	ldr	r2, [pc, #236]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004e06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e0c:	4b39      	ldr	r3, [pc, #228]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	4936      	ldr	r1, [pc, #216]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2b80      	cmp	r3, #128	@ 0x80
 8004e24:	d105      	bne.n	8004e32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e26:	4b33      	ldr	r3, [pc, #204]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	4a32      	ldr	r2, [pc, #200]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004e2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e32:	4b2f      	ldr	r3, [pc, #188]	@ (8004ef0 <HAL_RCC_ClockConfig+0x260>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d21d      	bcs.n	8004e7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e40:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef0 <HAL_RCC_ClockConfig+0x260>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f023 020f 	bic.w	r2, r3, #15
 8004e48:	4929      	ldr	r1, [pc, #164]	@ (8004ef0 <HAL_RCC_ClockConfig+0x260>)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e50:	f7fc fee2 	bl	8001c18 <HAL_GetTick>
 8004e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	e00a      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e58:	f7fc fede 	bl	8001c18 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e03b      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6e:	4b20      	ldr	r3, [pc, #128]	@ (8004ef0 <HAL_RCC_ClockConfig+0x260>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d1ed      	bne.n	8004e58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e88:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4917      	ldr	r1, [pc, #92]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ea6:	4b13      	ldr	r3, [pc, #76]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	490f      	ldr	r1, [pc, #60]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004eba:	f000 f825 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef4 <HAL_RCC_ClockConfig+0x264>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	490c      	ldr	r1, [pc, #48]	@ (8004efc <HAL_RCC_ClockConfig+0x26c>)
 8004ecc:	5ccb      	ldrb	r3, [r1, r3]
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8004f00 <HAL_RCC_ClockConfig+0x270>)
 8004ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004eda:	4b0a      	ldr	r3, [pc, #40]	@ (8004f04 <HAL_RCC_ClockConfig+0x274>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fc fe4e 	bl	8001b80 <HAL_InitTick>
 8004ee4:	4603      	mov	r3, r0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40022000 	.word	0x40022000
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	04c4b400 	.word	0x04c4b400
 8004efc:	08007d40 	.word	0x08007d40
 8004f00:	20000000 	.word	0x20000000
 8004f04:	20000004 	.word	0x20000004

08004f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d102      	bne.n	8004f20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f1c:	613b      	str	r3, [r7, #16]
 8004f1e:	e047      	b.n	8004fb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f20:	4b27      	ldr	r3, [pc, #156]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 030c 	and.w	r3, r3, #12
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d102      	bne.n	8004f32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f2c:	4b26      	ldr	r3, [pc, #152]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	e03e      	b.n	8004fb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f32:	4b23      	ldr	r3, [pc, #140]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
 8004f3a:	2b0c      	cmp	r3, #12
 8004f3c:	d136      	bne.n	8004fac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f3e:	4b20      	ldr	r3, [pc, #128]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f48:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	3301      	adds	r3, #1
 8004f54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d10c      	bne.n	8004f76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f5c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f64:	4a16      	ldr	r2, [pc, #88]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f66:	68d2      	ldr	r2, [r2, #12]
 8004f68:	0a12      	lsrs	r2, r2, #8
 8004f6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f6e:	fb02 f303 	mul.w	r3, r2, r3
 8004f72:	617b      	str	r3, [r7, #20]
      break;
 8004f74:	e00c      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f76:	4a13      	ldr	r2, [pc, #76]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7e:	4a10      	ldr	r2, [pc, #64]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f80:	68d2      	ldr	r2, [r2, #12]
 8004f82:	0a12      	lsrs	r2, r2, #8
 8004f84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f88:	fb02 f303 	mul.w	r3, r2, r3
 8004f8c:	617b      	str	r3, [r7, #20]
      break;
 8004f8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f90:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	0e5b      	lsrs	r3, r3, #25
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	e001      	b.n	8004fb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004fb0:	693b      	ldr	r3, [r7, #16]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	00f42400 	.word	0x00f42400
 8004fc8:	016e3600 	.word	0x016e3600

08004fcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fd0:	4b03      	ldr	r3, [pc, #12]	@ (8004fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000000 	.word	0x20000000

08004fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fe8:	f7ff fff0 	bl	8004fcc <HAL_RCC_GetHCLKFreq>
 8004fec:	4602      	mov	r2, r0
 8004fee:	4b06      	ldr	r3, [pc, #24]	@ (8005008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	4904      	ldr	r1, [pc, #16]	@ (800500c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ffa:	5ccb      	ldrb	r3, [r1, r3]
 8004ffc:	f003 031f 	and.w	r3, r3, #31
 8005000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005004:	4618      	mov	r0, r3
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40021000 	.word	0x40021000
 800500c:	08007d50 	.word	0x08007d50

08005010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005014:	f7ff ffda 	bl	8004fcc <HAL_RCC_GetHCLKFreq>
 8005018:	4602      	mov	r2, r0
 800501a:	4b06      	ldr	r3, [pc, #24]	@ (8005034 <HAL_RCC_GetPCLK2Freq+0x24>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	0adb      	lsrs	r3, r3, #11
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	4904      	ldr	r1, [pc, #16]	@ (8005038 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005026:	5ccb      	ldrb	r3, [r1, r3]
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005030:	4618      	mov	r0, r3
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40021000 	.word	0x40021000
 8005038:	08007d50 	.word	0x08007d50

0800503c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005042:	4b1e      	ldr	r3, [pc, #120]	@ (80050bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800504c:	4b1b      	ldr	r3, [pc, #108]	@ (80050bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	3301      	adds	r3, #1
 8005058:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2b03      	cmp	r3, #3
 800505e:	d10c      	bne.n	800507a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005060:	4a17      	ldr	r2, [pc, #92]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	fbb2 f3f3 	udiv	r3, r2, r3
 8005068:	4a14      	ldr	r2, [pc, #80]	@ (80050bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800506a:	68d2      	ldr	r2, [r2, #12]
 800506c:	0a12      	lsrs	r2, r2, #8
 800506e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005072:	fb02 f303 	mul.w	r3, r2, r3
 8005076:	617b      	str	r3, [r7, #20]
    break;
 8005078:	e00c      	b.n	8005094 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800507a:	4a12      	ldr	r2, [pc, #72]	@ (80050c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005082:	4a0e      	ldr	r2, [pc, #56]	@ (80050bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005084:	68d2      	ldr	r2, [r2, #12]
 8005086:	0a12      	lsrs	r2, r2, #8
 8005088:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800508c:	fb02 f303 	mul.w	r3, r2, r3
 8005090:	617b      	str	r3, [r7, #20]
    break;
 8005092:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005094:	4b09      	ldr	r3, [pc, #36]	@ (80050bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	0e5b      	lsrs	r3, r3, #25
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	3301      	adds	r3, #1
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80050ae:	687b      	ldr	r3, [r7, #4]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	40021000 	.word	0x40021000
 80050c0:	016e3600 	.word	0x016e3600
 80050c4:	00f42400 	.word	0x00f42400

080050c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050d0:	2300      	movs	r3, #0
 80050d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050d4:	2300      	movs	r3, #0
 80050d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8098 	beq.w	8005216 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e6:	2300      	movs	r3, #0
 80050e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ea:	4b43      	ldr	r3, [pc, #268]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10d      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f6:	4b40      	ldr	r3, [pc, #256]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fa:	4a3f      	ldr	r2, [pc, #252]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005100:	6593      	str	r3, [r2, #88]	@ 0x58
 8005102:	4b3d      	ldr	r3, [pc, #244]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800510e:	2301      	movs	r3, #1
 8005110:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005112:	4b3a      	ldr	r3, [pc, #232]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a39      	ldr	r2, [pc, #228]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800511c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800511e:	f7fc fd7b 	bl	8001c18 <HAL_GetTick>
 8005122:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005124:	e009      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005126:	f7fc fd77 	bl	8001c18 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d902      	bls.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	74fb      	strb	r3, [r7, #19]
        break;
 8005138:	e005      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800513a:	4b30      	ldr	r3, [pc, #192]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0ef      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005146:	7cfb      	ldrb	r3, [r7, #19]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d159      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800514c:	4b2a      	ldr	r3, [pc, #168]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800514e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005156:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01e      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	429a      	cmp	r2, r3
 8005166:	d019      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005168:	4b23      	ldr	r3, [pc, #140]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800516e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005172:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005174:	4b20      	ldr	r3, [pc, #128]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800517a:	4a1f      	ldr	r2, [pc, #124]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800517c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005184:	4b1c      	ldr	r3, [pc, #112]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518a:	4a1b      	ldr	r2, [pc, #108]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800518c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005194:	4a18      	ldr	r2, [pc, #96]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d016      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a6:	f7fc fd37 	bl	8001c18 <HAL_GetTick>
 80051aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ac:	e00b      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ae:	f7fc fd33 	bl	8001c18 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051bc:	4293      	cmp	r3, r2
 80051be:	d902      	bls.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	74fb      	strb	r3, [r7, #19]
            break;
 80051c4:	e006      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051c6:	4b0c      	ldr	r3, [pc, #48]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0ec      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80051d4:	7cfb      	ldrb	r3, [r7, #19]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10b      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051da:	4b07      	ldr	r3, [pc, #28]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e8:	4903      	ldr	r1, [pc, #12]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80051f0:	e008      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051f2:	7cfb      	ldrb	r3, [r7, #19]
 80051f4:	74bb      	strb	r3, [r7, #18]
 80051f6:	e005      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005200:	7cfb      	ldrb	r3, [r7, #19]
 8005202:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005204:	7c7b      	ldrb	r3, [r7, #17]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d105      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520a:	4ba7      	ldr	r3, [pc, #668]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520e:	4aa6      	ldr	r2, [pc, #664]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005214:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005222:	4ba1      	ldr	r3, [pc, #644]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005228:	f023 0203 	bic.w	r2, r3, #3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	499d      	ldr	r1, [pc, #628]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005244:	4b98      	ldr	r3, [pc, #608]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524a:	f023 020c 	bic.w	r2, r3, #12
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	4995      	ldr	r1, [pc, #596]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0304 	and.w	r3, r3, #4
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005266:	4b90      	ldr	r3, [pc, #576]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	498c      	ldr	r1, [pc, #560]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005288:	4b87      	ldr	r3, [pc, #540]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	4984      	ldr	r1, [pc, #528]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052aa:	4b7f      	ldr	r3, [pc, #508]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	497b      	ldr	r1, [pc, #492]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052cc:	4b76      	ldr	r3, [pc, #472]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	4973      	ldr	r1, [pc, #460]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ee:	4b6e      	ldr	r3, [pc, #440]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	496a      	ldr	r1, [pc, #424]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005310:	4b65      	ldr	r3, [pc, #404]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005316:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	4962      	ldr	r1, [pc, #392]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005332:	4b5d      	ldr	r3, [pc, #372]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005338:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005340:	4959      	ldr	r1, [pc, #356]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005354:	4b54      	ldr	r3, [pc, #336]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005356:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800535a:	f023 0203 	bic.w	r2, r3, #3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005362:	4951      	ldr	r1, [pc, #324]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005376:	4b4c      	ldr	r3, [pc, #304]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	4948      	ldr	r1, [pc, #288]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005394:	2b00      	cmp	r3, #0
 8005396:	d015      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005398:	4b43      	ldr	r3, [pc, #268]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a6:	4940      	ldr	r1, [pc, #256]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053b6:	d105      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b8:	4b3b      	ldr	r3, [pc, #236]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	4a3a      	ldr	r2, [pc, #232]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d015      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053d0:	4b35      	ldr	r3, [pc, #212]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053de:	4932      	ldr	r1, [pc, #200]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053ee:	d105      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053f0:	4b2d      	ldr	r3, [pc, #180]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	4a2c      	ldr	r2, [pc, #176]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d015      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005408:	4b27      	ldr	r3, [pc, #156]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005416:	4924      	ldr	r1, [pc, #144]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005422:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005426:	d105      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005428:	4b1f      	ldr	r3, [pc, #124]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4a1e      	ldr	r2, [pc, #120]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005432:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d015      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005440:	4b19      	ldr	r3, [pc, #100]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005446:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544e:	4916      	ldr	r1, [pc, #88]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800545e:	d105      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005460:	4b11      	ldr	r3, [pc, #68]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4a10      	ldr	r2, [pc, #64]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800546a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d019      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005478:	4b0b      	ldr	r3, [pc, #44]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	4908      	ldr	r1, [pc, #32]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005496:	d109      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005498:	4b03      	ldr	r3, [pc, #12]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	4a02      	ldr	r2, [pc, #8]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800549e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054a2:	60d3      	str	r3, [r2, #12]
 80054a4:	e002      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80054a6:	bf00      	nop
 80054a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d015      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054b8:	4b29      	ldr	r3, [pc, #164]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c6:	4926      	ldr	r1, [pc, #152]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054d6:	d105      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054d8:	4b21      	ldr	r3, [pc, #132]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	4a20      	ldr	r2, [pc, #128]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d015      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80054f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054fe:	4918      	ldr	r1, [pc, #96]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800550a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550e:	d105      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005510:	4b13      	ldr	r3, [pc, #76]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	4a12      	ldr	r2, [pc, #72]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800551a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d015      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005528:	4b0d      	ldr	r3, [pc, #52]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800552a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800552e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005536:	490a      	ldr	r1, [pc, #40]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005542:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005546:	d105      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005548:	4b05      	ldr	r3, [pc, #20]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4a04      	ldr	r2, [pc, #16]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800554e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005552:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005554:	7cbb      	ldrb	r3, [r7, #18]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	40021000 	.word	0x40021000

08005564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e049      	b.n	800560a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fc f9e0 	bl	8001950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f000 fe34 	bl	8006210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	d001      	beq.n	800562c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e04c      	b.n	80056c6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a26      	ldr	r2, [pc, #152]	@ (80056d4 <HAL_TIM_Base_Start+0xc0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d022      	beq.n	8005684 <HAL_TIM_Base_Start+0x70>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005646:	d01d      	beq.n	8005684 <HAL_TIM_Base_Start+0x70>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a22      	ldr	r2, [pc, #136]	@ (80056d8 <HAL_TIM_Base_Start+0xc4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d018      	beq.n	8005684 <HAL_TIM_Base_Start+0x70>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a21      	ldr	r2, [pc, #132]	@ (80056dc <HAL_TIM_Base_Start+0xc8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d013      	beq.n	8005684 <HAL_TIM_Base_Start+0x70>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1f      	ldr	r2, [pc, #124]	@ (80056e0 <HAL_TIM_Base_Start+0xcc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00e      	beq.n	8005684 <HAL_TIM_Base_Start+0x70>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a1e      	ldr	r2, [pc, #120]	@ (80056e4 <HAL_TIM_Base_Start+0xd0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d009      	beq.n	8005684 <HAL_TIM_Base_Start+0x70>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1c      	ldr	r2, [pc, #112]	@ (80056e8 <HAL_TIM_Base_Start+0xd4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d004      	beq.n	8005684 <HAL_TIM_Base_Start+0x70>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a1b      	ldr	r2, [pc, #108]	@ (80056ec <HAL_TIM_Base_Start+0xd8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d115      	bne.n	80056b0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	4b19      	ldr	r3, [pc, #100]	@ (80056f0 <HAL_TIM_Base_Start+0xdc>)
 800568c:	4013      	ands	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b06      	cmp	r3, #6
 8005694:	d015      	beq.n	80056c2 <HAL_TIM_Base_Start+0xae>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800569c:	d011      	beq.n	80056c2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0201 	orr.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ae:	e008      	b.n	80056c2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	e000      	b.n	80056c4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800
 80056e0:	40000c00 	.word	0x40000c00
 80056e4:	40013400 	.word	0x40013400
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40015000 	.word	0x40015000
 80056f0:	00010007 	.word	0x00010007

080056f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	d001      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e054      	b.n	80057b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a26      	ldr	r2, [pc, #152]	@ (80057c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d022      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x80>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005736:	d01d      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x80>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a22      	ldr	r2, [pc, #136]	@ (80057c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d018      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x80>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a21      	ldr	r2, [pc, #132]	@ (80057cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d013      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x80>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1f      	ldr	r2, [pc, #124]	@ (80057d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00e      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x80>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1e      	ldr	r2, [pc, #120]	@ (80057d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d009      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x80>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1c      	ldr	r2, [pc, #112]	@ (80057d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d004      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x80>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a1b      	ldr	r2, [pc, #108]	@ (80057dc <HAL_TIM_Base_Start_IT+0xe8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d115      	bne.n	80057a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	4b19      	ldr	r3, [pc, #100]	@ (80057e0 <HAL_TIM_Base_Start_IT+0xec>)
 800577c:	4013      	ands	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b06      	cmp	r3, #6
 8005784:	d015      	beq.n	80057b2 <HAL_TIM_Base_Start_IT+0xbe>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800578c:	d011      	beq.n	80057b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579e:	e008      	b.n	80057b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	e000      	b.n	80057b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40000800 	.word	0x40000800
 80057d0:	40000c00 	.word	0x40000c00
 80057d4:	40013400 	.word	0x40013400
 80057d8:	40014000 	.word	0x40014000
 80057dc:	40015000 	.word	0x40015000
 80057e0:	00010007 	.word	0x00010007

080057e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e049      	b.n	800588a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f841 	bl	8005892 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3304      	adds	r3, #4
 8005820:	4619      	mov	r1, r3
 8005822:	4610      	mov	r0, r2
 8005824:	f000 fcf4 	bl	8006210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d109      	bne.n	80058cc <HAL_TIM_PWM_Start+0x24>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	bf14      	ite	ne
 80058c4:	2301      	movne	r3, #1
 80058c6:	2300      	moveq	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	e03c      	b.n	8005946 <HAL_TIM_PWM_Start+0x9e>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d109      	bne.n	80058e6 <HAL_TIM_PWM_Start+0x3e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b01      	cmp	r3, #1
 80058dc:	bf14      	ite	ne
 80058de:	2301      	movne	r3, #1
 80058e0:	2300      	moveq	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	e02f      	b.n	8005946 <HAL_TIM_PWM_Start+0x9e>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d109      	bne.n	8005900 <HAL_TIM_PWM_Start+0x58>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	bf14      	ite	ne
 80058f8:	2301      	movne	r3, #1
 80058fa:	2300      	moveq	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	e022      	b.n	8005946 <HAL_TIM_PWM_Start+0x9e>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b0c      	cmp	r3, #12
 8005904:	d109      	bne.n	800591a <HAL_TIM_PWM_Start+0x72>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b01      	cmp	r3, #1
 8005910:	bf14      	ite	ne
 8005912:	2301      	movne	r3, #1
 8005914:	2300      	moveq	r3, #0
 8005916:	b2db      	uxtb	r3, r3
 8005918:	e015      	b.n	8005946 <HAL_TIM_PWM_Start+0x9e>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b10      	cmp	r3, #16
 800591e:	d109      	bne.n	8005934 <HAL_TIM_PWM_Start+0x8c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b01      	cmp	r3, #1
 800592a:	bf14      	ite	ne
 800592c:	2301      	movne	r3, #1
 800592e:	2300      	moveq	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	e008      	b.n	8005946 <HAL_TIM_PWM_Start+0x9e>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b01      	cmp	r3, #1
 800593e:	bf14      	ite	ne
 8005940:	2301      	movne	r3, #1
 8005942:	2300      	moveq	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e0a6      	b.n	8005a9c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d104      	bne.n	800595e <HAL_TIM_PWM_Start+0xb6>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800595c:	e023      	b.n	80059a6 <HAL_TIM_PWM_Start+0xfe>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b04      	cmp	r3, #4
 8005962:	d104      	bne.n	800596e <HAL_TIM_PWM_Start+0xc6>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800596c:	e01b      	b.n	80059a6 <HAL_TIM_PWM_Start+0xfe>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b08      	cmp	r3, #8
 8005972:	d104      	bne.n	800597e <HAL_TIM_PWM_Start+0xd6>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800597c:	e013      	b.n	80059a6 <HAL_TIM_PWM_Start+0xfe>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b0c      	cmp	r3, #12
 8005982:	d104      	bne.n	800598e <HAL_TIM_PWM_Start+0xe6>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800598c:	e00b      	b.n	80059a6 <HAL_TIM_PWM_Start+0xfe>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b10      	cmp	r3, #16
 8005992:	d104      	bne.n	800599e <HAL_TIM_PWM_Start+0xf6>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800599c:	e003      	b.n	80059a6 <HAL_TIM_PWM_Start+0xfe>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2201      	movs	r2, #1
 80059ac:	6839      	ldr	r1, [r7, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f001 f8a8 	bl	8006b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a3a      	ldr	r2, [pc, #232]	@ (8005aa4 <HAL_TIM_PWM_Start+0x1fc>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d018      	beq.n	80059f0 <HAL_TIM_PWM_Start+0x148>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a39      	ldr	r2, [pc, #228]	@ (8005aa8 <HAL_TIM_PWM_Start+0x200>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <HAL_TIM_PWM_Start+0x148>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a37      	ldr	r2, [pc, #220]	@ (8005aac <HAL_TIM_PWM_Start+0x204>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00e      	beq.n	80059f0 <HAL_TIM_PWM_Start+0x148>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a36      	ldr	r2, [pc, #216]	@ (8005ab0 <HAL_TIM_PWM_Start+0x208>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d009      	beq.n	80059f0 <HAL_TIM_PWM_Start+0x148>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a34      	ldr	r2, [pc, #208]	@ (8005ab4 <HAL_TIM_PWM_Start+0x20c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <HAL_TIM_PWM_Start+0x148>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a33      	ldr	r2, [pc, #204]	@ (8005ab8 <HAL_TIM_PWM_Start+0x210>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d101      	bne.n	80059f4 <HAL_TIM_PWM_Start+0x14c>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <HAL_TIM_PWM_Start+0x14e>
 80059f4:	2300      	movs	r3, #0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a25      	ldr	r2, [pc, #148]	@ (8005aa4 <HAL_TIM_PWM_Start+0x1fc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d022      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x1b2>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a1c:	d01d      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x1b2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a26      	ldr	r2, [pc, #152]	@ (8005abc <HAL_TIM_PWM_Start+0x214>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d018      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x1b2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a24      	ldr	r2, [pc, #144]	@ (8005ac0 <HAL_TIM_PWM_Start+0x218>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d013      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x1b2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a23      	ldr	r2, [pc, #140]	@ (8005ac4 <HAL_TIM_PWM_Start+0x21c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00e      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x1b2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a19      	ldr	r2, [pc, #100]	@ (8005aa8 <HAL_TIM_PWM_Start+0x200>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d009      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x1b2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a18      	ldr	r2, [pc, #96]	@ (8005aac <HAL_TIM_PWM_Start+0x204>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d004      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x1b2>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a18      	ldr	r2, [pc, #96]	@ (8005ab8 <HAL_TIM_PWM_Start+0x210>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d115      	bne.n	8005a86 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	4b19      	ldr	r3, [pc, #100]	@ (8005ac8 <HAL_TIM_PWM_Start+0x220>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b06      	cmp	r3, #6
 8005a6a:	d015      	beq.n	8005a98 <HAL_TIM_PWM_Start+0x1f0>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a72:	d011      	beq.n	8005a98 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a84:	e008      	b.n	8005a98 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f042 0201 	orr.w	r2, r2, #1
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	e000      	b.n	8005a9a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40012c00 	.word	0x40012c00
 8005aa8:	40013400 	.word	0x40013400
 8005aac:	40014000 	.word	0x40014000
 8005ab0:	40014400 	.word	0x40014400
 8005ab4:	40014800 	.word	0x40014800
 8005ab8:	40015000 	.word	0x40015000
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	00010007 	.word	0x00010007

08005acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d020      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01b      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0202 	mvn.w	r2, #2
 8005b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fb5c 	bl	80061d4 <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fb4e 	bl	80061c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fb5f 	bl	80061e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d020      	beq.n	8005b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01b      	beq.n	8005b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0204 	mvn.w	r2, #4
 8005b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fb36 	bl	80061d4 <HAL_TIM_IC_CaptureCallback>
 8005b68:	e005      	b.n	8005b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fb28 	bl	80061c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fb39 	bl	80061e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0308 	and.w	r3, r3, #8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d020      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01b      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0208 	mvn.w	r2, #8
 8005b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2204      	movs	r2, #4
 8005b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fb10 	bl	80061d4 <HAL_TIM_IC_CaptureCallback>
 8005bb4:	e005      	b.n	8005bc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fb02 	bl	80061c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fb13 	bl	80061e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 0310 	and.w	r3, r3, #16
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d020      	beq.n	8005c14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d01b      	beq.n	8005c14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0210 	mvn.w	r2, #16
 8005be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2208      	movs	r2, #8
 8005bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 faea 	bl	80061d4 <HAL_TIM_IC_CaptureCallback>
 8005c00:	e005      	b.n	8005c0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fadc 	bl	80061c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 faed 	bl	80061e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00c      	beq.n	8005c38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d007      	beq.n	8005c38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0201 	mvn.w	r2, #1
 8005c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fb fbda 	bl	80013ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d104      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00c      	beq.n	8005c66 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d007      	beq.n	8005c66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f001 f815 	bl	8006c90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00c      	beq.n	8005c8a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f001 f80d 	bl	8006ca4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00c      	beq.n	8005cae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d007      	beq.n	8005cae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 faa7 	bl	80061fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00c      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d007      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f06f 0220 	mvn.w	r2, #32
 8005cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 ffd5 	bl	8006c7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00c      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 ffe1 	bl	8006cb8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00c      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 ffd9 	bl	8006ccc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00c      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d007      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 ffd1 	bl	8006ce0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00c      	beq.n	8005d62 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d007      	beq.n	8005d62 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 ffc9 	bl	8006cf4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d62:	bf00      	nop
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e0ff      	b.n	8005f8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b14      	cmp	r3, #20
 8005d96:	f200 80f0 	bhi.w	8005f7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005da0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005df5 	.word	0x08005df5
 8005da4:	08005f7b 	.word	0x08005f7b
 8005da8:	08005f7b 	.word	0x08005f7b
 8005dac:	08005f7b 	.word	0x08005f7b
 8005db0:	08005e35 	.word	0x08005e35
 8005db4:	08005f7b 	.word	0x08005f7b
 8005db8:	08005f7b 	.word	0x08005f7b
 8005dbc:	08005f7b 	.word	0x08005f7b
 8005dc0:	08005e77 	.word	0x08005e77
 8005dc4:	08005f7b 	.word	0x08005f7b
 8005dc8:	08005f7b 	.word	0x08005f7b
 8005dcc:	08005f7b 	.word	0x08005f7b
 8005dd0:	08005eb7 	.word	0x08005eb7
 8005dd4:	08005f7b 	.word	0x08005f7b
 8005dd8:	08005f7b 	.word	0x08005f7b
 8005ddc:	08005f7b 	.word	0x08005f7b
 8005de0:	08005ef9 	.word	0x08005ef9
 8005de4:	08005f7b 	.word	0x08005f7b
 8005de8:	08005f7b 	.word	0x08005f7b
 8005dec:	08005f7b 	.word	0x08005f7b
 8005df0:	08005f39 	.word	0x08005f39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fabc 	bl	8006378 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0208 	orr.w	r2, r2, #8
 8005e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0204 	bic.w	r2, r2, #4
 8005e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6999      	ldr	r1, [r3, #24]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	619a      	str	r2, [r3, #24]
      break;
 8005e32:	e0a5      	b.n	8005f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68b9      	ldr	r1, [r7, #8]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fb36 	bl	80064ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6999      	ldr	r1, [r3, #24]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	021a      	lsls	r2, r3, #8
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	619a      	str	r2, [r3, #24]
      break;
 8005e74:	e084      	b.n	8005f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fba9 	bl	80065d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0208 	orr.w	r2, r2, #8
 8005e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0204 	bic.w	r2, r2, #4
 8005ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69d9      	ldr	r1, [r3, #28]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	61da      	str	r2, [r3, #28]
      break;
 8005eb4:	e064      	b.n	8005f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fc1b 	bl	80066f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69da      	ldr	r2, [r3, #28]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69da      	ldr	r2, [r3, #28]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69d9      	ldr	r1, [r3, #28]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	021a      	lsls	r2, r3, #8
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	61da      	str	r2, [r3, #28]
      break;
 8005ef6:	e043      	b.n	8005f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fc8e 	bl	8006820 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0208 	orr.w	r2, r2, #8
 8005f12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 0204 	bic.w	r2, r2, #4
 8005f22:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	691a      	ldr	r2, [r3, #16]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f36:	e023      	b.n	8005f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68b9      	ldr	r1, [r7, #8]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 fcd8 	bl	80068f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f62:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	021a      	lsls	r2, r3, #8
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f78:	e002      	b.n	8005f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop

08005f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e0f6      	b.n	800619e <HAL_TIM_ConfigClockSource+0x20a>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005fce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a6f      	ldr	r2, [pc, #444]	@ (80061a8 <HAL_TIM_ConfigClockSource+0x214>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	f000 80c1 	beq.w	8006172 <HAL_TIM_ConfigClockSource+0x1de>
 8005ff0:	4a6d      	ldr	r2, [pc, #436]	@ (80061a8 <HAL_TIM_ConfigClockSource+0x214>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	f200 80c6 	bhi.w	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ff8:	4a6c      	ldr	r2, [pc, #432]	@ (80061ac <HAL_TIM_ConfigClockSource+0x218>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	f000 80b9 	beq.w	8006172 <HAL_TIM_ConfigClockSource+0x1de>
 8006000:	4a6a      	ldr	r2, [pc, #424]	@ (80061ac <HAL_TIM_ConfigClockSource+0x218>)
 8006002:	4293      	cmp	r3, r2
 8006004:	f200 80be 	bhi.w	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 8006008:	4a69      	ldr	r2, [pc, #420]	@ (80061b0 <HAL_TIM_ConfigClockSource+0x21c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	f000 80b1 	beq.w	8006172 <HAL_TIM_ConfigClockSource+0x1de>
 8006010:	4a67      	ldr	r2, [pc, #412]	@ (80061b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	f200 80b6 	bhi.w	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 8006018:	4a66      	ldr	r2, [pc, #408]	@ (80061b4 <HAL_TIM_ConfigClockSource+0x220>)
 800601a:	4293      	cmp	r3, r2
 800601c:	f000 80a9 	beq.w	8006172 <HAL_TIM_ConfigClockSource+0x1de>
 8006020:	4a64      	ldr	r2, [pc, #400]	@ (80061b4 <HAL_TIM_ConfigClockSource+0x220>)
 8006022:	4293      	cmp	r3, r2
 8006024:	f200 80ae 	bhi.w	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 8006028:	4a63      	ldr	r2, [pc, #396]	@ (80061b8 <HAL_TIM_ConfigClockSource+0x224>)
 800602a:	4293      	cmp	r3, r2
 800602c:	f000 80a1 	beq.w	8006172 <HAL_TIM_ConfigClockSource+0x1de>
 8006030:	4a61      	ldr	r2, [pc, #388]	@ (80061b8 <HAL_TIM_ConfigClockSource+0x224>)
 8006032:	4293      	cmp	r3, r2
 8006034:	f200 80a6 	bhi.w	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 8006038:	4a60      	ldr	r2, [pc, #384]	@ (80061bc <HAL_TIM_ConfigClockSource+0x228>)
 800603a:	4293      	cmp	r3, r2
 800603c:	f000 8099 	beq.w	8006172 <HAL_TIM_ConfigClockSource+0x1de>
 8006040:	4a5e      	ldr	r2, [pc, #376]	@ (80061bc <HAL_TIM_ConfigClockSource+0x228>)
 8006042:	4293      	cmp	r3, r2
 8006044:	f200 809e 	bhi.w	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 8006048:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800604c:	f000 8091 	beq.w	8006172 <HAL_TIM_ConfigClockSource+0x1de>
 8006050:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006054:	f200 8096 	bhi.w	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 8006058:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800605c:	f000 8089 	beq.w	8006172 <HAL_TIM_ConfigClockSource+0x1de>
 8006060:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006064:	f200 808e 	bhi.w	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 8006068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800606c:	d03e      	beq.n	80060ec <HAL_TIM_ConfigClockSource+0x158>
 800606e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006072:	f200 8087 	bhi.w	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 8006076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800607a:	f000 8086 	beq.w	800618a <HAL_TIM_ConfigClockSource+0x1f6>
 800607e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006082:	d87f      	bhi.n	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 8006084:	2b70      	cmp	r3, #112	@ 0x70
 8006086:	d01a      	beq.n	80060be <HAL_TIM_ConfigClockSource+0x12a>
 8006088:	2b70      	cmp	r3, #112	@ 0x70
 800608a:	d87b      	bhi.n	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 800608c:	2b60      	cmp	r3, #96	@ 0x60
 800608e:	d050      	beq.n	8006132 <HAL_TIM_ConfigClockSource+0x19e>
 8006090:	2b60      	cmp	r3, #96	@ 0x60
 8006092:	d877      	bhi.n	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 8006094:	2b50      	cmp	r3, #80	@ 0x50
 8006096:	d03c      	beq.n	8006112 <HAL_TIM_ConfigClockSource+0x17e>
 8006098:	2b50      	cmp	r3, #80	@ 0x50
 800609a:	d873      	bhi.n	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 800609c:	2b40      	cmp	r3, #64	@ 0x40
 800609e:	d058      	beq.n	8006152 <HAL_TIM_ConfigClockSource+0x1be>
 80060a0:	2b40      	cmp	r3, #64	@ 0x40
 80060a2:	d86f      	bhi.n	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 80060a4:	2b30      	cmp	r3, #48	@ 0x30
 80060a6:	d064      	beq.n	8006172 <HAL_TIM_ConfigClockSource+0x1de>
 80060a8:	2b30      	cmp	r3, #48	@ 0x30
 80060aa:	d86b      	bhi.n	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	d060      	beq.n	8006172 <HAL_TIM_ConfigClockSource+0x1de>
 80060b0:	2b20      	cmp	r3, #32
 80060b2:	d867      	bhi.n	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d05c      	beq.n	8006172 <HAL_TIM_ConfigClockSource+0x1de>
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	d05a      	beq.n	8006172 <HAL_TIM_ConfigClockSource+0x1de>
 80060bc:	e062      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060ce:	f000 fcf9 	bl	8006ac4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	609a      	str	r2, [r3, #8]
      break;
 80060ea:	e04f      	b.n	800618c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060fc:	f000 fce2 	bl	8006ac4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689a      	ldr	r2, [r3, #8]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800610e:	609a      	str	r2, [r3, #8]
      break;
 8006110:	e03c      	b.n	800618c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800611e:	461a      	mov	r2, r3
 8006120:	f000 fc54 	bl	80069cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2150      	movs	r1, #80	@ 0x50
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fcad 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 8006130:	e02c      	b.n	800618c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800613e:	461a      	mov	r2, r3
 8006140:	f000 fc73 	bl	8006a2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2160      	movs	r1, #96	@ 0x60
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fc9d 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 8006150:	e01c      	b.n	800618c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800615e:	461a      	mov	r2, r3
 8006160:	f000 fc34 	bl	80069cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2140      	movs	r1, #64	@ 0x40
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fc8d 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 8006170:	e00c      	b.n	800618c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4619      	mov	r1, r3
 800617c:	4610      	mov	r0, r2
 800617e:	f000 fc84 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 8006182:	e003      	b.n	800618c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	73fb      	strb	r3, [r7, #15]
      break;
 8006188:	e000      	b.n	800618c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800618a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800619c:	7bfb      	ldrb	r3, [r7, #15]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	00100070 	.word	0x00100070
 80061ac:	00100060 	.word	0x00100060
 80061b0:	00100050 	.word	0x00100050
 80061b4:	00100040 	.word	0x00100040
 80061b8:	00100030 	.word	0x00100030
 80061bc:	00100020 	.word	0x00100020

080061c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a4c      	ldr	r2, [pc, #304]	@ (8006354 <TIM_Base_SetConfig+0x144>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d017      	beq.n	8006258 <TIM_Base_SetConfig+0x48>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800622e:	d013      	beq.n	8006258 <TIM_Base_SetConfig+0x48>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a49      	ldr	r2, [pc, #292]	@ (8006358 <TIM_Base_SetConfig+0x148>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00f      	beq.n	8006258 <TIM_Base_SetConfig+0x48>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a48      	ldr	r2, [pc, #288]	@ (800635c <TIM_Base_SetConfig+0x14c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00b      	beq.n	8006258 <TIM_Base_SetConfig+0x48>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a47      	ldr	r2, [pc, #284]	@ (8006360 <TIM_Base_SetConfig+0x150>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d007      	beq.n	8006258 <TIM_Base_SetConfig+0x48>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a46      	ldr	r2, [pc, #280]	@ (8006364 <TIM_Base_SetConfig+0x154>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_Base_SetConfig+0x48>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a45      	ldr	r2, [pc, #276]	@ (8006368 <TIM_Base_SetConfig+0x158>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d108      	bne.n	800626a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a39      	ldr	r2, [pc, #228]	@ (8006354 <TIM_Base_SetConfig+0x144>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d023      	beq.n	80062ba <TIM_Base_SetConfig+0xaa>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006278:	d01f      	beq.n	80062ba <TIM_Base_SetConfig+0xaa>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a36      	ldr	r2, [pc, #216]	@ (8006358 <TIM_Base_SetConfig+0x148>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d01b      	beq.n	80062ba <TIM_Base_SetConfig+0xaa>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a35      	ldr	r2, [pc, #212]	@ (800635c <TIM_Base_SetConfig+0x14c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d017      	beq.n	80062ba <TIM_Base_SetConfig+0xaa>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a34      	ldr	r2, [pc, #208]	@ (8006360 <TIM_Base_SetConfig+0x150>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d013      	beq.n	80062ba <TIM_Base_SetConfig+0xaa>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a33      	ldr	r2, [pc, #204]	@ (8006364 <TIM_Base_SetConfig+0x154>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00f      	beq.n	80062ba <TIM_Base_SetConfig+0xaa>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a33      	ldr	r2, [pc, #204]	@ (800636c <TIM_Base_SetConfig+0x15c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00b      	beq.n	80062ba <TIM_Base_SetConfig+0xaa>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a32      	ldr	r2, [pc, #200]	@ (8006370 <TIM_Base_SetConfig+0x160>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d007      	beq.n	80062ba <TIM_Base_SetConfig+0xaa>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a31      	ldr	r2, [pc, #196]	@ (8006374 <TIM_Base_SetConfig+0x164>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d003      	beq.n	80062ba <TIM_Base_SetConfig+0xaa>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006368 <TIM_Base_SetConfig+0x158>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d108      	bne.n	80062cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a18      	ldr	r2, [pc, #96]	@ (8006354 <TIM_Base_SetConfig+0x144>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d013      	beq.n	8006320 <TIM_Base_SetConfig+0x110>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006364 <TIM_Base_SetConfig+0x154>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00f      	beq.n	8006320 <TIM_Base_SetConfig+0x110>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a1a      	ldr	r2, [pc, #104]	@ (800636c <TIM_Base_SetConfig+0x15c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00b      	beq.n	8006320 <TIM_Base_SetConfig+0x110>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a19      	ldr	r2, [pc, #100]	@ (8006370 <TIM_Base_SetConfig+0x160>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d007      	beq.n	8006320 <TIM_Base_SetConfig+0x110>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a18      	ldr	r2, [pc, #96]	@ (8006374 <TIM_Base_SetConfig+0x164>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d003      	beq.n	8006320 <TIM_Base_SetConfig+0x110>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a13      	ldr	r2, [pc, #76]	@ (8006368 <TIM_Base_SetConfig+0x158>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d103      	bne.n	8006328 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b01      	cmp	r3, #1
 8006338:	d105      	bne.n	8006346 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f023 0201 	bic.w	r2, r3, #1
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	611a      	str	r2, [r3, #16]
  }
}
 8006346:	bf00      	nop
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40012c00 	.word	0x40012c00
 8006358:	40000400 	.word	0x40000400
 800635c:	40000800 	.word	0x40000800
 8006360:	40000c00 	.word	0x40000c00
 8006364:	40013400 	.word	0x40013400
 8006368:	40015000 	.word	0x40015000
 800636c:	40014000 	.word	0x40014000
 8006370:	40014400 	.word	0x40014400
 8006374:	40014800 	.word	0x40014800

08006378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	f023 0201 	bic.w	r2, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0303 	bic.w	r3, r3, #3
 80063b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f023 0302 	bic.w	r3, r3, #2
 80063c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a30      	ldr	r2, [pc, #192]	@ (8006494 <TIM_OC1_SetConfig+0x11c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d013      	beq.n	8006400 <TIM_OC1_SetConfig+0x88>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a2f      	ldr	r2, [pc, #188]	@ (8006498 <TIM_OC1_SetConfig+0x120>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00f      	beq.n	8006400 <TIM_OC1_SetConfig+0x88>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a2e      	ldr	r2, [pc, #184]	@ (800649c <TIM_OC1_SetConfig+0x124>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00b      	beq.n	8006400 <TIM_OC1_SetConfig+0x88>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a2d      	ldr	r2, [pc, #180]	@ (80064a0 <TIM_OC1_SetConfig+0x128>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_OC1_SetConfig+0x88>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a2c      	ldr	r2, [pc, #176]	@ (80064a4 <TIM_OC1_SetConfig+0x12c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_OC1_SetConfig+0x88>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a2b      	ldr	r2, [pc, #172]	@ (80064a8 <TIM_OC1_SetConfig+0x130>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d10c      	bne.n	800641a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f023 0308 	bic.w	r3, r3, #8
 8006406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f023 0304 	bic.w	r3, r3, #4
 8006418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a1d      	ldr	r2, [pc, #116]	@ (8006494 <TIM_OC1_SetConfig+0x11c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d013      	beq.n	800644a <TIM_OC1_SetConfig+0xd2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a1c      	ldr	r2, [pc, #112]	@ (8006498 <TIM_OC1_SetConfig+0x120>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00f      	beq.n	800644a <TIM_OC1_SetConfig+0xd2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a1b      	ldr	r2, [pc, #108]	@ (800649c <TIM_OC1_SetConfig+0x124>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00b      	beq.n	800644a <TIM_OC1_SetConfig+0xd2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a1a      	ldr	r2, [pc, #104]	@ (80064a0 <TIM_OC1_SetConfig+0x128>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d007      	beq.n	800644a <TIM_OC1_SetConfig+0xd2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a19      	ldr	r2, [pc, #100]	@ (80064a4 <TIM_OC1_SetConfig+0x12c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d003      	beq.n	800644a <TIM_OC1_SetConfig+0xd2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a18      	ldr	r2, [pc, #96]	@ (80064a8 <TIM_OC1_SetConfig+0x130>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d111      	bne.n	800646e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	621a      	str	r2, [r3, #32]
}
 8006488:	bf00      	nop
 800648a:	371c      	adds	r7, #28
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	40012c00 	.word	0x40012c00
 8006498:	40013400 	.word	0x40013400
 800649c:	40014000 	.word	0x40014000
 80064a0:	40014400 	.word	0x40014400
 80064a4:	40014800 	.word	0x40014800
 80064a8:	40015000 	.word	0x40015000

080064ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	f023 0210 	bic.w	r2, r3, #16
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f023 0320 	bic.w	r3, r3, #32
 80064fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	011b      	lsls	r3, r3, #4
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a2c      	ldr	r2, [pc, #176]	@ (80065bc <TIM_OC2_SetConfig+0x110>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d007      	beq.n	8006520 <TIM_OC2_SetConfig+0x74>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a2b      	ldr	r2, [pc, #172]	@ (80065c0 <TIM_OC2_SetConfig+0x114>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d003      	beq.n	8006520 <TIM_OC2_SetConfig+0x74>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a2a      	ldr	r2, [pc, #168]	@ (80065c4 <TIM_OC2_SetConfig+0x118>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d10d      	bne.n	800653c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	4313      	orrs	r3, r2
 8006532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800653a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a1f      	ldr	r2, [pc, #124]	@ (80065bc <TIM_OC2_SetConfig+0x110>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d013      	beq.n	800656c <TIM_OC2_SetConfig+0xc0>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a1e      	ldr	r2, [pc, #120]	@ (80065c0 <TIM_OC2_SetConfig+0x114>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00f      	beq.n	800656c <TIM_OC2_SetConfig+0xc0>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a1e      	ldr	r2, [pc, #120]	@ (80065c8 <TIM_OC2_SetConfig+0x11c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00b      	beq.n	800656c <TIM_OC2_SetConfig+0xc0>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a1d      	ldr	r2, [pc, #116]	@ (80065cc <TIM_OC2_SetConfig+0x120>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d007      	beq.n	800656c <TIM_OC2_SetConfig+0xc0>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a1c      	ldr	r2, [pc, #112]	@ (80065d0 <TIM_OC2_SetConfig+0x124>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d003      	beq.n	800656c <TIM_OC2_SetConfig+0xc0>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a17      	ldr	r2, [pc, #92]	@ (80065c4 <TIM_OC2_SetConfig+0x118>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d113      	bne.n	8006594 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006572:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800657a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	4313      	orrs	r3, r2
 8006586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	621a      	str	r2, [r3, #32]
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	40012c00 	.word	0x40012c00
 80065c0:	40013400 	.word	0x40013400
 80065c4:	40015000 	.word	0x40015000
 80065c8:	40014000 	.word	0x40014000
 80065cc:	40014400 	.word	0x40014400
 80065d0:	40014800 	.word	0x40014800

080065d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0303 	bic.w	r3, r3, #3
 800660e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	021b      	lsls	r3, r3, #8
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	4313      	orrs	r3, r2
 800662c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a2b      	ldr	r2, [pc, #172]	@ (80066e0 <TIM_OC3_SetConfig+0x10c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d007      	beq.n	8006646 <TIM_OC3_SetConfig+0x72>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a2a      	ldr	r2, [pc, #168]	@ (80066e4 <TIM_OC3_SetConfig+0x110>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d003      	beq.n	8006646 <TIM_OC3_SetConfig+0x72>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a29      	ldr	r2, [pc, #164]	@ (80066e8 <TIM_OC3_SetConfig+0x114>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d10d      	bne.n	8006662 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800664c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a1e      	ldr	r2, [pc, #120]	@ (80066e0 <TIM_OC3_SetConfig+0x10c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d013      	beq.n	8006692 <TIM_OC3_SetConfig+0xbe>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a1d      	ldr	r2, [pc, #116]	@ (80066e4 <TIM_OC3_SetConfig+0x110>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00f      	beq.n	8006692 <TIM_OC3_SetConfig+0xbe>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a1d      	ldr	r2, [pc, #116]	@ (80066ec <TIM_OC3_SetConfig+0x118>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00b      	beq.n	8006692 <TIM_OC3_SetConfig+0xbe>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a1c      	ldr	r2, [pc, #112]	@ (80066f0 <TIM_OC3_SetConfig+0x11c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d007      	beq.n	8006692 <TIM_OC3_SetConfig+0xbe>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a1b      	ldr	r2, [pc, #108]	@ (80066f4 <TIM_OC3_SetConfig+0x120>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d003      	beq.n	8006692 <TIM_OC3_SetConfig+0xbe>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a16      	ldr	r2, [pc, #88]	@ (80066e8 <TIM_OC3_SetConfig+0x114>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d113      	bne.n	80066ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	621a      	str	r2, [r3, #32]
}
 80066d4:	bf00      	nop
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	40012c00 	.word	0x40012c00
 80066e4:	40013400 	.word	0x40013400
 80066e8:	40015000 	.word	0x40015000
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40014400 	.word	0x40014400
 80066f4:	40014800 	.word	0x40014800

080066f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006726:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800672a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	021b      	lsls	r3, r3, #8
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	031b      	lsls	r3, r3, #12
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a2c      	ldr	r2, [pc, #176]	@ (8006808 <TIM_OC4_SetConfig+0x110>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d007      	beq.n	800676c <TIM_OC4_SetConfig+0x74>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a2b      	ldr	r2, [pc, #172]	@ (800680c <TIM_OC4_SetConfig+0x114>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d003      	beq.n	800676c <TIM_OC4_SetConfig+0x74>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a2a      	ldr	r2, [pc, #168]	@ (8006810 <TIM_OC4_SetConfig+0x118>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d10d      	bne.n	8006788 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	031b      	lsls	r3, r3, #12
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006786:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a1f      	ldr	r2, [pc, #124]	@ (8006808 <TIM_OC4_SetConfig+0x110>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d013      	beq.n	80067b8 <TIM_OC4_SetConfig+0xc0>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a1e      	ldr	r2, [pc, #120]	@ (800680c <TIM_OC4_SetConfig+0x114>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d00f      	beq.n	80067b8 <TIM_OC4_SetConfig+0xc0>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a1e      	ldr	r2, [pc, #120]	@ (8006814 <TIM_OC4_SetConfig+0x11c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00b      	beq.n	80067b8 <TIM_OC4_SetConfig+0xc0>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006818 <TIM_OC4_SetConfig+0x120>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d007      	beq.n	80067b8 <TIM_OC4_SetConfig+0xc0>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a1c      	ldr	r2, [pc, #112]	@ (800681c <TIM_OC4_SetConfig+0x124>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d003      	beq.n	80067b8 <TIM_OC4_SetConfig+0xc0>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a17      	ldr	r2, [pc, #92]	@ (8006810 <TIM_OC4_SetConfig+0x118>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d113      	bne.n	80067e0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	019b      	lsls	r3, r3, #6
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	019b      	lsls	r3, r3, #6
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	621a      	str	r2, [r3, #32]
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40012c00 	.word	0x40012c00
 800680c:	40013400 	.word	0x40013400
 8006810:	40015000 	.word	0x40015000
 8006814:	40014000 	.word	0x40014000
 8006818:	40014400 	.word	0x40014400
 800681c:	40014800 	.word	0x40014800

08006820 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800684e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	4313      	orrs	r3, r2
 800685c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006864:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	041b      	lsls	r3, r3, #16
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a19      	ldr	r2, [pc, #100]	@ (80068dc <TIM_OC5_SetConfig+0xbc>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d013      	beq.n	80068a2 <TIM_OC5_SetConfig+0x82>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a18      	ldr	r2, [pc, #96]	@ (80068e0 <TIM_OC5_SetConfig+0xc0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d00f      	beq.n	80068a2 <TIM_OC5_SetConfig+0x82>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a17      	ldr	r2, [pc, #92]	@ (80068e4 <TIM_OC5_SetConfig+0xc4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d00b      	beq.n	80068a2 <TIM_OC5_SetConfig+0x82>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a16      	ldr	r2, [pc, #88]	@ (80068e8 <TIM_OC5_SetConfig+0xc8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d007      	beq.n	80068a2 <TIM_OC5_SetConfig+0x82>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a15      	ldr	r2, [pc, #84]	@ (80068ec <TIM_OC5_SetConfig+0xcc>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d003      	beq.n	80068a2 <TIM_OC5_SetConfig+0x82>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a14      	ldr	r2, [pc, #80]	@ (80068f0 <TIM_OC5_SetConfig+0xd0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d109      	bne.n	80068b6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	021b      	lsls	r3, r3, #8
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	621a      	str	r2, [r3, #32]
}
 80068d0:	bf00      	nop
 80068d2:	371c      	adds	r7, #28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	40012c00 	.word	0x40012c00
 80068e0:	40013400 	.word	0x40013400
 80068e4:	40014000 	.word	0x40014000
 80068e8:	40014400 	.word	0x40014400
 80068ec:	40014800 	.word	0x40014800
 80068f0:	40015000 	.word	0x40015000

080068f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006922:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800693a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	051b      	lsls	r3, r3, #20
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a1a      	ldr	r2, [pc, #104]	@ (80069b4 <TIM_OC6_SetConfig+0xc0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d013      	beq.n	8006978 <TIM_OC6_SetConfig+0x84>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a19      	ldr	r2, [pc, #100]	@ (80069b8 <TIM_OC6_SetConfig+0xc4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00f      	beq.n	8006978 <TIM_OC6_SetConfig+0x84>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a18      	ldr	r2, [pc, #96]	@ (80069bc <TIM_OC6_SetConfig+0xc8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00b      	beq.n	8006978 <TIM_OC6_SetConfig+0x84>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a17      	ldr	r2, [pc, #92]	@ (80069c0 <TIM_OC6_SetConfig+0xcc>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d007      	beq.n	8006978 <TIM_OC6_SetConfig+0x84>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a16      	ldr	r2, [pc, #88]	@ (80069c4 <TIM_OC6_SetConfig+0xd0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d003      	beq.n	8006978 <TIM_OC6_SetConfig+0x84>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a15      	ldr	r2, [pc, #84]	@ (80069c8 <TIM_OC6_SetConfig+0xd4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d109      	bne.n	800698c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800697e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	029b      	lsls	r3, r3, #10
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	621a      	str	r2, [r3, #32]
}
 80069a6:	bf00      	nop
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40012c00 	.word	0x40012c00
 80069b8:	40013400 	.word	0x40013400
 80069bc:	40014000 	.word	0x40014000
 80069c0:	40014400 	.word	0x40014400
 80069c4:	40014800 	.word	0x40014800
 80069c8:	40015000 	.word	0x40015000

080069cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f023 0201 	bic.w	r2, r3, #1
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	011b      	lsls	r3, r3, #4
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f023 030a 	bic.w	r3, r3, #10
 8006a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	621a      	str	r2, [r3, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b087      	sub	sp, #28
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	f023 0210 	bic.w	r2, r3, #16
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	031b      	lsls	r3, r3, #12
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f043 0307 	orr.w	r3, r3, #7
 8006ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	609a      	str	r2, [r3, #8]
}
 8006ab8:	bf00      	nop
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	021a      	lsls	r2, r3, #8
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	609a      	str	r2, [r3, #8]
}
 8006af8:	bf00      	nop
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	2201      	movs	r2, #1
 8006b18:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a1a      	ldr	r2, [r3, #32]
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	43db      	mvns	r3, r3
 8006b26:	401a      	ands	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a1a      	ldr	r2, [r3, #32]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f003 031f 	and.w	r3, r3, #31
 8006b36:	6879      	ldr	r1, [r7, #4]
 8006b38:	fa01 f303 	lsl.w	r3, r1, r3
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	621a      	str	r2, [r3, #32]
}
 8006b42:	bf00      	nop
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
	...

08006b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d101      	bne.n	8006b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b64:	2302      	movs	r3, #2
 8006b66:	e074      	b.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a34      	ldr	r2, [pc, #208]	@ (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d009      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a33      	ldr	r2, [pc, #204]	@ (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a31      	ldr	r2, [pc, #196]	@ (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d108      	bne.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006bac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a21      	ldr	r2, [pc, #132]	@ (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d022      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006be8:	d01d      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1f      	ldr	r2, [pc, #124]	@ (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d018      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d013      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1c      	ldr	r2, [pc, #112]	@ (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a15      	ldr	r2, [pc, #84]	@ (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a18      	ldr	r2, [pc, #96]	@ (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a11      	ldr	r2, [pc, #68]	@ (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d10c      	bne.n	8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40012c00 	.word	0x40012c00
 8006c64:	40013400 	.word	0x40013400
 8006c68:	40015000 	.word	0x40015000
 8006c6c:	40000400 	.word	0x40000400
 8006c70:	40000800 	.word	0x40000800
 8006c74:	40000c00 	.word	0x40000c00
 8006c78:	40014000 	.word	0x40014000

08006c7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e042      	b.n	8006da0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d106      	bne.n	8006d32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7fa fdb7 	bl	80018a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2224      	movs	r2, #36	@ 0x24
 8006d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0201 	bic.w	r2, r2, #1
 8006d48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fb24 	bl	80073a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f825 	bl	8006da8 <UART_SetConfig>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d101      	bne.n	8006d68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e01b      	b.n	8006da0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0201 	orr.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fba3 	bl	80074e4 <UART_CheckIdleState>
 8006d9e:	4603      	mov	r3, r0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dac:	b08c      	sub	sp, #48	@ 0x30
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	4baa      	ldr	r3, [pc, #680]	@ (8007080 <UART_SetConfig+0x2d8>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	6812      	ldr	r2, [r2, #0]
 8006dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006de0:	430b      	orrs	r3, r1
 8006de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a9f      	ldr	r2, [pc, #636]	@ (8007084 <UART_SetConfig+0x2dc>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d004      	beq.n	8006e14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e10:	4313      	orrs	r3, r2
 8006e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006e1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	6812      	ldr	r2, [r2, #0]
 8006e26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e32:	f023 010f 	bic.w	r1, r3, #15
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a90      	ldr	r2, [pc, #576]	@ (8007088 <UART_SetConfig+0x2e0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d125      	bne.n	8006e98 <UART_SetConfig+0xf0>
 8006e4c:	4b8f      	ldr	r3, [pc, #572]	@ (800708c <UART_SetConfig+0x2e4>)
 8006e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e52:	f003 0303 	and.w	r3, r3, #3
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d81a      	bhi.n	8006e90 <UART_SetConfig+0xe8>
 8006e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e60 <UART_SetConfig+0xb8>)
 8006e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e60:	08006e71 	.word	0x08006e71
 8006e64:	08006e81 	.word	0x08006e81
 8006e68:	08006e79 	.word	0x08006e79
 8006e6c:	08006e89 	.word	0x08006e89
 8006e70:	2301      	movs	r3, #1
 8006e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e76:	e116      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e7e:	e112      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006e80:	2304      	movs	r3, #4
 8006e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e86:	e10e      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006e88:	2308      	movs	r3, #8
 8006e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e8e:	e10a      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006e90:	2310      	movs	r3, #16
 8006e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e96:	e106      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a7c      	ldr	r2, [pc, #496]	@ (8007090 <UART_SetConfig+0x2e8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d138      	bne.n	8006f14 <UART_SetConfig+0x16c>
 8006ea2:	4b7a      	ldr	r3, [pc, #488]	@ (800708c <UART_SetConfig+0x2e4>)
 8006ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea8:	f003 030c 	and.w	r3, r3, #12
 8006eac:	2b0c      	cmp	r3, #12
 8006eae:	d82d      	bhi.n	8006f0c <UART_SetConfig+0x164>
 8006eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb8 <UART_SetConfig+0x110>)
 8006eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb6:	bf00      	nop
 8006eb8:	08006eed 	.word	0x08006eed
 8006ebc:	08006f0d 	.word	0x08006f0d
 8006ec0:	08006f0d 	.word	0x08006f0d
 8006ec4:	08006f0d 	.word	0x08006f0d
 8006ec8:	08006efd 	.word	0x08006efd
 8006ecc:	08006f0d 	.word	0x08006f0d
 8006ed0:	08006f0d 	.word	0x08006f0d
 8006ed4:	08006f0d 	.word	0x08006f0d
 8006ed8:	08006ef5 	.word	0x08006ef5
 8006edc:	08006f0d 	.word	0x08006f0d
 8006ee0:	08006f0d 	.word	0x08006f0d
 8006ee4:	08006f0d 	.word	0x08006f0d
 8006ee8:	08006f05 	.word	0x08006f05
 8006eec:	2300      	movs	r3, #0
 8006eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ef2:	e0d8      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006efa:	e0d4      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006efc:	2304      	movs	r3, #4
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f02:	e0d0      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f04:	2308      	movs	r3, #8
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f0a:	e0cc      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f0c:	2310      	movs	r3, #16
 8006f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f12:	e0c8      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a5e      	ldr	r2, [pc, #376]	@ (8007094 <UART_SetConfig+0x2ec>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d125      	bne.n	8006f6a <UART_SetConfig+0x1c2>
 8006f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800708c <UART_SetConfig+0x2e4>)
 8006f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f28:	2b30      	cmp	r3, #48	@ 0x30
 8006f2a:	d016      	beq.n	8006f5a <UART_SetConfig+0x1b2>
 8006f2c:	2b30      	cmp	r3, #48	@ 0x30
 8006f2e:	d818      	bhi.n	8006f62 <UART_SetConfig+0x1ba>
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d00a      	beq.n	8006f4a <UART_SetConfig+0x1a2>
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	d814      	bhi.n	8006f62 <UART_SetConfig+0x1ba>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <UART_SetConfig+0x19a>
 8006f3c:	2b10      	cmp	r3, #16
 8006f3e:	d008      	beq.n	8006f52 <UART_SetConfig+0x1aa>
 8006f40:	e00f      	b.n	8006f62 <UART_SetConfig+0x1ba>
 8006f42:	2300      	movs	r3, #0
 8006f44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f48:	e0ad      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f50:	e0a9      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f52:	2304      	movs	r3, #4
 8006f54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f58:	e0a5      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f5a:	2308      	movs	r3, #8
 8006f5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f60:	e0a1      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f62:	2310      	movs	r3, #16
 8006f64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f68:	e09d      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a4a      	ldr	r2, [pc, #296]	@ (8007098 <UART_SetConfig+0x2f0>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d125      	bne.n	8006fc0 <UART_SetConfig+0x218>
 8006f74:	4b45      	ldr	r3, [pc, #276]	@ (800708c <UART_SetConfig+0x2e4>)
 8006f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f80:	d016      	beq.n	8006fb0 <UART_SetConfig+0x208>
 8006f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f84:	d818      	bhi.n	8006fb8 <UART_SetConfig+0x210>
 8006f86:	2b80      	cmp	r3, #128	@ 0x80
 8006f88:	d00a      	beq.n	8006fa0 <UART_SetConfig+0x1f8>
 8006f8a:	2b80      	cmp	r3, #128	@ 0x80
 8006f8c:	d814      	bhi.n	8006fb8 <UART_SetConfig+0x210>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <UART_SetConfig+0x1f0>
 8006f92:	2b40      	cmp	r3, #64	@ 0x40
 8006f94:	d008      	beq.n	8006fa8 <UART_SetConfig+0x200>
 8006f96:	e00f      	b.n	8006fb8 <UART_SetConfig+0x210>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9e:	e082      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa6:	e07e      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006fa8:	2304      	movs	r3, #4
 8006faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fae:	e07a      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fb6:	e076      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006fb8:	2310      	movs	r3, #16
 8006fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fbe:	e072      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a35      	ldr	r2, [pc, #212]	@ (800709c <UART_SetConfig+0x2f4>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d12a      	bne.n	8007020 <UART_SetConfig+0x278>
 8006fca:	4b30      	ldr	r3, [pc, #192]	@ (800708c <UART_SetConfig+0x2e4>)
 8006fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fd8:	d01a      	beq.n	8007010 <UART_SetConfig+0x268>
 8006fda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fde:	d81b      	bhi.n	8007018 <UART_SetConfig+0x270>
 8006fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fe4:	d00c      	beq.n	8007000 <UART_SetConfig+0x258>
 8006fe6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fea:	d815      	bhi.n	8007018 <UART_SetConfig+0x270>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <UART_SetConfig+0x250>
 8006ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ff4:	d008      	beq.n	8007008 <UART_SetConfig+0x260>
 8006ff6:	e00f      	b.n	8007018 <UART_SetConfig+0x270>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffe:	e052      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007000:	2302      	movs	r3, #2
 8007002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007006:	e04e      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007008:	2304      	movs	r3, #4
 800700a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800700e:	e04a      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007010:	2308      	movs	r3, #8
 8007012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007016:	e046      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007018:	2310      	movs	r3, #16
 800701a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800701e:	e042      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a17      	ldr	r2, [pc, #92]	@ (8007084 <UART_SetConfig+0x2dc>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d13a      	bne.n	80070a0 <UART_SetConfig+0x2f8>
 800702a:	4b18      	ldr	r3, [pc, #96]	@ (800708c <UART_SetConfig+0x2e4>)
 800702c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007030:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007034:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007038:	d01a      	beq.n	8007070 <UART_SetConfig+0x2c8>
 800703a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800703e:	d81b      	bhi.n	8007078 <UART_SetConfig+0x2d0>
 8007040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007044:	d00c      	beq.n	8007060 <UART_SetConfig+0x2b8>
 8007046:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800704a:	d815      	bhi.n	8007078 <UART_SetConfig+0x2d0>
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <UART_SetConfig+0x2b0>
 8007050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007054:	d008      	beq.n	8007068 <UART_SetConfig+0x2c0>
 8007056:	e00f      	b.n	8007078 <UART_SetConfig+0x2d0>
 8007058:	2300      	movs	r3, #0
 800705a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800705e:	e022      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007060:	2302      	movs	r3, #2
 8007062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007066:	e01e      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007068:	2304      	movs	r3, #4
 800706a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800706e:	e01a      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007070:	2308      	movs	r3, #8
 8007072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007076:	e016      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007078:	2310      	movs	r3, #16
 800707a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800707e:	e012      	b.n	80070a6 <UART_SetConfig+0x2fe>
 8007080:	cfff69f3 	.word	0xcfff69f3
 8007084:	40008000 	.word	0x40008000
 8007088:	40013800 	.word	0x40013800
 800708c:	40021000 	.word	0x40021000
 8007090:	40004400 	.word	0x40004400
 8007094:	40004800 	.word	0x40004800
 8007098:	40004c00 	.word	0x40004c00
 800709c:	40005000 	.word	0x40005000
 80070a0:	2310      	movs	r3, #16
 80070a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4aae      	ldr	r2, [pc, #696]	@ (8007364 <UART_SetConfig+0x5bc>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	f040 8097 	bne.w	80071e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80070b6:	2b08      	cmp	r3, #8
 80070b8:	d823      	bhi.n	8007102 <UART_SetConfig+0x35a>
 80070ba:	a201      	add	r2, pc, #4	@ (adr r2, 80070c0 <UART_SetConfig+0x318>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	080070e5 	.word	0x080070e5
 80070c4:	08007103 	.word	0x08007103
 80070c8:	080070ed 	.word	0x080070ed
 80070cc:	08007103 	.word	0x08007103
 80070d0:	080070f3 	.word	0x080070f3
 80070d4:	08007103 	.word	0x08007103
 80070d8:	08007103 	.word	0x08007103
 80070dc:	08007103 	.word	0x08007103
 80070e0:	080070fb 	.word	0x080070fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070e4:	f7fd ff7e 	bl	8004fe4 <HAL_RCC_GetPCLK1Freq>
 80070e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070ea:	e010      	b.n	800710e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070ec:	4b9e      	ldr	r3, [pc, #632]	@ (8007368 <UART_SetConfig+0x5c0>)
 80070ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070f0:	e00d      	b.n	800710e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070f2:	f7fd ff09 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 80070f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070f8:	e009      	b.n	800710e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007100:	e005      	b.n	800710e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800710c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800710e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 8130 	beq.w	8007376 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711a:	4a94      	ldr	r2, [pc, #592]	@ (800736c <UART_SetConfig+0x5c4>)
 800711c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007120:	461a      	mov	r2, r3
 8007122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007124:	fbb3 f3f2 	udiv	r3, r3, r2
 8007128:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	4613      	mov	r3, r2
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	4413      	add	r3, r2
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	429a      	cmp	r2, r3
 8007138:	d305      	bcc.n	8007146 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	429a      	cmp	r2, r3
 8007144:	d903      	bls.n	800714e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800714c:	e113      	b.n	8007376 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	2200      	movs	r2, #0
 8007152:	60bb      	str	r3, [r7, #8]
 8007154:	60fa      	str	r2, [r7, #12]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715a:	4a84      	ldr	r2, [pc, #528]	@ (800736c <UART_SetConfig+0x5c4>)
 800715c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007160:	b29b      	uxth	r3, r3
 8007162:	2200      	movs	r2, #0
 8007164:	603b      	str	r3, [r7, #0]
 8007166:	607a      	str	r2, [r7, #4]
 8007168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800716c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007170:	f7f9 fce6 	bl	8000b40 <__aeabi_uldivmod>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4610      	mov	r0, r2
 800717a:	4619      	mov	r1, r3
 800717c:	f04f 0200 	mov.w	r2, #0
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	020b      	lsls	r3, r1, #8
 8007186:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800718a:	0202      	lsls	r2, r0, #8
 800718c:	6979      	ldr	r1, [r7, #20]
 800718e:	6849      	ldr	r1, [r1, #4]
 8007190:	0849      	lsrs	r1, r1, #1
 8007192:	2000      	movs	r0, #0
 8007194:	460c      	mov	r4, r1
 8007196:	4605      	mov	r5, r0
 8007198:	eb12 0804 	adds.w	r8, r2, r4
 800719c:	eb43 0905 	adc.w	r9, r3, r5
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	469a      	mov	sl, r3
 80071a8:	4693      	mov	fp, r2
 80071aa:	4652      	mov	r2, sl
 80071ac:	465b      	mov	r3, fp
 80071ae:	4640      	mov	r0, r8
 80071b0:	4649      	mov	r1, r9
 80071b2:	f7f9 fcc5 	bl	8000b40 <__aeabi_uldivmod>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4613      	mov	r3, r2
 80071bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071c4:	d308      	bcc.n	80071d8 <UART_SetConfig+0x430>
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071cc:	d204      	bcs.n	80071d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6a3a      	ldr	r2, [r7, #32]
 80071d4:	60da      	str	r2, [r3, #12]
 80071d6:	e0ce      	b.n	8007376 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80071de:	e0ca      	b.n	8007376 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071e8:	d166      	bne.n	80072b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80071ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	d827      	bhi.n	8007242 <UART_SetConfig+0x49a>
 80071f2:	a201      	add	r2, pc, #4	@ (adr r2, 80071f8 <UART_SetConfig+0x450>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	0800721d 	.word	0x0800721d
 80071fc:	08007225 	.word	0x08007225
 8007200:	0800722d 	.word	0x0800722d
 8007204:	08007243 	.word	0x08007243
 8007208:	08007233 	.word	0x08007233
 800720c:	08007243 	.word	0x08007243
 8007210:	08007243 	.word	0x08007243
 8007214:	08007243 	.word	0x08007243
 8007218:	0800723b 	.word	0x0800723b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800721c:	f7fd fee2 	bl	8004fe4 <HAL_RCC_GetPCLK1Freq>
 8007220:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007222:	e014      	b.n	800724e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007224:	f7fd fef4 	bl	8005010 <HAL_RCC_GetPCLK2Freq>
 8007228:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800722a:	e010      	b.n	800724e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800722c:	4b4e      	ldr	r3, [pc, #312]	@ (8007368 <UART_SetConfig+0x5c0>)
 800722e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007230:	e00d      	b.n	800724e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007232:	f7fd fe69 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8007236:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007238:	e009      	b.n	800724e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800723a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800723e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007240:	e005      	b.n	800724e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800724c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 8090 	beq.w	8007376 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725a:	4a44      	ldr	r2, [pc, #272]	@ (800736c <UART_SetConfig+0x5c4>)
 800725c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007260:	461a      	mov	r2, r3
 8007262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007264:	fbb3 f3f2 	udiv	r3, r3, r2
 8007268:	005a      	lsls	r2, r3, #1
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	085b      	lsrs	r3, r3, #1
 8007270:	441a      	add	r2, r3
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	fbb2 f3f3 	udiv	r3, r2, r3
 800727a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	2b0f      	cmp	r3, #15
 8007280:	d916      	bls.n	80072b0 <UART_SetConfig+0x508>
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007288:	d212      	bcs.n	80072b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	b29b      	uxth	r3, r3
 800728e:	f023 030f 	bic.w	r3, r3, #15
 8007292:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	085b      	lsrs	r3, r3, #1
 8007298:	b29b      	uxth	r3, r3
 800729a:	f003 0307 	and.w	r3, r3, #7
 800729e:	b29a      	uxth	r2, r3
 80072a0:	8bfb      	ldrh	r3, [r7, #30]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	8bfa      	ldrh	r2, [r7, #30]
 80072ac:	60da      	str	r2, [r3, #12]
 80072ae:	e062      	b.n	8007376 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072b6:	e05e      	b.n	8007376 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d828      	bhi.n	8007312 <UART_SetConfig+0x56a>
 80072c0:	a201      	add	r2, pc, #4	@ (adr r2, 80072c8 <UART_SetConfig+0x520>)
 80072c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c6:	bf00      	nop
 80072c8:	080072ed 	.word	0x080072ed
 80072cc:	080072f5 	.word	0x080072f5
 80072d0:	080072fd 	.word	0x080072fd
 80072d4:	08007313 	.word	0x08007313
 80072d8:	08007303 	.word	0x08007303
 80072dc:	08007313 	.word	0x08007313
 80072e0:	08007313 	.word	0x08007313
 80072e4:	08007313 	.word	0x08007313
 80072e8:	0800730b 	.word	0x0800730b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ec:	f7fd fe7a 	bl	8004fe4 <HAL_RCC_GetPCLK1Freq>
 80072f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072f2:	e014      	b.n	800731e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072f4:	f7fd fe8c 	bl	8005010 <HAL_RCC_GetPCLK2Freq>
 80072f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072fa:	e010      	b.n	800731e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007368 <UART_SetConfig+0x5c0>)
 80072fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007300:	e00d      	b.n	800731e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007302:	f7fd fe01 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8007306:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007308:	e009      	b.n	800731e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800730a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007310:	e005      	b.n	800731e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800731c:	bf00      	nop
    }

    if (pclk != 0U)
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	2b00      	cmp	r3, #0
 8007322:	d028      	beq.n	8007376 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007328:	4a10      	ldr	r2, [pc, #64]	@ (800736c <UART_SetConfig+0x5c4>)
 800732a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800732e:	461a      	mov	r2, r3
 8007330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007332:	fbb3 f2f2 	udiv	r2, r3, r2
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	085b      	lsrs	r3, r3, #1
 800733c:	441a      	add	r2, r3
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	fbb2 f3f3 	udiv	r3, r2, r3
 8007346:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	2b0f      	cmp	r3, #15
 800734c:	d910      	bls.n	8007370 <UART_SetConfig+0x5c8>
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007354:	d20c      	bcs.n	8007370 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	b29a      	uxth	r2, r3
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	60da      	str	r2, [r3, #12]
 8007360:	e009      	b.n	8007376 <UART_SetConfig+0x5ce>
 8007362:	bf00      	nop
 8007364:	40008000 	.word	0x40008000
 8007368:	00f42400 	.word	0x00f42400
 800736c:	08007d58 	.word	0x08007d58
      }
      else
      {
        ret = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2201      	movs	r2, #1
 800737a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2201      	movs	r2, #1
 8007382:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2200      	movs	r2, #0
 800738a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2200      	movs	r2, #0
 8007390:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007392:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007396:	4618      	mov	r0, r3
 8007398:	3730      	adds	r7, #48	@ 0x30
 800739a:	46bd      	mov	sp, r7
 800739c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080073a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ac:	f003 0308 	and.w	r3, r3, #8
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00a      	beq.n	80073ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00a      	beq.n	800740e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007434:	f003 0310 	and.w	r3, r3, #16
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007456:	f003 0320 	and.w	r3, r3, #32
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01a      	beq.n	80074b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800749a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800749e:	d10a      	bne.n	80074b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	430a      	orrs	r2, r1
 80074d6:	605a      	str	r2, [r3, #4]
  }
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b098      	sub	sp, #96	@ 0x60
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074f4:	f7fa fb90 	bl	8001c18 <HAL_GetTick>
 80074f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0308 	and.w	r3, r3, #8
 8007504:	2b08      	cmp	r3, #8
 8007506:	d12f      	bne.n	8007568 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007508:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007510:	2200      	movs	r2, #0
 8007512:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f88e 	bl	8007638 <UART_WaitOnFlagUntilTimeout>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d022      	beq.n	8007568 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752a:	e853 3f00 	ldrex	r3, [r3]
 800752e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007532:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007536:	653b      	str	r3, [r7, #80]	@ 0x50
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	461a      	mov	r2, r3
 800753e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007540:	647b      	str	r3, [r7, #68]	@ 0x44
 8007542:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007544:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007546:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007548:	e841 2300 	strex	r3, r2, [r1]
 800754c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800754e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1e6      	bne.n	8007522 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2220      	movs	r2, #32
 8007558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e063      	b.n	8007630 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	2b04      	cmp	r3, #4
 8007574:	d149      	bne.n	800760a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007576:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800757e:	2200      	movs	r2, #0
 8007580:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f857 	bl	8007638 <UART_WaitOnFlagUntilTimeout>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d03c      	beq.n	800760a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	623b      	str	r3, [r7, #32]
   return(result);
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80075b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e6      	bne.n	8007590 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3308      	adds	r3, #8
 80075c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f023 0301 	bic.w	r3, r3, #1
 80075d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3308      	adds	r3, #8
 80075e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075e2:	61fa      	str	r2, [r7, #28]
 80075e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e6:	69b9      	ldr	r1, [r7, #24]
 80075e8:	69fa      	ldr	r2, [r7, #28]
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	617b      	str	r3, [r7, #20]
   return(result);
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1e5      	bne.n	80075c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2220      	movs	r2, #32
 80075fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e012      	b.n	8007630 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2220      	movs	r2, #32
 8007616:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3758      	adds	r7, #88	@ 0x58
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	603b      	str	r3, [r7, #0]
 8007644:	4613      	mov	r3, r2
 8007646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007648:	e04f      	b.n	80076ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007650:	d04b      	beq.n	80076ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007652:	f7fa fae1 	bl	8001c18 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	429a      	cmp	r2, r3
 8007660:	d302      	bcc.n	8007668 <UART_WaitOnFlagUntilTimeout+0x30>
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e04e      	b.n	800770a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0304 	and.w	r3, r3, #4
 8007676:	2b00      	cmp	r3, #0
 8007678:	d037      	beq.n	80076ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2b80      	cmp	r3, #128	@ 0x80
 800767e:	d034      	beq.n	80076ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b40      	cmp	r3, #64	@ 0x40
 8007684:	d031      	beq.n	80076ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	f003 0308 	and.w	r3, r3, #8
 8007690:	2b08      	cmp	r3, #8
 8007692:	d110      	bne.n	80076b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2208      	movs	r2, #8
 800769a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 f838 	bl	8007712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2208      	movs	r2, #8
 80076a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e029      	b.n	800770a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076c4:	d111      	bne.n	80076ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 f81e 	bl	8007712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2220      	movs	r2, #32
 80076da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e00f      	b.n	800770a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	4013      	ands	r3, r2
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	bf0c      	ite	eq
 80076fa:	2301      	moveq	r3, #1
 80076fc:	2300      	movne	r3, #0
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	461a      	mov	r2, r3
 8007702:	79fb      	ldrb	r3, [r7, #7]
 8007704:	429a      	cmp	r2, r3
 8007706:	d0a0      	beq.n	800764a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007712:	b480      	push	{r7}
 8007714:	b095      	sub	sp, #84	@ 0x54
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800772e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	461a      	mov	r2, r3
 8007736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007738:	643b      	str	r3, [r7, #64]	@ 0x40
 800773a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800773e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e6      	bne.n	800771a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3308      	adds	r3, #8
 8007752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	61fb      	str	r3, [r7, #28]
   return(result);
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007762:	f023 0301 	bic.w	r3, r3, #1
 8007766:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3308      	adds	r3, #8
 800776e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007770:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007772:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007774:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007776:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e3      	bne.n	800774c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007788:	2b01      	cmp	r3, #1
 800778a:	d118      	bne.n	80077be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	60bb      	str	r3, [r7, #8]
   return(result);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	f023 0310 	bic.w	r3, r3, #16
 80077a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077aa:	61bb      	str	r3, [r7, #24]
 80077ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	6979      	ldr	r1, [r7, #20]
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	613b      	str	r3, [r7, #16]
   return(result);
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e6      	bne.n	800778c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2220      	movs	r2, #32
 80077c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80077d2:	bf00      	nop
 80077d4:	3754      	adds	r7, #84	@ 0x54
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d101      	bne.n	80077f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80077f0:	2302      	movs	r3, #2
 80077f2:	e027      	b.n	8007844 <HAL_UARTEx_DisableFifoMode+0x66>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2224      	movs	r2, #36	@ 0x24
 8007800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0201 	bic.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007822:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2220      	movs	r2, #32
 8007836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007860:	2b01      	cmp	r3, #1
 8007862:	d101      	bne.n	8007868 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007864:	2302      	movs	r3, #2
 8007866:	e02d      	b.n	80078c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2224      	movs	r2, #36	@ 0x24
 8007874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0201 	bic.w	r2, r2, #1
 800788e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	430a      	orrs	r2, r1
 80078a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f84f 	bl	8007948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80078e0:	2302      	movs	r3, #2
 80078e2:	e02d      	b.n	8007940 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2224      	movs	r2, #36	@ 0x24
 80078f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f022 0201 	bic.w	r2, r2, #1
 800790a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f811 	bl	8007948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007954:	2b00      	cmp	r3, #0
 8007956:	d108      	bne.n	800796a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007968:	e031      	b.n	80079ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800796a:	2308      	movs	r3, #8
 800796c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800796e:	2308      	movs	r3, #8
 8007970:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	0e5b      	lsrs	r3, r3, #25
 800797a:	b2db      	uxtb	r3, r3
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	0f5b      	lsrs	r3, r3, #29
 800798a:	b2db      	uxtb	r3, r3
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007992:	7bbb      	ldrb	r3, [r7, #14]
 8007994:	7b3a      	ldrb	r2, [r7, #12]
 8007996:	4911      	ldr	r1, [pc, #68]	@ (80079dc <UARTEx_SetNbDataToProcess+0x94>)
 8007998:	5c8a      	ldrb	r2, [r1, r2]
 800799a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800799e:	7b3a      	ldrb	r2, [r7, #12]
 80079a0:	490f      	ldr	r1, [pc, #60]	@ (80079e0 <UARTEx_SetNbDataToProcess+0x98>)
 80079a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	7b7a      	ldrb	r2, [r7, #13]
 80079b4:	4909      	ldr	r1, [pc, #36]	@ (80079dc <UARTEx_SetNbDataToProcess+0x94>)
 80079b6:	5c8a      	ldrb	r2, [r1, r2]
 80079b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80079bc:	7b7a      	ldrb	r2, [r7, #13]
 80079be:	4908      	ldr	r1, [pc, #32]	@ (80079e0 <UARTEx_SetNbDataToProcess+0x98>)
 80079c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80079ce:	bf00      	nop
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	08007d70 	.word	0x08007d70
 80079e0:	08007d78 	.word	0x08007d78

080079e4 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	ed93 7a06 	vldr	s14, [r3, #24]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	edd3 7a07 	vldr	s15, [r3, #28]
 80079fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	edd3 7a08 	vldr	s15, [r3, #32]
 8007a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	edd3 7a06 	vldr	s15, [r3, #24]
 8007a14:	eeb1 7a67 	vneg.f32	s14, s15
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	edd3 7a08 	vldr	s15, [r3, #32]
 8007a1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1a      	ldr	r2, [r3, #32]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d006      	beq.n	8007a48 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	330c      	adds	r3, #12
 8007a3e:	220c      	movs	r2, #12
 8007a40:	2100      	movs	r1, #0
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 f804 	bl	8007a50 <memset>
  }

}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <memset>:
 8007a50:	4402      	add	r2, r0
 8007a52:	4603      	mov	r3, r0
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d100      	bne.n	8007a5a <memset+0xa>
 8007a58:	4770      	bx	lr
 8007a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a5e:	e7f9      	b.n	8007a54 <memset+0x4>

08007a60 <__errno>:
 8007a60:	4b01      	ldr	r3, [pc, #4]	@ (8007a68 <__errno+0x8>)
 8007a62:	6818      	ldr	r0, [r3, #0]
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	2000000c 	.word	0x2000000c

08007a6c <__libc_init_array>:
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	4d0d      	ldr	r5, [pc, #52]	@ (8007aa4 <__libc_init_array+0x38>)
 8007a70:	4c0d      	ldr	r4, [pc, #52]	@ (8007aa8 <__libc_init_array+0x3c>)
 8007a72:	1b64      	subs	r4, r4, r5
 8007a74:	10a4      	asrs	r4, r4, #2
 8007a76:	2600      	movs	r6, #0
 8007a78:	42a6      	cmp	r6, r4
 8007a7a:	d109      	bne.n	8007a90 <__libc_init_array+0x24>
 8007a7c:	4d0b      	ldr	r5, [pc, #44]	@ (8007aac <__libc_init_array+0x40>)
 8007a7e:	4c0c      	ldr	r4, [pc, #48]	@ (8007ab0 <__libc_init_array+0x44>)
 8007a80:	f000 f950 	bl	8007d24 <_init>
 8007a84:	1b64      	subs	r4, r4, r5
 8007a86:	10a4      	asrs	r4, r4, #2
 8007a88:	2600      	movs	r6, #0
 8007a8a:	42a6      	cmp	r6, r4
 8007a8c:	d105      	bne.n	8007a9a <__libc_init_array+0x2e>
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a94:	4798      	blx	r3
 8007a96:	3601      	adds	r6, #1
 8007a98:	e7ee      	b.n	8007a78 <__libc_init_array+0xc>
 8007a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a9e:	4798      	blx	r3
 8007aa0:	3601      	adds	r6, #1
 8007aa2:	e7f2      	b.n	8007a8a <__libc_init_array+0x1e>
 8007aa4:	08007d98 	.word	0x08007d98
 8007aa8:	08007d98 	.word	0x08007d98
 8007aac:	08007d98 	.word	0x08007d98
 8007ab0:	08007d9c 	.word	0x08007d9c

08007ab4 <fmod>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	ed2d 8b02 	vpush	{d8}
 8007aba:	ec57 6b10 	vmov	r6, r7, d0
 8007abe:	ec55 4b11 	vmov	r4, r5, d1
 8007ac2:	f000 f825 	bl	8007b10 <__ieee754_fmod>
 8007ac6:	4622      	mov	r2, r4
 8007ac8:	462b      	mov	r3, r5
 8007aca:	4630      	mov	r0, r6
 8007acc:	4639      	mov	r1, r7
 8007ace:	eeb0 8a40 	vmov.f32	s16, s0
 8007ad2:	eef0 8a60 	vmov.f32	s17, s1
 8007ad6:	f7f8 fff5 	bl	8000ac4 <__aeabi_dcmpun>
 8007ada:	b990      	cbnz	r0, 8007b02 <fmod+0x4e>
 8007adc:	2200      	movs	r2, #0
 8007ade:	2300      	movs	r3, #0
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	f7f8 ffbc 	bl	8000a60 <__aeabi_dcmpeq>
 8007ae8:	b158      	cbz	r0, 8007b02 <fmod+0x4e>
 8007aea:	f7ff ffb9 	bl	8007a60 <__errno>
 8007aee:	2321      	movs	r3, #33	@ 0x21
 8007af0:	6003      	str	r3, [r0, #0]
 8007af2:	2200      	movs	r2, #0
 8007af4:	2300      	movs	r3, #0
 8007af6:	4610      	mov	r0, r2
 8007af8:	4619      	mov	r1, r3
 8007afa:	f7f8 fe73 	bl	80007e4 <__aeabi_ddiv>
 8007afe:	ec41 0b18 	vmov	d8, r0, r1
 8007b02:	eeb0 0a48 	vmov.f32	s0, s16
 8007b06:	eef0 0a68 	vmov.f32	s1, s17
 8007b0a:	ecbd 8b02 	vpop	{d8}
 8007b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b10 <__ieee754_fmod>:
 8007b10:	ec53 2b11 	vmov	r2, r3, d1
 8007b14:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8007b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b1c:	ea52 040c 	orrs.w	r4, r2, ip
 8007b20:	ec51 0b10 	vmov	r0, r1, d0
 8007b24:	461e      	mov	r6, r3
 8007b26:	4617      	mov	r7, r2
 8007b28:	4696      	mov	lr, r2
 8007b2a:	d00c      	beq.n	8007b46 <__ieee754_fmod+0x36>
 8007b2c:	4c77      	ldr	r4, [pc, #476]	@ (8007d0c <__ieee754_fmod+0x1fc>)
 8007b2e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8007b32:	45a0      	cmp	r8, r4
 8007b34:	4689      	mov	r9, r1
 8007b36:	d806      	bhi.n	8007b46 <__ieee754_fmod+0x36>
 8007b38:	4254      	negs	r4, r2
 8007b3a:	4d75      	ldr	r5, [pc, #468]	@ (8007d10 <__ieee754_fmod+0x200>)
 8007b3c:	4314      	orrs	r4, r2
 8007b3e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8007b42:	42ac      	cmp	r4, r5
 8007b44:	d909      	bls.n	8007b5a <__ieee754_fmod+0x4a>
 8007b46:	f7f8 fd23 	bl	8000590 <__aeabi_dmul>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	f7f8 fe49 	bl	80007e4 <__aeabi_ddiv>
 8007b52:	ec41 0b10 	vmov	d0, r0, r1
 8007b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b5a:	45e0      	cmp	r8, ip
 8007b5c:	4682      	mov	sl, r0
 8007b5e:	4604      	mov	r4, r0
 8007b60:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8007b64:	dc09      	bgt.n	8007b7a <__ieee754_fmod+0x6a>
 8007b66:	dbf4      	blt.n	8007b52 <__ieee754_fmod+0x42>
 8007b68:	4282      	cmp	r2, r0
 8007b6a:	d8f2      	bhi.n	8007b52 <__ieee754_fmod+0x42>
 8007b6c:	d105      	bne.n	8007b7a <__ieee754_fmod+0x6a>
 8007b6e:	4b69      	ldr	r3, [pc, #420]	@ (8007d14 <__ieee754_fmod+0x204>)
 8007b70:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8007b74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b78:	e7eb      	b.n	8007b52 <__ieee754_fmod+0x42>
 8007b7a:	4a65      	ldr	r2, [pc, #404]	@ (8007d10 <__ieee754_fmod+0x200>)
 8007b7c:	ea19 0f02 	tst.w	r9, r2
 8007b80:	d148      	bne.n	8007c14 <__ieee754_fmod+0x104>
 8007b82:	f1b8 0f00 	cmp.w	r8, #0
 8007b86:	d13d      	bne.n	8007c04 <__ieee754_fmod+0xf4>
 8007b88:	4963      	ldr	r1, [pc, #396]	@ (8007d18 <__ieee754_fmod+0x208>)
 8007b8a:	4653      	mov	r3, sl
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dc36      	bgt.n	8007bfe <__ieee754_fmod+0xee>
 8007b90:	4216      	tst	r6, r2
 8007b92:	d14f      	bne.n	8007c34 <__ieee754_fmod+0x124>
 8007b94:	f1bc 0f00 	cmp.w	ip, #0
 8007b98:	d144      	bne.n	8007c24 <__ieee754_fmod+0x114>
 8007b9a:	4a5f      	ldr	r2, [pc, #380]	@ (8007d18 <__ieee754_fmod+0x208>)
 8007b9c:	463b      	mov	r3, r7
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	dc3d      	bgt.n	8007c1e <__ieee754_fmod+0x10e>
 8007ba2:	485e      	ldr	r0, [pc, #376]	@ (8007d1c <__ieee754_fmod+0x20c>)
 8007ba4:	4281      	cmp	r1, r0
 8007ba6:	db4a      	blt.n	8007c3e <__ieee754_fmod+0x12e>
 8007ba8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bb0:	485a      	ldr	r0, [pc, #360]	@ (8007d1c <__ieee754_fmod+0x20c>)
 8007bb2:	4282      	cmp	r2, r0
 8007bb4:	db57      	blt.n	8007c66 <__ieee754_fmod+0x156>
 8007bb6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8007bba:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8007bbe:	1a89      	subs	r1, r1, r2
 8007bc0:	1b98      	subs	r0, r3, r6
 8007bc2:	eba4 070e 	sub.w	r7, r4, lr
 8007bc6:	2900      	cmp	r1, #0
 8007bc8:	d162      	bne.n	8007c90 <__ieee754_fmod+0x180>
 8007bca:	4574      	cmp	r4, lr
 8007bcc:	bf38      	it	cc
 8007bce:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	bfa4      	itt	ge
 8007bd6:	463c      	movge	r4, r7
 8007bd8:	4603      	movge	r3, r0
 8007bda:	ea53 0104 	orrs.w	r1, r3, r4
 8007bde:	d0c6      	beq.n	8007b6e <__ieee754_fmod+0x5e>
 8007be0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007be4:	db69      	blt.n	8007cba <__ieee754_fmod+0x1aa>
 8007be6:	494d      	ldr	r1, [pc, #308]	@ (8007d1c <__ieee754_fmod+0x20c>)
 8007be8:	428a      	cmp	r2, r1
 8007bea:	db6c      	blt.n	8007cc6 <__ieee754_fmod+0x1b6>
 8007bec:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007bf0:	432b      	orrs	r3, r5
 8007bf2:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8007bf6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	e7a9      	b.n	8007b52 <__ieee754_fmod+0x42>
 8007bfe:	3901      	subs	r1, #1
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	e7c3      	b.n	8007b8c <__ieee754_fmod+0x7c>
 8007c04:	4945      	ldr	r1, [pc, #276]	@ (8007d1c <__ieee754_fmod+0x20c>)
 8007c06:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	ddc0      	ble.n	8007b90 <__ieee754_fmod+0x80>
 8007c0e:	3901      	subs	r1, #1
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	e7fa      	b.n	8007c0a <__ieee754_fmod+0xfa>
 8007c14:	ea4f 5128 	mov.w	r1, r8, asr #20
 8007c18:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007c1c:	e7b8      	b.n	8007b90 <__ieee754_fmod+0x80>
 8007c1e:	3a01      	subs	r2, #1
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	e7bc      	b.n	8007b9e <__ieee754_fmod+0x8e>
 8007c24:	4a3d      	ldr	r2, [pc, #244]	@ (8007d1c <__ieee754_fmod+0x20c>)
 8007c26:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	ddb9      	ble.n	8007ba2 <__ieee754_fmod+0x92>
 8007c2e:	3a01      	subs	r2, #1
 8007c30:	005b      	lsls	r3, r3, #1
 8007c32:	e7fa      	b.n	8007c2a <__ieee754_fmod+0x11a>
 8007c34:	ea4f 522c 	mov.w	r2, ip, asr #20
 8007c38:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007c3c:	e7b1      	b.n	8007ba2 <__ieee754_fmod+0x92>
 8007c3e:	1a40      	subs	r0, r0, r1
 8007c40:	281f      	cmp	r0, #31
 8007c42:	dc0a      	bgt.n	8007c5a <__ieee754_fmod+0x14a>
 8007c44:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8007c48:	fa08 f800 	lsl.w	r8, r8, r0
 8007c4c:	fa2a f303 	lsr.w	r3, sl, r3
 8007c50:	ea43 0308 	orr.w	r3, r3, r8
 8007c54:	fa0a f400 	lsl.w	r4, sl, r0
 8007c58:	e7aa      	b.n	8007bb0 <__ieee754_fmod+0xa0>
 8007c5a:	4b31      	ldr	r3, [pc, #196]	@ (8007d20 <__ieee754_fmod+0x210>)
 8007c5c:	1a5b      	subs	r3, r3, r1
 8007c5e:	fa0a f303 	lsl.w	r3, sl, r3
 8007c62:	2400      	movs	r4, #0
 8007c64:	e7a4      	b.n	8007bb0 <__ieee754_fmod+0xa0>
 8007c66:	1a80      	subs	r0, r0, r2
 8007c68:	281f      	cmp	r0, #31
 8007c6a:	dc0a      	bgt.n	8007c82 <__ieee754_fmod+0x172>
 8007c6c:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8007c70:	fa0c fc00 	lsl.w	ip, ip, r0
 8007c74:	fa27 f606 	lsr.w	r6, r7, r6
 8007c78:	ea46 060c 	orr.w	r6, r6, ip
 8007c7c:	fa07 fe00 	lsl.w	lr, r7, r0
 8007c80:	e79d      	b.n	8007bbe <__ieee754_fmod+0xae>
 8007c82:	4e27      	ldr	r6, [pc, #156]	@ (8007d20 <__ieee754_fmod+0x210>)
 8007c84:	1ab6      	subs	r6, r6, r2
 8007c86:	fa07 f606 	lsl.w	r6, r7, r6
 8007c8a:	f04f 0e00 	mov.w	lr, #0
 8007c8e:	e796      	b.n	8007bbe <__ieee754_fmod+0xae>
 8007c90:	4574      	cmp	r4, lr
 8007c92:	bf38      	it	cc
 8007c94:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	da05      	bge.n	8007ca8 <__ieee754_fmod+0x198>
 8007c9c:	0fe0      	lsrs	r0, r4, #31
 8007c9e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007ca2:	0064      	lsls	r4, r4, #1
 8007ca4:	3901      	subs	r1, #1
 8007ca6:	e78b      	b.n	8007bc0 <__ieee754_fmod+0xb0>
 8007ca8:	ea50 0307 	orrs.w	r3, r0, r7
 8007cac:	f43f af5f 	beq.w	8007b6e <__ieee754_fmod+0x5e>
 8007cb0:	0ffb      	lsrs	r3, r7, #31
 8007cb2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007cb6:	007c      	lsls	r4, r7, #1
 8007cb8:	e7f4      	b.n	8007ca4 <__ieee754_fmod+0x194>
 8007cba:	0fe1      	lsrs	r1, r4, #31
 8007cbc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8007cc0:	0064      	lsls	r4, r4, #1
 8007cc2:	3a01      	subs	r2, #1
 8007cc4:	e78c      	b.n	8007be0 <__ieee754_fmod+0xd0>
 8007cc6:	1a89      	subs	r1, r1, r2
 8007cc8:	2914      	cmp	r1, #20
 8007cca:	dc0a      	bgt.n	8007ce2 <__ieee754_fmod+0x1d2>
 8007ccc:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8007cd0:	fa03 f202 	lsl.w	r2, r3, r2
 8007cd4:	40cc      	lsrs	r4, r1
 8007cd6:	4322      	orrs	r2, r4
 8007cd8:	410b      	asrs	r3, r1
 8007cda:	ea43 0105 	orr.w	r1, r3, r5
 8007cde:	4610      	mov	r0, r2
 8007ce0:	e737      	b.n	8007b52 <__ieee754_fmod+0x42>
 8007ce2:	291f      	cmp	r1, #31
 8007ce4:	dc07      	bgt.n	8007cf6 <__ieee754_fmod+0x1e6>
 8007ce6:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8007cea:	40cc      	lsrs	r4, r1
 8007cec:	fa03 f202 	lsl.w	r2, r3, r2
 8007cf0:	4322      	orrs	r2, r4
 8007cf2:	462b      	mov	r3, r5
 8007cf4:	e7f1      	b.n	8007cda <__ieee754_fmod+0x1ca>
 8007cf6:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8007cfa:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8007cfe:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8007d02:	32e2      	adds	r2, #226	@ 0xe2
 8007d04:	fa43 f202 	asr.w	r2, r3, r2
 8007d08:	e7f3      	b.n	8007cf2 <__ieee754_fmod+0x1e2>
 8007d0a:	bf00      	nop
 8007d0c:	7fefffff 	.word	0x7fefffff
 8007d10:	7ff00000 	.word	0x7ff00000
 8007d14:	08007d80 	.word	0x08007d80
 8007d18:	fffffbed 	.word	0xfffffbed
 8007d1c:	fffffc02 	.word	0xfffffc02
 8007d20:	fffffbe2 	.word	0xfffffbe2

08007d24 <_init>:
 8007d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d26:	bf00      	nop
 8007d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2a:	bc08      	pop	{r3}
 8007d2c:	469e      	mov	lr, r3
 8007d2e:	4770      	bx	lr

08007d30 <_fini>:
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d32:	bf00      	nop
 8007d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d36:	bc08      	pop	{r3}
 8007d38:	469e      	mov	lr, r3
 8007d3a:	4770      	bx	lr
